Index: app/src/main/java/com/dou361/jjdxm_ijkplayer/remotecontrol/RemoteControlEZPlayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dou361.jjdxm_ijkplayer.remotecontrol;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.res.AssetManager;\r\nimport android.content.res.Configuration;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.Environment;\r\nimport android.os.Handler;\r\nimport android.os.Message;\r\nimport android.os.PowerManager;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.MotionEvent;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.Button;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.bumptech.glide.Glide;\r\nimport com.dou361.ijkplayer.bean.VideoijkBean;\r\nimport com.dou361.ijkplayer.listener.OnPlayerStartOrPauseListener;\r\nimport com.dou361.ijkplayer.listener.OnShowThumbnailListener;\r\nimport com.dou361.ijkplayer.widget.PlayStateParams;\r\nimport com.dou361.ijkplayer.widget.PlayerView;\r\nimport com.dou361.jjdxm_ijkplayer.MainActivity;\r\nimport com.dou361.jjdxm_ijkplayer.R;\r\nimport com.dou361.jjdxm_ijkplayer.command.Control;\r\nimport com.dou361.jjdxm_ijkplayer.command.Gears;\r\nimport com.dou361.jjdxm_ijkplayer.command.Handbrake;\r\nimport com.dou361.jjdxm_ijkplayer.command.Video;\r\nimport com.dou361.jjdxm_ijkplayer.mqtt.MQTTRequest;\r\nimport com.dou361.jjdxm_ijkplayer.mqtt.MQTTSample;\r\nimport com.dou361.jjdxm_ijkplayer.service.NtpTime;\r\nimport com.dou361.jjdxm_ijkplayer.videomonitoring.utlis.MediaUtils;\r\nimport com.tencent.iot.hub.device.android.core.log.TXMqttLogCallBack;\r\nimport com.tencent.iot.hub.device.android.core.util.TXLog;\r\nimport com.tencent.iot.hub.device.java.core.common.Status;\r\nimport com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;\r\nimport com.videogo.openapi.EZOpenSDK;\r\nimport com.videogo.openapi.EZPlayer;\r\n\r\nimport org.eclipse.paho.client.mqttv3.IMqttToken;\r\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.nio.charset.Charset;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport static android.content.ContentValues.TAG;\r\nimport static android.os.SystemClock.uptimeMillis;\r\n\r\n/**\r\n 遥控车辆进行移动\r\n */\r\npublic class RemoteControlEZPlayer extends Activity {\r\n\r\n    EZPlayer mEZPlayer1;\r\n    private String testURL=\"ezopen://open.ys7.com/231236707/1.live\";\r\n\r\n    public String hostIP = /*\"192.168.0.108:18081\";*/\"10.6.206.20:30549\";\r\n    public String userId = \"6D的安卓測試機\";\r\n    public String vin = \"001\";\r\n\r\n    private final static String mLogPath = Environment.getExternalStorageDirectory().getPath() + \"/tencent/\";\r\n\r\n    public CountDownTimer countDownTimer;\r\n    private MainActivity mParent;\r\n    private MQTTSample mqttSample;\r\n\r\n\r\n    private Context mContext;\r\n    private TextView  Speed;\r\n    private List<VideoijkBean> list;\r\n    private PowerManager.WakeLock wakeLock;\r\n    private View rootView;\r\n    private Activity mActivity;\r\n\r\n    private static final String TAG = \"FullscreenActivity\";\r\n    private boolean braking = true;\r\n    private boolean active_braking=false;\r\n    private int gearGlobal=0;\r\n    private int connectMQTTTimes=0;\r\n    private int handBrakeStatus = 0;\r\n    private Button LlightingButton;\r\n    private ImageButton imageButton_forward,imageButton_backward,imageButton_brake;\r\n    private ImageView app_video_play;\r\n    private Spinner Video_Modul_Spinner;\r\n\r\n    private double wheelAngle=0.0;\r\n    private double speed=0.0;\r\n    private NtpTime ntpTime=new NtpTime();\r\n\r\n\r\n\r\n    /*虛擬機*/\r\n//    private String mBrokerURL = \"ssl://fawtsp-mqtt-public-sit.faw.cn:8883\";  //传入null，即使用腾讯云物联网通信默认地址 \"${ProductId}.iotcloud.tencentdevices.com:8883\"  https://cloud.tencent.com/document/product/634/32546\r\n    private String mBrokerURL = \"ssl://fawtsp-mqtt-sit.faw.cn:8883\";\r\n    private String mProductID = \"XN03IY1B4J\";\r\n    private String mDevName = \"app_test\";\r\n    private String mDevPSK  = \"QVuXmEVWLERWWWEegO0Fzw==\"; //若使用证书验证，设为null\r\n    private String mTestTopic = \"XN03IY1B4J/app_test/data\";\r\n\r\n\r\n    /*真车配置*/\r\n//    private String mBrokerURL = \"ssl://fawtsp-mqtt-public-sit.faw.cn:8883\";  //传入null，即使用腾讯云物联网通信默认地址 \"${ProductId}.iotcloud.tencentdevices.com:8883\"  https://cloud.tencent.com/document/product/634/32546\r\n////    private String mBrokerURL = \"ssl://10.112.16.22:8883\";  //传入null，即使用腾讯云物联网通信默认地址 \"${ProductId}.iotcloud.tencentdevices.com:8883\"  https://cloud.tencent.com/document/product/634/32546\r\n//\r\n//    private String mProductID = \"6WYMRTCPAM\";\r\n//    private String mDevName = \"app_real\";\r\n//    private String mDevPSK  = \"nrRI5+fuV1AczfwxAofd7Q==\"; //若使用证书验证，设为null\r\n//    private String mTestTopic = \"6WYMRTCPAM/app_real/data\";    // productID/DeviceName/TopicName\r\n\r\n    private String mSubProductID = \"\"; // If you wont test gateway, let this to be null\r\n    private String mSubDevName = \"\";\r\n    private String mSubDevPsk = \"BuildConfig.SUB_DEVICE_PSK\";\r\n    private String mDevCertName = \"YOUR_DEVICE_NAME_cert.crt\";\r\n    private String mDevKeyName  = \"YOUR_DEVICE_NAME_private.key\";\r\n    private String mProductKey = \"BuildConfig.PRODUCT_KEY\";        // Used for dynamic register\r\n    private String mDevCert = \"\";           // Cert String\r\n    private String mDevPriv = \"\";           // Priv String\r\n\r\n    private volatile boolean mIsConnected=false;\r\n    ScalableImageView sImgView ;\r\n\r\n    @SuppressLint(\"InvalidWakeLockTag\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        Log.d(TAG, \"onCreate: \");\r\n        super.onCreate(savedInstanceState);\r\n        this.mContext = this;\r\n        this.mActivity = this;\r\n        rootView = getLayoutInflater().from(this).inflate(R.layout.activity_remote_control_ezplayer, null);\r\n\r\n        setContentView(rootView);\r\n\r\n        mEZPlayer1= EZOpenSDK.getInstance().createPlayerWithUrl(testURL);\r\n\r\n\r\n    mqttSample= new MQTTSample(getApplication(), new SelfMqttActionCallBack(), mBrokerURL, mProductID, mDevName, mDevPSK,\r\n                mDevCert, mDevPriv, mSubProductID, mSubDevName, mTestTopic, null, null, true, new SelfMqttLogCallBack());\r\n\r\n\r\n                while (!mIsConnected&&connectMQTTTimes<5) {\r\n                    Log.d(TAG, \"onCreate: Connecting Mqtt\");\r\n                    //轮询连接,万分感谢陈岩大佬\r\n                    Log.d(TAG, \"onCreate: mqttSample\"+mqttSample.toString());\r\n                    mqttSample.connect();\r\n                    mqttSample.subscribeTopic();\r\n                    Log.d(TAG, \"onCreate: Connet times:\"+connectMQTTTimes++);\r\n                    sleep(1000);\r\n                }\r\n                if(mIsConnected){\r\n                    Toast.makeText(RemoteControlEZPlayer.this, \"连接成功\",Toast.LENGTH_SHORT).show();\r\n                }else {\r\n                    Log.d(TAG, \"onCreate: 连接失败\");\r\n                    Toast.makeText(RemoteControlEZPlayer.this, \"连接失败\",Toast.LENGTH_SHORT).show();\r\n                    this.finish();\r\n                }\r\n\r\n        shiftHandbrake(1);\r\n        Log.d(TAG, \"onCreate: \");\r\n\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                 while (true) {\r\n                     if(braking){\r\n                    try {\r\n                        if (active_braking){\r\n                            moveVehicle(-1.0,0.0,wheelAngle);\r\n                            sleep(50);\r\n                        }\r\n                        else {\r\n                        moveVehicle(-0.2,0.0,wheelAngle);}\r\n                        sleep(50);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }}\r\n            }\r\n        }}).start();\r\n\r\n        /**常亮*/\r\n        PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\r\n        wakeLock = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, \"liveTAG\");\r\n        wakeLock.acquire();\r\n\r\n        CompentOnTouch compentOnTouch = new CompentOnTouch();\r\n\r\n        //返回键\r\n        findViewById(R.id.back2).setOnClickListener(new View.OnClickListener(){\r\n            @Override\r\n            public void onClick(View V){\r\n                //对话框\r\n                View my_view = LayoutInflater.from(RemoteControlEZPlayer.this).inflate(R.layout.my_dialog,null,false);\r\n                final AlertDialog dialog = new AlertDialog.Builder(RemoteControlEZPlayer.this).setView(my_view).create();\r\n                TextView Title = my_view.findViewById(R.id.title);\r\n                TextView Context = my_view.findViewById(R.id.content);\r\n                Title.setText(\"结束挪车\");\r\n                Context.setText(\"您已确定车辆已经抵达目标位置并结束挪车操作吗？\");\r\n                ImageButton Confirm = my_view.findViewById(R.id.confirm);\r\n                ImageButton cancel = my_view.findViewById(R.id.cancel);\r\n                Confirm.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        finish();\r\n                        Intent intent=new Intent(RemoteControlEZPlayer.this, MainActivity.class);\r\n                        startActivity(intent);\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n                cancel.setOnClickListener(new View.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(View v) {\r\n                        Toast.makeText(RemoteControlEZPlayer.this, \"取消成功\",Toast.LENGTH_SHORT).show();\r\n\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n                dialog.show();\r\n                dialog.getWindow().setLayout(1000,600);\r\n            }\r\n        });\r\n\r\n        imageButton_forward=findViewById(R.id.forward);\r\n        imageButton_forward.setOnTouchListener(compentOnTouch);\r\n\r\n        imageButton_backward=findViewById(R.id.backward);\r\n        imageButton_backward.setOnTouchListener(compentOnTouch);\r\n\r\n        imageButton_brake=findViewById(R.id.brake);\r\n        imageButton_brake.setOnTouchListener(compentOnTouch);\r\n        sImgView = findViewById(R.id.steering_wheel);\r\n\r\n        //方向盘角度在速度处显示\r\n        countDownTimer=new CountDownTimer(100000000,200) {\r\n            @Override\r\n            public void onTick(long millisUntilFinished) {\r\n                wheelAngle = sImgView.getmDegree();\r\n                Speed = findViewById(R.id.speed);\r\n                Speed.setText(String.valueOf((int)wheelAngle));\r\n            }\r\n            @Override\r\n            public void onFinish() {\r\n            }\r\n        }.start();\r\n\r\n        //下拉单选按钮\r\n        Video_Modul_Spinner = (Spinner)findViewById(R.id.Spinner_VIdeo_Model);\r\n        Video_Modul_Spinner.setSelection(0);//进入不会自动播放\r\n        Video_Modul_Spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                    String result = parent.getItemAtPosition(position).toString();\r\n                    Toast.makeText(RemoteControlEZPlayer.this, result, Toast.LENGTH_SHORT).show();\r\n                    switch (position) {\r\n                        case 0: {\r\n                            /**前摄像*/\r\n                            playViaDevSerial(\"E40958703\");\r\n                        }\r\n                        break;\r\n\r\n                        case 1: {\r\n                            /**后摄像*/\r\n                            playViaDevSerial(\"E40958817\");\r\n                        }\r\n                        break;\r\n\r\n                        case 2: {\r\n                            /**左摄像*/\r\n                            playViaDevSerial(\"E40958558\");\r\n                        }\r\n                        break;\r\n\r\n                        case 3: {\r\n                            /**右摄像*/\r\n                            playViaDevSerial(\"E40958484\");\r\n                        }\r\n                        break;\r\n\r\n                        case 4: {\r\n                            /**上帝*/\r\n                            playViaDevSerial(\"231236707\");\r\n                        }\r\n                        break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) { }\r\n        });\r\n\r\n    }\r\n\r\n    public void playViaDevSerial(final String deviceSerial){\r\n        SurfaceView mSurfaceView1 = (SurfaceView) findViewById(R.id.ezplayerSurfaceview);\r\n        SurfaceHolder mSurfaceHolder1 = mSurfaceView1.getHolder();\r\n        mEZPlayer1.release();\r\n        if(testURL.equals(deviceSerial)){\r\n            mEZPlayer1= EZOpenSDK.getInstance().createPlayerWithUrl(testURL);}\r\n        else{\r\n            mEZPlayer1 = EZOpenSDK.getInstance().createPlayer(deviceSerial, 1);\r\n//            mEZPlayer1=EZOpenSDK.getInstance().createPlayerWithUrl(testURL);\r\n        }\r\n\r\n        Log.d(TAG, \"playViaDevSerial: 播放器绑定界面\"+mEZPlayer1.setSurfaceHold(mSurfaceHolder1));\r\n\r\n        mSurfaceHolder1.addCallback(new SurfaceHolder.Callback() {\r\n            @Override\r\n            public void surfaceCreated(@NonNull SurfaceHolder surfaceHolder) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void surfaceChanged(@NonNull SurfaceHolder surfaceHolder, int i, int i1, int i2) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void surfaceDestroyed(@NonNull SurfaceHolder surfaceHolder) {\r\n\r\n            }\r\n        });\r\n\r\n        Log.d(TAG, \"playViaDevSerial: 播放器设备\"+deviceSerial);\r\n\r\n//        mEZPlayer1.setSurfaceHold(holder);\r\n//        mEZPlayer.setHandler(mHandler);\r\n\r\n//        holder.addCallback(this);\r\n        Log.d(TAG, \"playViaDevSerial: 播放成功？\"+mEZPlayer1.startRealPlay());\r\n    }\r\n\r\n\r\n\r\n\r\n    /**\r\n    1表示手刹释放，0表示手刹锁定\r\n     **/\r\n\r\n    private void shiftHandbrake(int handbrakeToSet) {\r\n        if(handbrakeToSet!=handBrakeStatus){\r\n            for(int i=0;i<15;i++){\r\n                Handbrake mHandbrake = new Handbrake();\r\n                mHandbrake.setTimestamp(ntpTime.getNtpTime());\r\n                mHandbrake.setStatus(handbrakeToSet);\r\n                mHandbrake.setType(14);\r\n                mHandbrake.setTaskid(\"6D\");\r\n                // 需先在腾讯云控制台，增加自定义主题: data，用于更新自定义数据\r\n                mqttSample.publishTopic(\"data\", JSON.toJSONString(mHandbrake));\r\n                Log.d(TAG, \"onClick: 手刹\"+JSON.toJSONString(mHandbrake));\r\n                sleep(50);\r\n            }\r\n            handBrakeStatus=handbrakeToSet;}\r\n        else return;\r\n    }\r\n\r\n    /**\r\n    1,2,3,4分別對應P,R,N,D四個檔位\r\n     **/\r\n    private void shiftGear(final int gear){\r\n//        if(speed==0){\r\n        for(int i=0;i<10;i++){\r\n                Gears mGear = new Gears();\r\n                mGear.setTimestamp(ntpTime.getNtpTime());\r\n                Log.d(TAG, \"onClick: \"+System.currentTimeMillis());\r\n                mGear.setGear(gear);\r\n                mGear.setType(13);\r\n                mGear.setTaskid(\"手機挂\"+gear+\"档\");\r\n                // 需先在腾讯云控制台，增加自定义主题: data，用于更新自定义数据\r\n                mqttSample.publishTopic(\"data\", JSON.toJSONString(mGear));\r\n                Log.d(TAG, \"onClick: \"+JSON.toJSONString(mGear));\r\n                sleep(50);\r\n        }\r\n        gearGlobal=gear;\r\n//    }\r\n//        else {\r\n//            moveVehicle(-0.3,0.0,0.0);\r\n//            shiftGear(gear);\r\n//        }\r\n    }\r\n\r\n    /**\r\n\r\n     @videoType\r\n     1为前方原始视频流，2为后方原始视频流，3为左侧原始视频流，4为右侧原始视频流，5为感知融合视频流，6为上帝视角视频流\r\n     @videoStatus\r\n     1为打开，0为关闭\r\n     */\r\n    private void shiftVideoType(int videoType,int videoStatus){\r\n        Video mVideo = new Video();\r\n        mVideo.setTimestamp(ntpTime.getNtpTime());\r\n        mVideo.setVideo_type(videoType);\r\n        mVideo.setOperation(videoStatus);\r\n        mVideo.setType(12);\r\n        // 需先在腾讯云控制台，增加自定义主题: data，用于更新自定义数据\r\n        mqttSample.publishTopic(\"data\", JSON.toJSONString(mVideo));\r\n        Log.d(TAG, \"onClick: \"+JSON.toJSONString(mVideo));\r\n    }\r\n\r\n    /**\r\n     * @acceleration 加速度，正是加速，負的是減速\r\n     * @speed 目標速度\r\n     * @wheelAngle 方向盤轉角\r\n     */\r\n    private void moveVehicle(Double acceleration,Double speed,Double wheelAngle){\r\n        Control mMove = new Control();\r\n        mMove.setTimestamp(ntpTime.getNtpTime());\r\n        mMove.setAcceleration(acceleration);\r\n        mMove.setSpeed(speed);\r\n        mMove.setType(11);\r\n        mMove.setWheel_angle(wheelAngle);\r\n        // 需先在腾讯云控制台，增加自定义主题: data，用于更新自定义数据\r\n        mqttSample.publishTopic(\"data\", JSON.toJSONString(mMove));\r\n        Log.d(TAG, \"onClick: 上传指令\"+JSON.toJSONString(mMove));\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n    }\r\n\r\n    //ms为需要休眠的时长\r\n    public static void sleep(long ms)\r\n    {\r\n        //uptimeMillis() Returns milliseconds since boot, not counting time spent in deep sleep.\r\n        long start = uptimeMillis();\r\n        long duration = ms;\r\n        boolean interrupted = false;\r\n        do {\r\n            try {\r\n                Thread.sleep(duration);\r\n            }\r\n            catch (InterruptedException e) {\r\n                interrupted = true;\r\n            }\r\n            duration = start + ms - uptimeMillis();\r\n        } while (duration > 0);\r\n\r\n        if (interrupted) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 实现TXMqttActionCallBack回调接口\r\n     */\r\n    private class SelfMqttActionCallBack extends TXMqttActionCallBack {\r\n\r\n        @Override\r\n        public void onConnectCompleted(Status status, boolean reconnect, Object userContext, String msg) {\r\n            String userContextInfo = \"\";\r\n            if (userContext instanceof MQTTRequest) {\r\n                userContextInfo = userContext.toString();\r\n            }\r\n            String logInfo = String.format(\"onConnectCompleted, status[%s], reconnect[%b], userContext[%s], msg[%s]\",\r\n                    status.name(), reconnect, userContextInfo, msg);\r\n            Log.d(TAG, \"onConnectCompleted: \"+logInfo);\r\n            if(status==Status.OK){\r\n             mIsConnected = true;}\r\n        }\r\n\r\n        @Override\r\n        public void onConnectionLost(Throwable cause) {\r\n            String logInfo = String.format(\"onConnectionLost, cause[%s]\", cause.toString());\r\n            Log.d(TAG, \"onConnectCompleted: \"+logInfo);\r\n        }\r\n\r\n        @Override\r\n        public void onDisconnectCompleted(Status status, Object userContext, String msg) {\r\n            String userContextInfo = \"\";\r\n            if (userContext instanceof MQTTRequest) {\r\n                userContextInfo = userContext.toString();\r\n            }\r\n            String logInfo = String.format(\"onDisconnectCompleted, status[%s], userContext[%s], msg[%s]\", status.name(), userContextInfo, msg);\r\n            Log.d(TAG, \"onConnectCompleted: \"+logInfo);\r\n            mIsConnected = false;\r\n        }\r\n\r\n        @Override\r\n        public void onPublishCompleted(Status status, IMqttToken token, Object userContext, String errMsg) {\r\n            String userContextInfo = \"\";\r\n            if (userContext instanceof MQTTRequest) {\r\n                userContextInfo = userContext.toString();\r\n            }\r\n            String logInfo = String.format(\"onPublishCompleted, status[%s], topics[%s],  userContext[%s], errMsg[%s]\",\r\n                    status.name(), Arrays.toString(token.getTopics()), userContextInfo, errMsg);\r\n            Log.d(TAG, \"onConnectCompleted: \"+logInfo);\r\n        }\r\n\r\n        @Override\r\n        public void onSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {\r\n            String userContextInfo = \"\";\r\n            if (userContext instanceof MQTTRequest) {\r\n                userContextInfo = userContext.toString();\r\n            }\r\n            String logInfo = String.format(\"onSubscribeCompleted, status[%s], topics[%s], userContext[%s], errMsg[%s]\",\r\n                    status.name(), Arrays.toString(asyncActionToken.getTopics()), userContextInfo, errMsg);\r\n//            Toast.makeText(RemoteControl.this, logInfo,Toast.LENGTH_SHORT).show();\r\n            if (Status.ERROR == status) {\r\n                Log.d(TAG, \"onConnectCompleted: \"+logInfo);\r\n            } else {\r\n                Log.d(TAG, \"onConnectCompleted: \"+logInfo);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onUnSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {\r\n            String userContextInfo = \"\";\r\n            if (userContext instanceof MQTTRequest) {\r\n                userContextInfo = userContext.toString();\r\n            }\r\n            String logInfo = String.format(\"onUnSubscribeCompleted, status[%s], topics[%s], userContext[%s], errMsg[%s]\",\r\n                    status.name(), Arrays.toString(asyncActionToken.getTopics()), userContextInfo, errMsg);\r\n            Log.d(TAG, \"onConnectCompleted: \"+logInfo);\r\n        }\r\n\r\n        @Override\r\n        public void onMessageReceived(final String topic, final MqttMessage message) {\r\n            String logInfo = String.format(\"receive command, topic[%s], message[%s]\", topic, message.toString());\r\n//            Toast.makeText(RemoteControl.this, logInfo,Toast.LENGTH_SHORT).show();\r\n            Log.d(TAG, \"onConnectCompleted: \"+logInfo);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 实现TXMqttLogCallBack回调接口\r\n     */\r\n    private class SelfMqttLogCallBack extends TXMqttLogCallBack {\r\n\r\n        @Override\r\n        public String setSecretKey() {\r\n            String secertKey;\r\n            if (mDevPSK != null && mDevPSK.length() != 0) {  //密钥认证\r\n                secertKey = mDevPSK;\r\n                secertKey = secertKey.length() > 24 ? secertKey.substring(0,24) : secertKey;\r\n                return secertKey;\r\n            } else {\r\n                BufferedReader cert;\r\n\r\n                if (mDevCert != null && mDevCert.length() != 0) { //动态注册,从DevCert中读取\r\n                    cert = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(mDevCert.getBytes(Charset.forName(\"utf8\"))), Charset.forName(\"utf8\")));\r\n\r\n                } else { //证书认证，从证书文件中读取\r\n                    AssetManager assetManager = mParent.getAssets();\r\n                    if (assetManager == null) {\r\n                        return null;\r\n                    }\r\n                    try {\r\n                        cert=new BufferedReader(new InputStreamReader(assetManager.open(mDevCertName)));\r\n                    } catch (IOException e) {\r\n//                        mParent.printLogInfo(TAG, \"getSecertKey failed, cannot open CRT Files.\",mLogInfoText);\r\n                        return null;\r\n                    }\r\n                }\r\n                //获取密钥\r\n                try {\r\n                    if (cert.readLine().contains(\"-----BEGIN\")) {\r\n                        secertKey = cert.readLine();\r\n                        secertKey = secertKey.length() > 24 ? secertKey.substring(0,24) : secertKey;\r\n                    } else {\r\n                        secertKey = null;\r\n//                        mParent.printLogInfo(TAG,\"Invaild CRT Files.\", mLogInfoText);\r\n                    }\r\n                    cert.close();\r\n                } catch (IOException e) {\r\n                    TXLog.e(TAG, \"getSecertKey failed.\", e);\r\n//                    mParent.printLogInfo(TAG,\"getSecertKey failed.\", mLogInfoText);\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            return secertKey;\r\n        }\r\n\r\n        @Override\r\n        public void printDebug(String message){\r\n//            mParent.printLogInfo(TAG, message, mLogInfoText);\r\n            //TXLog.d(TAG,message);\r\n        }\r\n\r\n        @Override\r\n        public boolean saveLogOffline(String log){\r\n            //判断SD卡是否可用\r\n            if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\r\n//                mParent.printLogInfo(TAG, \"saveLogOffline not ready\", mLogInfoText);\r\n                return false;\r\n            }\r\n\r\n            String logFilePath = mLogPath + mProductID + mDevName + \".log\";\r\n\r\n            TXLog.i(TAG, \"Save log to %s\", logFilePath);\r\n\r\n            try {\r\n                BufferedWriter wLog = new BufferedWriter(new FileWriter(new File(logFilePath), true));\r\n                wLog.write(log);\r\n                wLog.flush();\r\n                wLog.close();\r\n                return true;\r\n            } catch (IOException e) {\r\n                String logInfo = String.format(\"Save log to [%s] failed, check the Storage permission!\", logFilePath);\r\n//                mParent.printLogInfo(TAG,logInfo, mLogInfoText);\r\n                e.printStackTrace();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public String readOfflineLog(){\r\n            //判断SD卡是否可用\r\n            if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\r\n//                mParent.printLogInfo(TAG, \"readOfflineLog not ready\", mLogInfoText);\r\n                return null;\r\n            }\r\n\r\n            String logFilePath = mLogPath + mProductID + mDevName + \".log\";\r\n\r\n            TXLog.i(TAG, \"Read log from %s\", logFilePath);\r\n\r\n            try {\r\n                BufferedReader logReader = new BufferedReader(new FileReader(logFilePath));\r\n                StringBuilder offlineLog = new StringBuilder();\r\n                int data;\r\n                while (( data = logReader.read()) != -1 ) {\r\n                    offlineLog.append((char)data);\r\n                }\r\n                logReader.close();\r\n                return offlineLog.toString();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public boolean delOfflineLog(){\r\n\r\n            //判断SD卡是否可用\r\n            if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {\r\n//                mParent.printLogInfo(TAG, \"delOfflineLog not ready\", mLogInfoText);\r\n                return false;\r\n            }\r\n\r\n            String logFilePath = mLogPath + mProductID + mDevName + \".log\";\r\n\r\n            File file = new File(logFilePath);\r\n            if (file.exists() && file.isFile()) {\r\n                if (file.delete()) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    class\r\n    CompentOnTouch implements View.OnTouchListener {\r\n\r\n        public boolean isOnLongClick=false;\r\n        int i = 0;\r\n\r\n        @Override\r\n        public boolean onTouch(View view, MotionEvent motionEvent) {\r\n            switch (view.getId()) {\r\n// 这是btnMius下的一个层，为了增强易点击性\r\n                case R.id.backward:\r\n                    Video_Modul_Spinner.setSelection(1);\r\n                    onTouchChange(\"backward\", motionEvent.getAction());\r\n                    break;\r\n// 这里也写，是为了增强易点击性\r\n                case R.id.forward:\r\n                    Video_Modul_Spinner.setSelection(0);\r\n                    onTouchChange(\"forward\", motionEvent.getAction());\r\n                    break;\r\n                case R.id.brake:\r\n                    onTouchChange(\"brake\", motionEvent.getAction());\r\n                    break;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        private void onTouchChange(String methodName, int eventAction) {\r\n            Log.d(TAG, \"onTouchChange: \"+methodName+eventAction);\r\n            if(\"backward\".equals(methodName)||\"forward\".equals(methodName)){\r\n            braking =false;\r\n            active_braking=false;}\r\n// 按下松开分别对应启动停止前进方法\r\n            if (\"backward\".equals(methodName)) {\r\n//                Video_Modul_Spinner.setSelection(1);\r\n                if(gearGlobal!=2){ shiftGear(2);}\r\n                MiusThread miusThread = null;\r\n                if (eventAction == MotionEvent.ACTION_DOWN) {\r\n                    miusThread = new MiusThread();\r\n                    isOnLongClick = true;\r\n                    miusThread.start();\r\n                } else if (eventAction == MotionEvent.ACTION_UP) {\r\n                    isOnLongClick=false;\r\n                    braking =true;\r\n                    Log.d(TAG, \"onTouchChange: 松开手指\"+ braking);\r\n//                    Log.d(TAG, \"onTouchChange: isOnLongClick=false\"+miusThread.isInterrupted());\r\n                    if (miusThread != null) {\r\n                        miusThread.interrupt();\r\n                        Log.d(TAG, \"onTouchChange: 终止线程\");\r\n                        isOnLongClick = false;\r\n                    }\r\n                } else if (eventAction == MotionEvent.ACTION_MOVE) {\r\n                    if (miusThread != null) {\r\n                        isOnLongClick = true;\r\n                    }\r\n                }\r\n            }\r\n// 按下松开分别对应启动停止加线程方法\r\n            else if (\"forward\".equals(methodName)) {\r\n//                Video_Modul_Spinner.setSelection(0);\r\n                if(gearGlobal!=4){ shiftGear(4);}\r\n                PlusThread plusThread = null;\r\n                if (eventAction == MotionEvent.ACTION_DOWN) {\r\n                    plusThread = new PlusThread();\r\n                    isOnLongClick = true;\r\n                    plusThread.start();\r\n                } else if (eventAction == MotionEvent.ACTION_UP) {\r\n                    Log.d(TAG, \"onTouchChange: 松开手指\");\r\n                    isOnLongClick=false;\r\n                    braking =true;\r\n                    if (plusThread != null) {\r\n                        isOnLongClick = false;\r\n                    }\r\n                } else if (eventAction == MotionEvent.ACTION_MOVE) {\r\n                    if (plusThread != null) {\r\n                        isOnLongClick = true;\r\n                    }\r\n                }\r\n            }\r\n            else if (\"brake\".equals(methodName)) {\r\n                braking=true;\r\n                if (eventAction == MotionEvent.ACTION_DOWN) {\r\n                    active_braking=true;\r\n//                    moveVehicle(-1.0,0.0,0.0);\r\n                    isOnLongClick = true;\r\n                } else if (eventAction == MotionEvent.ACTION_UP) {\r\n                    Log.d(TAG, \"onTouchChange: 松开手指\");\r\n                    isOnLongClick=false;\r\n                    active_braking=false;\r\n                } else if (eventAction == MotionEvent.ACTION_MOVE) {\r\n                    isOnLongClick = true;\r\n                    active_braking=true;\r\n//                    moveVehicle(-1.0,0.0,0.0);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // 后退操作\r\n        class MiusThread extends Thread {\r\n            @Override\r\n            public void run() {\r\n                while (isOnLongClick) {\r\n                    try {\r\n                        Thread.sleep(50);\r\n                        myHandler.sendEmptyMessage(2);\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    super.run();\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // 前进操作\r\n        class PlusThread extends Thread {\r\n            @Override\r\n            public void run() {\r\n                while (isOnLongClick) {\r\n                    try {\r\n                        Thread.sleep(40);\r\n                        myHandler.sendEmptyMessage(1);\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    super.run();\r\n                }\r\n            }\r\n        }\r\n\r\n        Handler myHandler = new Handler() {\r\n            public void handleMessage(Message msg) {\r\n                switch (msg.what) {\r\n                    case 1:\r\n                        //前进操作\r\n                        Control mForward = new Control(5.0,0.2,wheelAngle);\r\n                        mqttSample.publishTopic(\"data\", JSON.toJSONString(mForward));\r\n                        Log.d(TAG, \"第 \"+(i++)+\"次上传\\n\"+JSON.toJSONString(mForward));\r\n                        moveVehicle(0.2,5.0,wheelAngle);\r\n                        break;\r\n                    case 2:\r\n                        Control mBackward = new Control(-5.0,0.2,wheelAngle);\r\n                        mqttSample.publishTopic(\"data\", JSON.toJSONString(mBackward));\r\n                        Log.d(TAG, \"第 \"+(i++)+\"次上传\\n\"+JSON.toJSONString(mBackward));\r\n                        moveVehicle(0.1,-5.0,wheelAngle);\r\n                        break;\r\n                    case 3:\r\n                        Control mBreak = new Control(0.0,-0.2,wheelAngle);\r\n                        mqttSample.publishTopic(\"data\", JSON.toJSONString(mBreak));\r\n                        Log.d(TAG, \"第 \"+(i++)+\"次上传\\n\"+JSON.toJSONString(mBreak));\r\n                        break;\r\n                }\r\n            };\r\n        };\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        /**demo的内容，恢复系统其它媒体的状态*/\r\n        MediaUtils.muteAudioFocus(mContext, true);\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        /**demo的内容，暂停系统其它媒体的状态*/\r\n        MediaUtils.muteAudioFocus(mContext, false);\r\n        /**demo的内容，激活设备常亮状态*/\r\n        if (wakeLock != null) {\r\n            wakeLock.acquire();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        if(mIsConnected){\r\n        super.onDestroy();\r\n        if(speed!=0){moveVehicle(-0.3,0.0,0.0);}\r\n        if(braking){braking=false;}\r\n        if(gearGlobal!=1){shiftGear(1);}\r\n        if(handBrakeStatus==1){shiftHandbrake(0);}\r\n        if(mIsConnected){mqttSample.disconnect();}\r\n\r\n        Log.d(TAG, \"onDestroy: 斷開視頻以及MQTT連接\");}\r\n    }\r\n\r\n    @Override\r\n    public void onConfigurationChanged(Configuration newConfig) {\r\n        super.onConfigurationChanged(newConfig);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n//        super.onBackPressed();\r\n        //对话框\r\n        AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n        builder.setTitle(\"结束挪车\");//设置对话框的标题\r\n        builder.setMessage(\"您已确定车辆已经抵达目标位置并结束挪车操作吗？\");//设置对话框的内容\r\n        builder.setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n            @Override\r\n            public void onClick(DialogInterface arg0, int arg1) {\r\n                finish();\r\n                Intent intent=new Intent(RemoteControlEZPlayer.this, MainActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n        builder.setNegativeButton(\"取消\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n            @Override\r\n            public void onClick(DialogInterface arg0, int arg1) {\r\n                Toast.makeText(RemoteControlEZPlayer.this, \"取消成功\",Toast.LENGTH_SHORT).show();\r\n\r\n            }\r\n        });\r\n        AlertDialog b=builder.create();\r\n        b.show();\r\n        /**demo的内容，恢复设备亮度状态*/\r\n        if (wakeLock != null) {\r\n            wakeLock.release();\r\n        }\r\n    }\r\n}\r\n
===================================================================
--- app/src/main/java/com/dou361/jjdxm_ijkplayer/remotecontrol/RemoteControlEZPlayer.java	(revision 0a79339a31be5764438e7c12d5dc21790fd30f39)
+++ app/src/main/java/com/dou361/jjdxm_ijkplayer/remotecontrol/RemoteControlEZPlayer.java	(date 1619058337730)
@@ -31,12 +31,7 @@
 import androidx.annotation.NonNull;
 
 import com.alibaba.fastjson.JSON;
-import com.bumptech.glide.Glide;
 import com.dou361.ijkplayer.bean.VideoijkBean;
-import com.dou361.ijkplayer.listener.OnPlayerStartOrPauseListener;
-import com.dou361.ijkplayer.listener.OnShowThumbnailListener;
-import com.dou361.ijkplayer.widget.PlayStateParams;
-import com.dou361.ijkplayer.widget.PlayerView;
 import com.dou361.jjdxm_ijkplayer.MainActivity;
 import com.dou361.jjdxm_ijkplayer.R;
 import com.dou361.jjdxm_ijkplayer.command.Control;
@@ -66,11 +61,10 @@
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.nio.charset.Charset;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Objects;
 
-import static android.content.ContentValues.TAG;
 import static android.os.SystemClock.uptimeMillis;
 
 /**
@@ -78,8 +72,10 @@
  */
 public class RemoteControlEZPlayer extends Activity {
 
-    EZPlayer mEZPlayer1;
-    private String testURL="ezopen://open.ys7.com/231236707/1.live";
+    EZPlayer ezPlayer;
+    private final String testURL=
+//            "rtmp://150.158.176.170:1935/live/fushion";//张浩本地上帝视角
+            "ezopen://open.ys7.com/231236707/1.live";//实验室摄像头
 
     public String hostIP = /*"192.168.0.108:18081";*/"10.6.206.20:30549";
     public String userId = "6D的安卓測試機";
@@ -126,13 +122,13 @@
 
 
     /*真车配置*/
-//    private String mBrokerURL = "ssl://fawtsp-mqtt-public-sit.faw.cn:8883";  //传入null，即使用腾讯云物联网通信默认地址 "${ProductId}.iotcloud.tencentdevices.com:8883"  https://cloud.tencent.com/document/product/634/32546
-////    private String mBrokerURL = "ssl://10.112.16.22:8883";  //传入null，即使用腾讯云物联网通信默认地址 "${ProductId}.iotcloud.tencentdevices.com:8883"  https://cloud.tencent.com/document/product/634/32546
-//
-//    private String mProductID = "6WYMRTCPAM";
-//    private String mDevName = "app_real";
-//    private String mDevPSK  = "nrRI5+fuV1AczfwxAofd7Q=="; //若使用证书验证，设为null
-//    private String mTestTopic = "6WYMRTCPAM/app_real/data";    // productID/DeviceName/TopicName
+/*
+    private String mBrokerURL = "ssl://fawtsp-mqtt-public-sit.faw.cn:8883";  //传入null，即使用腾讯云物联网通信默认地址 "${ProductId}.iotcloud.tencentdevices.com:8883"  https://cloud.tencent.com/document/product/634/32546
+    private String mProductID = "6WYMRTCPAM";
+    private String mDevName = "app_real";
+    private String mDevPSK  = "nrRI5+fuV1AczfwxAofd7Q=="; //若使用证书验证，设为null
+    private String mTestTopic = "6WYMRTCPAM/app_real/data";    // productID/DeviceName/TopicName
+*/
 
     private String mSubProductID = ""; // If you wont test gateway, let this to be null
     private String mSubDevName = "";
@@ -146,32 +142,35 @@
     private volatile boolean mIsConnected=false;
     ScalableImageView sImgView ;
 
-    @SuppressLint("InvalidWakeLockTag")
+    public RemoteControlEZPlayer() {
+    }
+
+    @SuppressLint({"InvalidWakeLockTag", "ClickableViewAccessibility"})
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         Log.d(TAG, "onCreate: ");
         super.onCreate(savedInstanceState);
         this.mContext = this;
         this.mActivity = this;
-        rootView = getLayoutInflater().from(this).inflate(R.layout.activity_remote_control_ezplayer, null);
+        getLayoutInflater();
+        rootView = LayoutInflater.from(this).inflate(R.layout.activity_remote_control_ezplayer, null);
 
         setContentView(rootView);
 
-        mEZPlayer1= EZOpenSDK.getInstance().createPlayerWithUrl(testURL);
+        ezPlayer = EZOpenSDK.getInstance().createPlayerWithUrl(testURL);
 
 
     mqttSample= new MQTTSample(getApplication(), new SelfMqttActionCallBack(), mBrokerURL, mProductID, mDevName, mDevPSK,
-                mDevCert, mDevPriv, mSubProductID, mSubDevName, mTestTopic, null, null, true, new SelfMqttLogCallBack());
+                mDevCert, mDevPriv, mSubProductID, mSubDevName, mTestTopic, null, null, false, new SelfMqttLogCallBack());
 
-
-                while (!mIsConnected&&connectMQTTTimes<5) {
+                while (!mIsConnected&&connectMQTTTimes<15) {
                     Log.d(TAG, "onCreate: Connecting Mqtt");
                     //轮询连接,万分感谢陈岩大佬
                     Log.d(TAG, "onCreate: mqttSample"+mqttSample.toString());
                     mqttSample.connect();
-                    mqttSample.subscribeTopic();
+//                    mqttSample.subscribeTopic();
                     Log.d(TAG, "onCreate: Connet times:"+connectMQTTTimes++);
-                    sleep(1000);
+                    sleep(500);
                 }
                 if(mIsConnected){
                     Toast.makeText(RemoteControlEZPlayer.this, "连接成功",Toast.LENGTH_SHORT).show();
@@ -192,11 +191,11 @@
                     try {
                         if (active_braking){
                             moveVehicle(-1.0,0.0,wheelAngle);
-                            sleep(50);
+                            sleep(100);
                         }
                         else {
                         moveVehicle(-0.2,0.0,wheelAngle);}
-                        sleep(50);
+                        sleep(100);
                     } catch (Exception e) {
                         e.printStackTrace();
                     }}
@@ -206,7 +205,7 @@
         /**常亮*/
         PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
         wakeLock = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, "liveTAG");
-        wakeLock.acquire();
+        wakeLock.acquire(10*60*1000L /*10 minutes*/);
 
         CompentOnTouch compentOnTouch = new CompentOnTouch();
 
@@ -241,7 +240,7 @@
                     }
                 });
                 dialog.show();
-                dialog.getWindow().setLayout(1000,600);
+                Objects.requireNonNull(dialog.getWindow()).setLayout(1000,600);
             }
         });
 
@@ -303,7 +302,7 @@
 
                         case 4: {
                             /**上帝*/
-                            playViaDevSerial("231236707");
+                            playViaDevSerial(testURL);
                         }
                         break;
 
@@ -321,15 +320,17 @@
     public void playViaDevSerial(final String deviceSerial){
         SurfaceView mSurfaceView1 = (SurfaceView) findViewById(R.id.ezplayerSurfaceview);
         SurfaceHolder mSurfaceHolder1 = mSurfaceView1.getHolder();
-        mEZPlayer1.release();
+        ezPlayer.release();
         if(testURL.equals(deviceSerial)){
-            mEZPlayer1= EZOpenSDK.getInstance().createPlayerWithUrl(testURL);}
+            Log.d(TAG, "playViaDevSerial: 通过网址播放");
+            ezPlayer = EZOpenSDK.getInstance().createPlayerWithUrl(testURL);}
         else{
-            mEZPlayer1 = EZOpenSDK.getInstance().createPlayer(deviceSerial, 1);
+            Log.d(TAG, "playViaDevSerial: 通过相机序列号播放");
+            ezPlayer = EZOpenSDK.getInstance().createPlayer(deviceSerial, 1);
 //            mEZPlayer1=EZOpenSDK.getInstance().createPlayerWithUrl(testURL);
         }
 
-        Log.d(TAG, "playViaDevSerial: 播放器绑定界面"+mEZPlayer1.setSurfaceHold(mSurfaceHolder1));
+        Log.d(TAG, "playViaDevSerial: 播放器绑定界面"+ ezPlayer.setSurfaceHold(mSurfaceHolder1));
 
         mSurfaceHolder1.addCallback(new SurfaceHolder.Callback() {
             @Override
@@ -349,12 +350,7 @@
         });
 
         Log.d(TAG, "playViaDevSerial: 播放器设备"+deviceSerial);
-
-//        mEZPlayer1.setSurfaceHold(holder);
-//        mEZPlayer.setHandler(mHandler);
-
-//        holder.addCallback(this);
-        Log.d(TAG, "playViaDevSerial: 播放成功？"+mEZPlayer1.startRealPlay());
+        Log.d(TAG, "playViaDevSerial: 播放成功？"+ ezPlayer.startRealPlay());
     }
 
 
@@ -375,10 +371,12 @@
                 // 需先在腾讯云控制台，增加自定义主题: data，用于更新自定义数据
                 mqttSample.publishTopic("data", JSON.toJSONString(mHandbrake));
                 Log.d(TAG, "onClick: 手刹"+JSON.toJSONString(mHandbrake));
-                sleep(50);
+                sleep(100);
             }
             handBrakeStatus=handbrakeToSet;}
-        else return;
+        else {
+            return;
+        }
     }
 
     /**
@@ -396,7 +394,7 @@
                 // 需先在腾讯云控制台，增加自定义主题: data，用于更新自定义数据
                 mqttSample.publishTopic("data", JSON.toJSONString(mGear));
                 Log.d(TAG, "onClick: "+JSON.toJSONString(mGear));
-                sleep(50);
+                sleep(100);
         }
         gearGlobal=gear;
 //    }
@@ -783,7 +781,7 @@
             public void run() {
                 while (isOnLongClick) {
                     try {
-                        Thread.sleep(50);
+                        Thread.sleep(100);
                         myHandler.sendEmptyMessage(2);
                     } catch (InterruptedException e) {
                         e.printStackTrace();
@@ -800,7 +798,7 @@
             public void run() {
                 while (isOnLongClick) {
                     try {
-                        Thread.sleep(40);
+                        Thread.sleep(100);
                         myHandler.sendEmptyMessage(1);
                     } catch (InterruptedException e) {
                         e.printStackTrace();
Index: app/src/main/java/com/dou361/jjdxm_ijkplayer/MyApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dou361.jjdxm_ijkplayer;\r\n\r\nimport android.app.Application;\r\nimport android.util.Log;\r\n\r\nimport com.videogo.openapi.EZOpenSDK;\r\n\r\nimport static com.tencent.iot.hub.device.java.core.mqtt.TXAlarmPingSender.TAG;\r\n\r\npublic class MyApplication extends Application {\r\n\r\n//    private static final String APP_KEY = \"fb74f1db939a476dbd768a4705f5129f\";\r\nprivate static final String APP_KEY = \"be31b2172a7f4e94a1541b91a5823aa4\";\r\nEZOpenSDK ezOpenSDK;\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        /** * sdk日志开关，正式发布需要去掉 */\r\n        EZOpenSDK.showSDKLog(true);\r\n        /** * 设置是否支持P2P取流,详见api */\r\n        EZOpenSDK.enableP2P(false);\r\n\r\n        /** * APP_KEY请替换成自己申请的 */\r\n        EZOpenSDK.initLib(this, APP_KEY);\r\n\r\n\r\n        ezOpenSDK.getInstance().setAccessToken(\"at.8q82facgdj87vddi64cj7dwqdjj4i1wf-8hf27wibc9-0saik8n-m9umptouf\");\r\n        Log.d(TAG, \"onCreate: \"+EZOpenSDK.getInstance().getEZAccessToken());\r\n\r\n    }\r\n}\r\n
===================================================================
--- app/src/main/java/com/dou361/jjdxm_ijkplayer/MyApplication.java	(revision 0a79339a31be5764438e7c12d5dc21790fd30f39)
+++ app/src/main/java/com/dou361/jjdxm_ijkplayer/MyApplication.java	(date 1618993836813)
@@ -24,7 +24,7 @@
         EZOpenSDK.initLib(this, APP_KEY);
 
 
-        ezOpenSDK.getInstance().setAccessToken("at.8q82facgdj87vddi64cj7dwqdjj4i1wf-8hf27wibc9-0saik8n-m9umptouf");
+        EZOpenSDK.getInstance().setAccessToken("at.cge630o03g6j59x2cl66huzu4lx353xb-2dnaidb58y-136ks1b-bjcfjj3zj");
         Log.d(TAG, "onCreate: "+EZOpenSDK.getInstance().getEZAccessToken());
 
     }
Index: app/src/main/java/com/dou361/jjdxm_ijkplayer/mqtt/MQTTSample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dou361.jjdxm_ijkplayer.mqtt;\r\n\r\nimport android.content.Context;\r\nimport android.os.Environment;\r\nimport android.util.Log;\r\n\r\nimport com.dou361.jjdxm_ijkplayer.mqtt.MQTTRequest;\r\nimport com.tencent.iot.hub.device.android.core.gateway.TXGatewayConnection;\r\nimport com.tencent.iot.hub.device.android.core.log.TXMqttLogCallBack;\r\nimport com.tencent.iot.hub.device.android.core.util.AsymcSslUtils;\r\nimport com.tencent.iot.hub.device.android.core.util.TXLog;\r\nimport com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;\r\nimport com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants;\r\nimport com.tencent.iot.hub.device.java.core.mqtt.TXOTACallBack;\r\nimport com.tencent.iot.hub.device.java.core.mqtt.TXOTAConstansts;\r\n\r\nimport org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions;\r\nimport org.eclipse.paho.client.mqttv3.MqttConnectOptions;\r\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\npublic class MQTTSample {\r\n\r\n    private static final String TAG = \"TXMQTT\";\r\n    // Default Value, should be changed in testing\r\n    private String mBrokerURL = null;  //传入null，即使用腾讯云物联网通信默认地址 \"${ProductId}.iotcloud.tencentdevices.com:8883\"  https://cloud.tencent.com/document/product/634/32546\r\n    private String mProductID = \"PRODUCT-ID\";\r\n    private String mDevName = \"DEVICE-NAME\";\r\n    private String mDevPSK = \"DEVICE-SECRET\";\r\n\r\n    private String mDevCertName = \"DEVICE_CERT-NAME \";\r\n    private String mDevKeyName  = \"DEVICE_KEY-NAME \";\r\n\r\n    private String mSubProductID = \"SUBDEV_PRODUCT-ID\";\r\n    private String mSubDevName = \"SUBDEV_DEV-NAME\";\r\n    private String mSubDevPsk = \"SUBDEV_DEVICE-SECRET\";\r\n    private String mTestTopic = \"TEST_TOPIC_WITH_SUB_PUB\";\r\n    private String mDevCert;\r\n    private String mDevPriv;\r\n\r\n    private boolean mMqttLogFlag;\r\n    private TXMqttLogCallBack mMqttLogCallBack;\r\n\t\r\n    private Context mContext;\r\n    private String path2Store = \"\";\r\n\r\n    private TXMqttActionCallBack mMqttActionCallBack;\r\n\r\n    /**\r\n     * MQTT连接实例\r\n     */\r\n    private TXGatewayConnection mMqttConnection;\r\n\r\n    /**\r\n     * 请求ID\r\n     */\r\n    private static AtomicInteger requestID = new AtomicInteger(0);\r\n\r\n    public MQTTSample(Context context, TXMqttLogCallBack logCallBack, TXMqttActionCallBack callBack) {\r\n        mContext = context;\r\n        mMqttActionCallBack = callBack;\r\n    }\r\n\r\n    public MQTTSample(Context context, TXMqttActionCallBack callBack, String brokerURL, String productId,\r\n                      String devName, String devPSK, String subProductID, String subDevName, String testTopic, String devCertName, String devKeyName,\r\n                      Boolean mqttLogFlag, TXMqttLogCallBack logCallBack) {\r\n        mBrokerURL = brokerURL;\r\n        mProductID = productId;\r\n        mDevName = devName;\r\n        mDevPSK = devPSK;\r\n        mSubProductID = subProductID;\r\n        mSubDevName = subDevName;\r\n        mTestTopic = testTopic;\r\n        mDevCertName = devCertName;\r\n        mDevKeyName = devKeyName;\r\n\r\n        mMqttLogFlag = mqttLogFlag;\r\n        mMqttLogCallBack = logCallBack;\r\n\r\n        mContext = context;\r\n        mMqttActionCallBack = callBack;\r\n   }\r\n\r\n    public MQTTSample(Context context, TXMqttActionCallBack callBack, String brokerURL, String productId,\r\n                      String devName, String devPsk, String devCert, String devPriv, String subProductID, String subDevName, String testTopic, String devCertName, String devKeyName,\r\n                      Boolean mqttLogFlag, TXMqttLogCallBack logCallBack) {\r\n        mBrokerURL = brokerURL;\r\n        mProductID = productId;\r\n        mDevName = devName;\r\n        mDevPSK = devPsk;\r\n        mDevCert = devCert;\r\n        mDevPriv = devPriv;\r\n        mSubProductID = subProductID;\r\n        mSubDevName = subDevName;\r\n        mTestTopic = testTopic;\r\n        mDevCertName = devCertName;\r\n        mDevKeyName = devKeyName;\r\n\r\n        mMqttLogFlag = mqttLogFlag;\r\n        mMqttLogCallBack = logCallBack;\r\n\r\n        mContext = context;\r\n        mMqttActionCallBack = callBack;\r\n        path2Store = mContext.getCacheDir().getAbsolutePath();\r\n    }\r\n\r\n    public MQTTSample(Context context, TXMqttActionCallBack callBack, String brokerURL, String productId,\r\n                      String devName, String devPsk, String devCert, String devPriv, String subProductID, String subDevName, String subDevPsk, String testTopic, String devCertName, String devKeyName,\r\n                      Boolean mqttLogFlag, TXMqttLogCallBack logCallBack) {\r\n        this(context, callBack, brokerURL, productId, devName, devPsk, devCert, devPriv, subProductID, subDevName, testTopic, devCertName, devKeyName, mqttLogFlag, logCallBack);\r\n        mSubDevPsk = subDevPsk;\r\n    }\r\n\r\n    public void setSubDevPsk(String val) {\r\n        mSubDevPsk = val;\r\n    }\r\n\r\n\r\n    public MQTTSample(Context context, TXMqttActionCallBack callBack, String brokerURL, String productId,\r\n                      String devName, String devPSK, String subProductID, String subDevName, String testTopic) {\r\n        mBrokerURL = brokerURL;\r\n        mProductID = productId;\r\n        mDevName = devName;\r\n        mDevPSK = devPSK;\r\n        mSubProductID = subProductID;\r\n        mSubDevName = subDevName;\r\n        mTestTopic = testTopic;\r\n\r\n        mContext = context;\r\n        mMqttActionCallBack = callBack;\r\n    }\r\n\r\n    private TXOTACallBack oTACallBack = new TXOTACallBack() {\r\n\r\n        @Override\r\n        public void onReportFirmwareVersion(int resultCode, String version, String resultMsg) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public boolean onLastestFirmwareReady(String url, String md5, String version) {\r\n            System.out.println(\"onLastestFirmwareReady url=\" + url + \" version \" + version);\r\n            mMqttConnection.gatewayDownSubdevApp(url, path2Store + \"/\" + md5, md5, version);\r\n            return true; // false 自动触发下载升级文件  true 需要手动触发下载升级文件\r\n        }\r\n\r\n        @Override\r\n        public void onDownloadProgress(int percent, String version) {\r\n            mMqttConnection.gatewaySubdevReportProgress(percent, version);\r\n        }\r\n\r\n        @Override\r\n        public void onDownloadCompleted(String outputFile, String version) {\r\n            mMqttConnection.gatewaySubdevReportStart(version);\r\n            mMqttConnection.gatewaySubdevReportSuccess(version);\r\n        }\r\n\r\n        @Override\r\n        public void onDownloadFailure(int errCode, String version) {\r\n            mMqttConnection.gatewaySubdevReportFail(errCode, \"\", version);\r\n        }\r\n    };\r\n\r\n     /**\r\n     * 建立MQTT连接\r\n     */\r\n    public void connect() {\r\n        mMqttConnection = new TXGatewayConnection(mContext, mBrokerURL, mProductID, mDevName, mDevPSK,null,null ,mMqttLogFlag, mMqttLogCallBack, mMqttActionCallBack);\r\n        mMqttConnection.setSubDevName(mSubDevName);\r\n        mMqttConnection.setSubDevProductKey(mSubDevPsk);\r\n        mMqttConnection.setSubProductID(mSubProductID);\r\n        MqttConnectOptions options = new MqttConnectOptions();\r\n        options.setConnectionTimeout(8);\r\n        options.setKeepAliveInterval(240);\r\n        options.setAutomaticReconnect(true);\r\n\r\n        if (mDevPriv != null && mDevCert != null && mDevPriv.length() != 0 && mDevCert.length() != 0) {\r\n            TXLog.i(TAG, \"Using cert stream \" + mDevPriv + \"  \" + mDevCert);\r\n            options.setSocketFactory(AsymcSslUtils.getSocketFactoryByStream(new ByteArrayInputStream(mDevCert.getBytes()), new ByteArrayInputStream(mDevPriv.getBytes())));\r\n        } else if (mDevPSK != null && mDevPSK.length() != 0){\r\n            TXLog.i(TAG, \"Using PSK\");\r\n            options.setSocketFactory(AsymcSslUtils.getDefaultSLLContext().getSocketFactory());\r\n        } else {\r\n            TXLog.i(TAG, \"Using cert assets file\");\r\n            options.setSocketFactory(AsymcSslUtils.getSocketFactoryByAssetsFile(mContext, mDevCertName, mDevKeyName));\r\n        }\r\n\r\n        MQTTRequest mqttRequest = new MQTTRequest(\"connect\", requestID.getAndIncrement());\r\n        mMqttConnection.connect(options, mqttRequest);\r\n\r\n        DisconnectedBufferOptions bufferOptions = new DisconnectedBufferOptions();\r\n        bufferOptions.setBufferEnabled(true);\r\n        bufferOptions.setBufferSize(1024);\r\n        bufferOptions.setDeleteOldestMessages(true);\r\n        mMqttConnection.setBufferOpts(bufferOptions);\r\n    }\r\n\r\n    /**\r\n     * 断开MQTT连接\r\n     */\r\n    public void disconnect() {\r\n        MQTTRequest mqttRequest = new MQTTRequest(\"disconnect\", requestID.getAndIncrement());\r\n        mMqttConnection.disConnect(mqttRequest);\r\n    }\r\n\r\n    public void setSubdevOnline() {\r\n        // set subdev online\r\n        mMqttConnection.gatewaySubdevOnline(mSubProductID, mSubDevName);\r\n    }\r\n\r\n    public void setSubDevOffline() {\r\n        mMqttConnection.gatewaySubdevOffline(mSubProductID, mSubDevName);\r\n    }\r\n\r\n    public void setSubDevBinded() {\r\n        mMqttConnection.gatewayBindSubdev(mSubProductID, mSubDevName, mSubDevPsk);\r\n    }\r\n\r\n    public void setSubDevUnbinded() {\r\n        mMqttConnection.gatewayUnbindSubdev(mSubProductID, mSubDevName);\r\n    }\r\n\r\n    public void checkSubdevRelation() {\r\n        mMqttConnection.getGatewaySubdevRealtion();\r\n    }\r\n\r\n    public void getRemoteConfig() {\r\n        mMqttConnection.getRemoteConfig();\r\n    }\r\n\r\n    public void concernRemoteConfig() {\r\n        mMqttConnection.concernConfig();\r\n    }\r\n\r\n    public void reportSubDevVersion(String version) {\r\n        mMqttConnection.gatewaySubdevReportVer(version);\r\n    }\r\n\r\n    public void initOTA() {\r\n        TXLog.e(TAG, \"path2Store \" + path2Store);\r\n        mMqttConnection.initOTA(path2Store, oTACallBack);\r\n    }\r\n\r\n    /**\r\n     * 订阅广播主题\r\n     */\r\n    public void subscribeBroadCastTopic() {\r\n        // 用户上下文（请求实例）\r\n        MQTTRequest mqttRequest = new MQTTRequest(\"subscribeTopic\", requestID.getAndIncrement());\r\n        // 订阅广播主题\r\n        mMqttConnection.subscribeBroadcastTopic(TXMqttConstants.QOS1, mqttRequest);\r\n    }\r\n\r\n    /**\r\n     * 订阅主题\r\n     *\r\n     */\r\n    public void subscribeTopic() {\r\n        // 主题\r\n        String topic = mTestTopic;\r\n        // QOS等级\r\n        int qos = TXMqttConstants.QOS1;\r\n        // 用户上下文（请求实例）\r\n        MQTTRequest mqttRequest = new MQTTRequest(\"subscribeTopic\", requestID.getAndIncrement());\r\n\r\n        Log.d(TAG, \"sub topic is \" + topic);\r\n\r\n        // 订阅主题\r\n        mMqttConnection.subscribe(topic, qos, mqttRequest);\r\n\r\n    }\r\n\r\n    /**\r\n     * 取消订阅主题\r\n     *\r\n     */\r\n    public void unSubscribeTopic() {\r\n        // 主题\r\n        String topic = mTestTopic;\r\n        // 用户上下文（请求实例）\r\n         MQTTRequest mqttRequest = new  MQTTRequest(\"unSubscribeTopic\", requestID.getAndIncrement());\r\n        Log.d(TAG, \"Start to unSubscribe\" + topic);\r\n        // 取消订阅主题\r\n        mMqttConnection.unSubscribe(topic, mqttRequest);\r\n    }\r\n\r\n    /**\r\n     * 发布主题\r\n     */\r\n    public void publishTopic(String topicName,  String data) {\r\n        // 主题\r\n        String topic = mTestTopic;\r\n        // MQTT消息\r\n        MqttMessage message = new MqttMessage();\r\n\r\n        //QoS=0，最多只往设备发一次\r\n        //对数据传输可靠性要求一般的场景，请在 Publish、Subscribe 时选择这个 QoS。\r\n        //QoS=1，至少让设备收到一次\r\n        //对数据传输可靠性要求高的场景，请在 Publish、Subscribe 时选择这个 Qos。\r\n        message.setQos(TXMqttConstants.QOS0);\r\n        message.setPayload(data.getBytes());\r\n\r\n        // 用户上下文（请求实例）\r\n         MQTTRequest mqttRequest = new  MQTTRequest(\"publishTopic\", requestID.getAndIncrement());\r\n\r\n        Log.d(TAG, \"pub topic \" + topic + message);\r\n        // 发布主题\r\n        mMqttConnection.publish(topic, message, mqttRequest);\r\n\r\n    }\r\n\r\n    /**\r\n     * 订阅RRPC主题\r\n     *\r\n     */\r\n    public void subscribeRRPCTopic() {\r\n        // 用户上下文（请求实例）\r\n         MQTTRequest mqttRequest = new MQTTRequest(\"subscribeTopic\", requestID.getAndIncrement());\r\n        // 订阅主题\r\n        mMqttConnection.subscribeRRPCTopic(TXMqttConstants.QOS0, mqttRequest);\r\n\r\n    }\r\n\r\n    /**\r\n     * 生成一条日志\r\n     * @param logLevel 日志级别：\r\n     *                 错误：TXMqttLogConstants.LEVEL_ERROR\r\n     *                 警告：TXMqttLogConstants.LEVEL_WARN\r\n     *                 通知：TXMqttLogConstants.LEVEL_INFO\r\n     *                 调试：TXMqttLogConstants.LEVEL_DEBUG\r\n     * @param tag\r\n     * @param format\r\n     * @param obj\r\n     */\r\n    public void mLog(int logLevel, final String tag,final String format, final Object... obj) {\r\n        if (mMqttLogFlag)\r\n            mMqttConnection.mLog(logLevel, tag, format, obj);\r\n    }\r\n\r\n    /**\r\n     * 发起一次日志上传\r\n     */\r\n    public void uploadLog() {\r\n        mMqttConnection.uploadLog();\r\n    }\r\n\r\n    public void checkFirmware() {\r\n\r\n        mMqttConnection.initOTA(Environment.getExternalStorageDirectory().getAbsolutePath(), new TXOTACallBack() {\r\n            @Override\r\n            public void onReportFirmwareVersion(int resultCode, String version, String resultMsg) {\r\n                TXLog.e(TAG, \"onReportFirmwareVersion:\" + resultCode + \", version:\" + version + \", resultMsg:\" + resultMsg);\r\n            }\r\n\r\n            @Override\r\n            public boolean onLastestFirmwareReady(String url, String md5, String version) {\r\n                TXLog.e(TAG, \"MQTTSample onLastestFirmwareReady\");\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public void onDownloadProgress(int percent, String version) {\r\n                TXLog.e(TAG, \"onDownloadProgress:\" + percent);\r\n            }\r\n\r\n            @Override\r\n            public void onDownloadCompleted(String outputFile, String version) {\r\n                TXLog.e(TAG, \"onDownloadCompleted:\" + outputFile + \", version:\" + version);\r\n\r\n                mMqttConnection.reportOTAState(TXOTAConstansts.ReportState.DONE, 0, \"OK\", version);\r\n            }\r\n\r\n            @Override\r\n            public void onDownloadFailure(int errCode, String version) {\r\n                TXLog.e(TAG, \"onDownloadFailure:\" + errCode);\r\n\r\n                mMqttConnection.reportOTAState(TXOTAConstansts.ReportState.FAIL, errCode, \"FAIL\", version);\r\n            }\r\n        });\r\n        mMqttConnection.reportCurrentFirmwareVersion(\"0.0.1\");\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"MQTTSample{\" +\r\n                \"mBrokerURL='\" + mBrokerURL + '\\'' +\r\n                \", mProductID='\" + mProductID + '\\'' +\r\n                \", mDevName='\" + mDevName + '\\'' +\r\n                \", mDevPSK='\" + mDevPSK + '\\'' +\r\n                \", mDevCertName='\" + mDevCertName + '\\'' +\r\n                \", mDevKeyName='\" + mDevKeyName + '\\'' +\r\n                \", mSubProductID='\" + mSubProductID + '\\'' +\r\n                \", mSubDevName='\" + mSubDevName + '\\'' +\r\n                \", mSubDevPsk='\" + mSubDevPsk + '\\'' +\r\n                \", mTestTopic='\" + mTestTopic + '\\'' +\r\n                \", mDevCert='\" + mDevCert + '\\'' +\r\n                \", mDevPriv='\" + mDevPriv + '\\'' +\r\n                \", mMqttLogFlag=\" + mMqttLogFlag +\r\n                \", mMqttLogCallBack=\" + mMqttLogCallBack +\r\n                \", mContext=\" + mContext +\r\n                \", path2Store='\" + path2Store + '\\'' +\r\n                \", mMqttActionCallBack=\" + mMqttActionCallBack +\r\n                \", mMqttConnection=\" + mMqttConnection +\r\n                \", oTACallBack=\" + oTACallBack +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/dou361/jjdxm_ijkplayer/mqtt/MQTTSample.java	(revision 0a79339a31be5764438e7c12d5dc21790fd30f39)
+++ app/src/main/java/com/dou361/jjdxm_ijkplayer/mqtt/MQTTSample.java	(date 1619056816569)
@@ -40,7 +40,7 @@
     private String mDevCert;
     private String mDevPriv;
 
-    private boolean mMqttLogFlag;
+    private boolean mMqttLogFlag=false;
     private TXMqttLogCallBack mMqttLogCallBack;
 	
     private Context mContext;
Index: hub-device-android/iot_core/src/main/java/com/tencent/iot/hub/device/android/core/gateway/TXGatewayConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.tencent.iot.hub.device.android.core.gateway;\r\n\r\nimport android.content.Context;\r\nimport android.util.Base64;\r\nimport android.util.Log;\r\n\r\nimport com.tencent.iot.hub.device.android.core.log.TXMqttLogCallBack;\r\nimport com.tencent.iot.hub.device.android.core.mqtt.TXAlarmPingSender;\r\nimport com.tencent.iot.hub.device.android.core.mqtt.TXMqttConnection;\r\nimport com.tencent.iot.hub.device.android.core.util.TXLog;\r\nimport com.tencent.iot.hub.device.java.core.common.Status;\r\nimport com.tencent.iot.hub.device.java.core.gateway.TXGatewaySubdev;\r\nimport com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;\r\nimport com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants;\r\nimport com.tencent.iot.hub.device.java.core.util.HmacSha256;\r\n\r\nimport org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions;\r\nimport org.eclipse.paho.client.mqttv3.IMqttActionListener;\r\nimport org.eclipse.paho.client.mqttv3.IMqttToken;\r\nimport org.eclipse.paho.client.mqttv3.MqttAsyncClient;\r\nimport org.eclipse.paho.client.mqttv3.MqttClientPersistence;\r\nimport org.eclipse.paho.client.mqttv3.MqttConnectOptions;\r\nimport org.eclipse.paho.client.mqttv3.MqttMessage;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.security.InvalidKeyException;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.util.HashMap;\r\n\r\nimport javax.crypto.Mac;\r\nimport javax.crypto.spec.SecretKeySpec;\r\n\r\nimport static com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants.MQTT_SDK_VER;\r\n\r\n/**\r\n * Created by willssong on 2018/12/25.\r\n */\r\n\r\npublic class TXGatewayConnection  extends TXMqttConnection {\r\n    public static final String TAG = \"TXMQTT\" + MQTT_SDK_VER;\r\n    private static final String HMAC_SHA_256 = \"HmacSHA256\";\r\n\r\n    private HashMap<String, TXGatewaySubdev> mSubdevs = new HashMap<String, TXGatewaySubdev>();\r\n    private static final String GW_OPERATION_RES_PREFIX = \"$gateway/operation/result/\";\r\n    private static final String GW_OPERATION_PREFIX = \"$gateway/operation/\";\r\n    private static final String PRODUCT_CONFIG_PREFIX = \"$config/operation/result/\";\r\n\r\n    public TXGatewayConnection(Context context, String serverURI, String productID, String deviceName, String secretKey, DisconnectedBufferOptions bufferOpts,\r\n                               MqttClientPersistence clientPersistence, Boolean mqttLogFlag, TXMqttLogCallBack logCallBack, TXMqttActionCallBack callBack) {\r\n        super(context, serverURI, productID, deviceName, secretKey, bufferOpts, clientPersistence, mqttLogFlag,logCallBack,callBack);\r\n    }\r\n\r\n    /**\r\n     * @param context           用户上下文（这个参数在回调函数时透传给用户）\r\n     * @param serverURI         服务器URI\r\n     * @param productID         产品名\r\n     * @param deviceName        设备名，唯一\r\n     * @param secretKey         密钥\r\n     * @param bufferOpts        发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用\r\n     * @param clientPersistence 消息永久存储\r\n     * @param callBack          连接、消息发布、消息订阅回调接口\r\n     */\r\n    public TXGatewayConnection(Context context, String serverURI, String productID, String deviceName, String secretKey,\r\n                            DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence, TXMqttLogCallBack logCallBack,TXMqttActionCallBack callBack) {\r\n        this(context, serverURI, productID, deviceName, secretKey, bufferOpts, clientPersistence,true, logCallBack, callBack);\r\n    }\r\n\r\n    /**\r\n     * 使用腾讯云物联网通信默认地址 \"${ProductId}.iotcloud.tencentdevices.com:8883\"  https://cloud.tencent.com/document/product/634/32546\r\n     * @param context\r\n     * @param productID\r\n     * @param deviceName\r\n     * @param secretKey\r\n     * @param bufferOpts\r\n     * @param clientPersistence\r\n     * @param callBack\r\n     */\r\n    public TXGatewayConnection(Context context, String productID, String deviceName, String secretKey,\r\n                               DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence,\r\n                               TXMqttActionCallBack callBack) {\r\n        this(context, null, productID, deviceName, secretKey, bufferOpts, clientPersistence, false,null, callBack);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param context\r\n     * @param productID\r\n     * @param deviceName\r\n     * @param secretKey\r\n     * @param bufferOpts\r\n     * @param callBack\r\n     */\r\n    public TXGatewayConnection(Context context, String productID, String deviceName, String secretKey,\r\n                               DisconnectedBufferOptions bufferOpts, TXMqttActionCallBack callBack) {\r\n        this(context, productID, deviceName, secretKey, bufferOpts, null, callBack);\r\n    }\r\n\r\n    public TXGatewayConnection(Context context, String srvURL, String productID, String deviceName,\r\n                               String secretKey, TXMqttActionCallBack callBack) {\r\n        this(context, srvURL, productID, deviceName, secretKey, null, null, false, null, callBack);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param context\r\n     * @param productID\r\n     * @param deviceName\r\n     * @param secretKey\r\n     * @param callBack\r\n     */\r\n    public TXGatewayConnection(Context context, String productID, String deviceName,\r\n                               String secretKey, TXMqttActionCallBack callBack) {\r\n        this(context, productID, deviceName, secretKey, null, null, callBack);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     *\r\n     * @param productId\r\n     * @param devName\r\n     * @return null if not existed otherwise the subdev\r\n     */\r\n    private TXGatewaySubdev findSubdev(String productId, String devName) {\r\n        Log.d(TAG, \"The hashed information is \" + mSubdevs);\r\n        return mSubdevs.get(productId + devName);\r\n    }\r\n\r\n    /**\r\n     * remove the subdev if it is offline\r\n     * @param subdev\r\n     * @return the operation results\r\n     */\r\n    private synchronized TXGatewaySubdev removeSubdev(TXGatewaySubdev subdev) {\r\n        return mSubdevs.remove(subdev.mProductId + subdev.mDevName);\r\n    }\r\n\r\n    /**\r\n     * remove the subdev if it is offline\r\n     * @param productId\r\n     * @param devName\r\n     * @return\r\n     */\r\n    private synchronized TXGatewaySubdev removeSubdev(String productId, String devName) {\r\n        return mSubdevs.remove(productId + devName);\r\n    }\r\n\r\n    /**\r\n     *  add a new subdev entry\r\n     * @param dev\r\n     */\r\n    private synchronized void addSubdev(TXGatewaySubdev dev) {\r\n        mSubdevs.put(dev.mProductId + dev.mDevName, dev);\r\n    }\r\n\r\n    /**\r\n     *  Get the subdev status\r\n     * @param productId\r\n     * @param devName\r\n     * @return the status of subdev\r\n     */\r\n    public Status getSubdevStatus(String productId, String devName) {\r\n        TXGatewaySubdev subdev = findSubdev(productId, devName);\r\n        if (subdev == null) {\r\n            return Status.SUBDEV_STAT_NOT_EXIST;\r\n        }\r\n        return subdev.getSubdevStatus();\r\n    }\r\n\r\n    /**\r\n     * set the status of the subdev\r\n     * @param productId\r\n     * @param devName\r\n     * @param stat\r\n     * @return the status of operation\r\n     */\r\n    public Status setSubdevStatus(String productId, String devName, Status stat) {\r\n        TXGatewaySubdev subdev = findSubdev(productId, devName);\r\n        if (subdev == null) {\r\n            return Status.SUBDEV_STAT_NOT_EXIST;\r\n        }\r\n        subdev.setSubdevStatus(stat);\r\n        return Status.OK;\r\n    }\r\n\r\n    /**\r\n     * publish the offline message for the subdev\r\n     * @param subProductID\r\n     * @param subDeviceName\r\n     * @return the result of operation\r\n     */\r\n    public Status gatewaySubdevOffline(String subProductID, String subDeviceName) {\r\n        Log.d(TAG, \"Try to find \" + subProductID + \" & \" + subDeviceName);\r\n        TXGatewaySubdev subdev = findSubdev(subProductID, subDeviceName);\r\n        if (subdev == null) {\r\n            Log.d(TAG, \"Cant find the subdev\");\r\n            subdev = new TXGatewaySubdev(subProductID, subDeviceName);\r\n        }\r\n        String topic = GW_OPERATION_PREFIX + mProductId + \"/\" + mDeviceName;\r\n\r\n        Log.d(TAG, \"set \" + subProductID + \" & \" + subDeviceName + \" to offline\");\r\n\r\n        // format the payload\r\n        JSONObject obj = new JSONObject();\r\n        try {\r\n            obj.put(\"type\", \"offline\");\r\n            JSONObject plObj = new JSONObject();\r\n            String strDev = \"[{'product_id':'\" + subProductID +\"','device_name':'\" + subDeviceName + \"'}]\";\r\n            JSONArray devs = new JSONArray(strDev);\r\n            plObj.put(\"devices\", devs);\r\n            obj.put(\"payload\", plObj);\r\n        } catch (JSONException e) {\r\n            return Status.ERROR;\r\n        }\r\n        MqttMessage message = new MqttMessage();\r\n        message.setQos(0);\r\n        message.setPayload(obj.toString().getBytes());\r\n        Log.d(TAG, \"publish message \" + message);\r\n\r\n        return super.publish(topic, message, null);\r\n    }\r\n\r\n    private static String sign(String src, String psk) {\r\n        Mac mac;\r\n\r\n        try {\r\n            mac = Mac.getInstance(HMAC_SHA_256);\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n        String hmacSign;\r\n        SecretKeySpec signKey = new SecretKeySpec(psk.getBytes(), HMAC_SHA_256);\r\n\r\n        try {\r\n            mac.init(signKey);\r\n            byte[] rawHmac = mac.doFinal(src.getBytes());\r\n            hmacSign = com.tencent.iot.hub.device.java.core.util.Base64.encodeToString(rawHmac, com.tencent.iot.hub.device.java.core.util.Base64.NO_WRAP);\r\n            return hmacSign;\r\n        } catch (InvalidKeyException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Status gatewayBindSubdev(String subProductID, String subDeviceName, String psk) {\r\n\r\n        String topic = GW_OPERATION_PREFIX + mProductId + \"/\" + mDeviceName;\r\n\r\n        // format the payload\r\n        JSONObject obj = new JSONObject();\r\n        try {\r\n            obj.put(\"type\", \"bind\");\r\n            JSONObject plObj = new JSONObject();\r\n            JSONObject dev = new JSONObject();\r\n            dev.put(\"product_id\", subProductID);\r\n            dev.put(\"device_name\", subDeviceName);\r\n            int randNum = (int) (Math.random() * 999999);\r\n            dev.put(\"random\", randNum);\r\n            long timestamp = System.currentTimeMillis() / 1000;\r\n            dev.put(\"timestamp\", timestamp);\r\n            dev.put(\"signmethod\", \"hmacsha256\");\r\n            dev.put(\"authtype\", \"psk\");\r\n            String text2Sgin = subProductID + subDeviceName + \";\" + randNum + \";\" + timestamp;\r\n            dev.put(\"signature\", sign(text2Sgin, psk));\r\n            JSONArray devs = new JSONArray();\r\n            devs.put(dev);\r\n            plObj.put(\"devices\", devs);\r\n            obj.put(\"payload\", plObj);\r\n        } catch (JSONException e) {\r\n            return Status.ERROR;\r\n        }\r\n\r\n        MqttMessage message = new MqttMessage();\r\n        message.setQos(0);\r\n        message.setPayload(obj.toString().getBytes());\r\n        Log.d(TAG, \"publish message \" + message);\r\n\r\n        return super.publish(topic, message, null);\r\n    }\r\n\r\n    public Status gatewayUnbindSubdev(String subProductID, String subDeviceName) {\r\n\r\n        String topic = GW_OPERATION_PREFIX + mProductId + \"/\" + mDeviceName;\r\n\r\n        // format the payload\r\n        JSONObject obj = new JSONObject();\r\n        try {\r\n            obj.put(\"type\", \"unbind\");\r\n            JSONObject plObj = new JSONObject();\r\n            JSONObject dev = new JSONObject();\r\n            dev.put(\"product_id\", subProductID);\r\n            dev.put(\"device_name\", subDeviceName);\r\n            JSONArray devs = new JSONArray();\r\n            devs.put(dev);\r\n            plObj.put(\"devices\", devs);\r\n            obj.put(\"payload\", plObj);\r\n        } catch (JSONException e) {\r\n            return Status.ERROR;\r\n        }\r\n\r\n        MqttMessage message = new MqttMessage();\r\n        message.setQos(0);\r\n        message.setPayload(obj.toString().getBytes());\r\n        Log.d(TAG, \"publish message \" + message);\r\n\r\n        return super.publish(topic, message, null);\r\n    }\r\n\r\n    public Status getGatewaySubdevRealtion() {\r\n        String topic = GW_OPERATION_PREFIX + mProductId + \"/\" + mDeviceName;\r\n\r\n        JSONObject obj = new JSONObject();\r\n        try {\r\n            obj.put(\"type\", \"describe_sub_devices\");\r\n        } catch (JSONException e) {\r\n            return Status.ERROR;\r\n        }\r\n\r\n        MqttMessage message = new MqttMessage();\r\n        message.setQos(0);\r\n        message.setPayload(obj.toString().getBytes());\r\n        Log.d(TAG, \"publish message \" + message);\r\n\r\n        return super.publish(topic, message, null);\r\n    }\r\n\r\n    public Status getRemoteConfig() {\r\n        // format the payload\r\n        JSONObject obj = new JSONObject();\r\n        try {\r\n            obj.put(\"type\", \"get\");\r\n        } catch (JSONException e) {\r\n            return Status.ERROR;\r\n        }\r\n\r\n        MqttMessage message = new MqttMessage();\r\n        // 这里添加获取到的数据\r\n        message.setPayload(obj.toString().getBytes());\r\n        message.setQos(1);\r\n        String topic = String.format(\"$config/report/%s/%s\", mProductId, mDeviceName);\r\n        return super.publish(topic, message, null);\r\n    }\r\n\r\n    public Status concernConfig() {\r\n        String subscribeConfigTopic = PRODUCT_CONFIG_PREFIX + mProductId + \"/\" + mDeviceName;\r\n        return this.subscribe(subscribeConfigTopic, 1, \"subscribe config topic\");\r\n    }\r\n\r\n    public Status gatewaySubdevOnline(String subProductID, String subDeviceName) {\r\n        TXGatewaySubdev subdev = findSubdev(subProductID, subDeviceName);\r\n        if (subdev == null) {\r\n            Log.d(TAG, \"Cant find the subdev\");\r\n            subdev = new TXGatewaySubdev(subProductID, subDeviceName);\r\n        }\r\n        String topic = GW_OPERATION_PREFIX + mProductId + \"/\" + mDeviceName;\r\n        Log.d(TAG, \"set \" + subProductID + \" & \" + subDeviceName + \" to Online\");\r\n\r\n        // format the payload\r\n        JSONObject obj = new JSONObject();\r\n        try {\r\n            obj.put(\"type\", \"online\");\r\n            JSONObject plObj = new JSONObject();\r\n            String strDev = \"[{'product_id':'\" + subProductID +\"','device_name':'\" + subDeviceName + \"'}]\";\r\n            JSONArray devs = new JSONArray(strDev);\r\n            plObj.put(\"devices\", devs);\r\n            obj.put(\"payload\", plObj);\r\n        } catch (JSONException e) {\r\n            return Status.ERROR;\r\n        }\r\n        addSubdev(subdev);\r\n\r\n        MqttMessage message = new MqttMessage();\r\n        message.setQos(0);\r\n        message.setPayload(obj.toString().getBytes());\r\n        Log.d(TAG, \"publish message \" + message);\r\n\r\n        return super.publish(topic, message, null);\r\n    }\r\n\r\n    private boolean consumeGwOperationMsg(String topic, MqttMessage message) {\r\n        if (!topic.startsWith(GW_OPERATION_RES_PREFIX)) {\r\n            return false;\r\n        }\r\n        Log.d(TAG, \"got gate operation messga \" + topic + message);\r\n        String productInfo = topic.substring(GW_OPERATION_RES_PREFIX.length());\r\n        int splitIdx = productInfo.indexOf('/');\r\n        String productId = productInfo.substring(0, splitIdx);\r\n        String devName = productInfo.substring(splitIdx + 1);\r\n\r\n        TXGatewaySubdev subdev = findSubdev(productId, devName);\r\n\r\n        // this subdev is not managed by me\r\n        if (subdev == null) {\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            byte[] payload = message.getPayload();\r\n            JSONObject jsonObject = new JSONObject(new String(payload));\r\n\r\n            String type = jsonObject.getString(\"type\");\r\n            if (type.equalsIgnoreCase(\"online\")) {\r\n                String res = jsonObject.getString(\"result\");\r\n\r\n                if (res.equals(\"0\")) {\r\n                    subdev.setSubdevStatus(Status.SUBDEV_STAT_ONLINE);\r\n                }\r\n\r\n            } else if (type.equalsIgnoreCase(\"offline\")) {\r\n                String res = jsonObject.getString(\"result\");\r\n\r\n                if (res.equals(\"0\")) {\r\n                    removeSubdev(subdev);\r\n                }\r\n            }\r\n\r\n        }catch (JSONException e) {\r\n\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void messageArrived(String topic, MqttMessage message) throws Exception {\r\n        Log.d(TAG, \"message received \" + topic);\r\n        if (!consumeGwOperationMsg(topic, message)) {\r\n            super.messageArrived(topic, message);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public synchronized Status connect(MqttConnectOptions options, Object userContext) {\r\n        if (mConnectStatus.equals(TXMqttConstants.ConnectStatus.kConnecting)) {\r\n            TXLog.i(TAG, \"The client is connecting. Connect return directly.\");\r\n            return Status.MQTT_CONNECT_IN_PROGRESS;\r\n        }\r\n\r\n        if (mConnectStatus.equals(TXMqttConstants.ConnectStatus.kConnected)) {\r\n            TXLog.i(TAG, \"The client is already connected. Connect return directly.\");\r\n            return Status.OK;\r\n        }\r\n\r\n        this.mConnOptions = options;\r\n        if (mConnOptions == null) {\r\n            TXLog.e(TAG, \"Connect options == null, will not connect.\");\r\n            return Status.PARAMETER_INVALID;\r\n        }\r\n\r\n        Long timestamp = System.currentTimeMillis()/1000 + 600;\r\n        String userNameStr = mUserName + \";\" + getConnectId() + \";\" + timestamp;\r\n\r\n        mConnOptions.setUserName(userNameStr);\r\n\r\n        if (mSecretKey != null && mSecretKey.length() != 0) {\r\n            try {\r\n                String passWordStr = HmacSha256.getSignature(userNameStr.getBytes(), Base64.decode(mSecretKey, Base64.DEFAULT)) + \";hmacsha256\";\r\n                mConnOptions.setPassword(passWordStr.toCharArray());\r\n            }\r\n            catch (IllegalArgumentException e) {\r\n                Log.d(TAG, \"Failed to set password\");\r\n            }\r\n        }\r\n\r\n        mConnOptions.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1);\r\n\r\n        IMqttActionListener mActionListener = new IMqttActionListener() {\r\n            @Override\r\n            public void onSuccess(IMqttToken token) {\r\n                TXLog.i(TAG, \"onSuccess!\");\r\n                setConnectingState(TXMqttConstants.ConnectStatus.kConnected);\r\n                mActionCallBack.onConnectCompleted(Status.OK, false, token.getUserContext(), \"connected to \" + mServerURI);\r\n                // If the connection is established, subscribe the gateway operation topic\r\n                String gwTopic = GW_OPERATION_RES_PREFIX + mProductId + \"/\" + mDeviceName;\r\n                int qos = TXMqttConstants.QOS1;\r\n\r\n                subscribe(gwTopic, qos, \"Subscribe GATEWAY result topic\");\r\n                Log.d(TAG, \"Connected, then subscribe the gateway result topic\");\r\n\r\n                if (mMqttLogFlag) {\r\n                    initMqttLog(TAG);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(IMqttToken token, Throwable exception) {\r\n                TXLog.e(TAG, exception, \"onFailure!\");\r\n                setConnectingState(TXMqttConstants.ConnectStatus.kConnectFailed);\r\n                mActionCallBack.onConnectCompleted(Status.ERROR, false, token.getUserContext(), exception.toString());\r\n            }\r\n        };\r\n\r\n        if (mMqttClient == null) {\r\n            try {\r\n                mPingSender = new TXAlarmPingSender(mContext);\r\n                mMqttClient = new MqttAsyncClient(mServerURI, mClientId, mMqttPersist, mPingSender);\r\n                mMqttClient.setCallback(this);\r\n                mMqttClient.setBufferOpts(super.bufferOpts);\r\n                mMqttClient.setManualAcks(false);\r\n            } catch (Exception e) {\r\n                TXLog.e(TAG, \"new MqttClient failed\", e);\r\n                setConnectingState(TXMqttConstants.ConnectStatus.kConnectFailed);\r\n                return Status.ERROR;\r\n            }\r\n        }\r\n\r\n        try {\r\n            TXLog.i(TAG, \"Start connecting to %s\", mServerURI);\r\n            setConnectingState(TXMqttConstants.ConnectStatus.kConnecting);\r\n            mMqttClient.connect(mConnOptions, userContext, mActionListener);\r\n        } catch (Exception e) {\r\n            TXLog.e(TAG, \"MqttClient connect failed\", e);\r\n            setConnectingState(TXMqttConstants.ConnectStatus.kConnectFailed);\r\n            return Status.ERROR;\r\n        }\r\n\r\n        return Status.OK;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hub-device-android/iot_core/src/main/java/com/tencent/iot/hub/device/android/core/gateway/TXGatewayConnection.java	(revision 0a79339a31be5764438e7c12d5dc21790fd30f39)
+++ hub-device-android/iot_core/src/main/java/com/tencent/iot/hub/device/android/core/gateway/TXGatewayConnection.java	(date 1619056099797)
@@ -345,6 +345,7 @@
         return super.publish(topic, message, null);
     }
 
+    @Override
     public Status concernConfig() {
         String subscribeConfigTopic = PRODUCT_CONFIG_PREFIX + mProductId + "/" + mDeviceName;
         return this.subscribe(subscribeConfigTopic, 1, "subscribe config topic");
@@ -476,9 +477,9 @@
                 mActionCallBack.onConnectCompleted(Status.OK, false, token.getUserContext(), "connected to " + mServerURI);
                 // If the connection is established, subscribe the gateway operation topic
                 String gwTopic = GW_OPERATION_RES_PREFIX + mProductId + "/" + mDeviceName;
-                int qos = TXMqttConstants.QOS1;
+                int qos = TXMqttConstants.QOS0;
 
-                subscribe(gwTopic, qos, "Subscribe GATEWAY result topic");
+//                subscribe(gwTopic, qos, "Subscribe GATEWAY result topic");
                 Log.d(TAG, "Connected, then subscribe the gateway result topic");
 
                 if (mMqttLogFlag) {
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"InspectionProjectProfileManager\">\r\n  <profile version=\"1.0\">\r\n    <option name=\"myName\" value=\"Project Default\" />\r\n    <inspection_tool class=\"JavaDoc\" enabled=\"true\" level=\"WARNING\" enabled_by_default=\"true\">\r\n      <option name=\"TOP_LEVEL_CLASS_OPTIONS\">\r\n        <value>\r\n          <option name=\"ACCESS_JAVADOC_REQUIRED_FOR\" value=\"none\" />\r\n          <option name=\"REQUIRED_TAGS\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"INNER_CLASS_OPTIONS\">\r\n        <value>\r\n          <option name=\"ACCESS_JAVADOC_REQUIRED_FOR\" value=\"none\" />\r\n          <option name=\"REQUIRED_TAGS\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"METHOD_OPTIONS\">\r\n        <value>\r\n          <option name=\"ACCESS_JAVADOC_REQUIRED_FOR\" value=\"none\" />\r\n          <option name=\"REQUIRED_TAGS\" value=\"@return@param@throws or @exception\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"FIELD_OPTIONS\">\r\n        <value>\r\n          <option name=\"ACCESS_JAVADOC_REQUIRED_FOR\" value=\"none\" />\r\n          <option name=\"REQUIRED_TAGS\" value=\"\" />\r\n        </value>\r\n      </option>\r\n      <option name=\"IGNORE_DEPRECATED\" value=\"false\" />\r\n      <option name=\"IGNORE_JAVADOC_PERIOD\" value=\"true\" />\r\n      <option name=\"IGNORE_DUPLICATED_THROWS\" value=\"false\" />\r\n      <option name=\"IGNORE_POINT_TO_ITSELF\" value=\"false\" />\r\n      <option name=\"myAdditionalJavadocTags\" value=\"videoType,videoStatus\" />\r\n    </inspection_tool>\r\n  </profile>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/inspectionProfiles/Project_Default.xml	(revision 0a79339a31be5764438e7c12d5dc21790fd30f39)
+++ .idea/inspectionProfiles/Project_Default.xml	(date 1618467608888)
@@ -30,7 +30,7 @@
       <option name="IGNORE_JAVADOC_PERIOD" value="true" />
       <option name="IGNORE_DUPLICATED_THROWS" value="false" />
       <option name="IGNORE_POINT_TO_ITSELF" value="false" />
-      <option name="myAdditionalJavadocTags" value="videoType,videoStatus" />
+      <option name="myAdditionalJavadocTags" value="videoType,videoStatus,date" />
     </inspection_tool>
   </profile>
 </component>
\ No newline at end of file
Index: app/src/main/java/com/dou361/jjdxm_ijkplayer/videomonitoring/VideoEZplayer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dou361.jjdxm_ijkplayer.videomonitoring;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.Application;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.res.Configuration;\r\nimport android.os.Bundle;\r\nimport android.os.CountDownTimer;\r\nimport android.os.PowerManager;\r\nimport android.util.Log;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.RadioButton;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.bumptech.glide.Glide;\r\nimport com.dou361.ijkplayer.bean.VideoijkBean;\r\nimport com.dou361.ijkplayer.listener.OnShowThumbnailListener;\r\nimport com.dou361.ijkplayer.widget.PlayStateParams;\r\nimport com.dou361.ijkplayer.widget.PlayerView;\r\nimport com.dou361.jjdxm_ijkplayer.R;\r\nimport com.dou361.jjdxm_ijkplayer.videomonitoring.utlis.MediaUtils;\r\nimport com.videogo.exception.BaseException;\r\nimport com.videogo.openapi.EZOpenSDK;\r\nimport com.videogo.openapi.EZPlayer;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\nimport butterknife.ButterKnife;\r\nimport butterknife.OnClick;\r\nimport okhttp3.MediaType;\r\nimport okhttp3.OkHttpClient;\r\nimport okhttp3.Request;\r\nimport okhttp3.RequestBody;\r\nimport okhttp3.Response;\r\n\r\nimport static android.content.ContentValues.TAG;\r\n\r\npublic class VideoEZplayer extends Activity implements View.OnClickListener , MyRadioGroup.OnCheckedChangeListener ,SurfaceHolder.Callback{\r\n\r\n\r\n    EZPlayer mEZPlayer1;\r\n\r\n    private int count = 0;\r\n\r\n    public String hostURL=\"http://vehicleroadcloud.faw.cn:60443/backend/appBackend/\";\r\n    private String testURL=\"ezopen://open.ys7.com/231236707/1.live\";\r\n    public CountDownTimer countDownTimer;\r\n    public VideoRequest videoRequest;\r\n    public VideoReply videoReply,videoReply2;\r\n    public String videoResponseString,mergeVideoString;//视频Post请求返回数据\r\n\r\n    private Context mContext;\r\n    private List<VideoijkBean> list;\r\n    private PowerManager.WakeLock wakeLock;\r\n    View rootView;\r\n    private Integer videoPlayingNum=5;\r\n    private MyRadioGroup videoRatioGroup;\r\n    private RadioButton buttonFront, buttonBack, buttonLeft, buttonRight, channelGodPerspective;\r\n    private HashMap<String, RadioButton> channels = new HashMap<>(5);\r\n    private ImageButton lightControllerButton;\r\n\r\n\r\n    @SuppressLint(\"InvalidWakeLockTag\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_hcplay);\r\n\r\n\r\n        Log.d(TAG, \"onCreate: EZplayer Creating\");\r\n        mEZPlayer1 = EZOpenSDK.getInstance().createPlayerWithUrl(\"https://hls01open.ys7.com/openlive/6e0b2be040a943489ef0b9bb344b96b8.hd.m3u8\");\r\n//        SurfaceView mSurfaceView1 = (SurfaceView) findViewById(R.id.surfaceview);\r\n//        SurfaceHolder mSurfaceHolder1 = mSurfaceView1.getHolder();\r\n//        Log.d(TAG, \"playViaDevSerial: 播放器绑定界面\"+mEZPlayer1.setSurfaceHold(mSurfaceHolder1));\r\n//        mSurfaceHolder1.addCallback(this);\r\n\r\n\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                Log.d(TAG, \"run: 获取相机列表\");\r\n                try {\r\n                    EZOpenSDK.getInstance().getDeviceList(1,10);\r\n//                    ezOpenSDK.getDeviceList(1,1);\r\n                } catch (BaseException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }).start();\r\n\r\n\r\n\r\n//        mEZPlayer=EZOpenSDK.getInstance().createPlayer(\"E40958484\",1);\r\n\r\n\r\n//        mSurfaceView2 = (SurfaceView) findViewById(R.id.surfaceview);\r\n//        mSurfaceHolder2 = mSurfaceView2.getHolder();\r\n//        mEZPlayer2.setSurfaceHold(mSurfaceHolder2);\r\n//        mSurfaceHolder2.addCallback(this);\r\n/*        mSurfaceView.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (count++%2 == 0){\r\n                    Log.d(TAG, \"onClick: count\"+count);\r\n                    mEZPlayer.stopRealPlay();\r\n                }else{\r\n                    mEZPlayer.startRealPlay();\r\n                }\r\n            }\r\n        });*/\r\n\r\n\r\n        this.mContext = this;\r\n//        rootView = getLayoutInflater().from(this).inflate(R.layout.activity_hcplay, null);\r\n//        setContentView(rootView);\r\n//        setContentView(R.layout.activity_main);\r\n        ButterKnife.bind(this);\r\n\r\n        lightControllerButton=(ImageButton) findViewById(R.id.light);\r\n        lightControllerButton.setOnClickListener(this);\r\n\r\n        buttonFront = (RadioButton) findViewById(R.id.front_Click);\r\n        buttonBack = (RadioButton)findViewById(R.id.back_Click);\r\n        buttonLeft = (RadioButton)findViewById(R.id.left_Click);\r\n        buttonRight = (RadioButton)findViewById(R.id.right_Click);\r\n        channelGodPerspective = (RadioButton)findViewById(R.id.god_perspective_Click);\r\n        buttonFront.setOnClickListener(this);\r\n        buttonBack.setOnClickListener(this);\r\n        buttonLeft.setOnClickListener(this);\r\n        buttonRight.setOnClickListener(this);\r\n        channelGodPerspective.setOnClickListener(this);\r\n        channels.put(\"Channel_Front\",buttonFront);\r\n        channels.put(\"Channel_Back\",buttonBack);\r\n        channels.put(\"Channel_Left\",buttonLeft);\r\n        channels.put(\"Channel_Right\",buttonRight);\r\n        channels.put(\"Channel_God_Perspective\", channelGodPerspective);\r\n//\r\n//        replyTextView=findViewById(R.id.replyTextView);\r\n//        requestTextView=findViewById(R.id.requestTextView);\r\n\r\n\r\n        /**常亮*/\r\n        PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\r\n        wakeLock = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, \"liveTAG\");\r\n        wakeLock.acquire();\r\n\r\n//        for(int i=1;i<7;i++){//for循環打開所有視頻流\r\n//            postVideoRequest(i,1);}\r\n\r\n\r\n        videoRatioGroup = (MyRadioGroup)findViewById(R.id.radiogroup);\r\n        videoRatioGroup.setOnCheckedChangeListener(new MyRadioGroup.OnCheckedChangeListener() {\r\n            @Override\r\n            public void onCheckedChanged(MyRadioGroup group, int checkedId) {\r\n\r\n                switch (checkedId){\r\n                    case R.id.left_Click:\r\n                        Log.d(TAG, \"onCheckedChanged: 左视角\");\r\n                        playVideo(3);\r\n//                        try2play(3);\r\n                        break;\r\n                    case R.id.right_Click:\r\n                        playVideo(4);\r\n//                        try2play(4);\r\n                        break;\r\n                    case R.id.front_Click:\r\n                        playVideo(1);\r\n//                        try2play(0);\r\n                        break;\r\n                    case R.id.back_Click:\r\n                        playVideo(2);\r\n//                        try2play(2);\r\n                        break;\r\n                    case R.id.god_perspective_Click:\r\n                        playVideo(5);\r\n//                        try2play(5);\r\n\r\n                        break;\r\n                    default:\r\n                        Toast defualt =Toast.makeText(VideoEZplayer.this, \"上帝\", Toast.LENGTH_SHORT);\r\n                        new ShowMyToast().showMyToast(defualt,100);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Post video request string\r\n     *\r\n     * @param videoNum    video num 视频类型\r\n     * @param serviceType service type 1表示打开，0表示关闭\r\n     * @return the string\r\n     */\r\n\r\n    public String postVideoRequest(final int videoNum, int serviceType){\r\n        videoRequest = new VideoRequest();\r\n        videoRequest.setUserId(\"6D\");\r\n        videoRequest.setVin(\"test\");\r\n        videoRequest.setVideo_type(Integer.toString(videoNum));\r\n        videoRequest.setServicetype(Integer.toString(serviceType));\r\n        final String videoRequestJson = JSON.toJSONString(videoRequest);//序列化\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                try {\r\n                    Log.d(TAG, \"postVideoRequest: \"+videoRequestJson);\r\n                    OkHttpClient videoClient=new OkHttpClient();\r\n                    Request videoRequest= new Request.Builder()\r\n                            .url(hostURL+\"videoRequest\")\r\n                            .post(RequestBody.create(MediaType.parse(\"application/json\"),videoRequestJson))\r\n                            .build();//创造HTTP请求\r\n                    //执行发送的指令\r\n                    Response videoResponse = videoClient.newCall(videoRequest).execute();\r\n                    Log.d(TAG, \"run: 到了videoResponse\");\r\n                    if(videoNum!=6){\r\n                        videoResponseString=videoResponse.body().string();\r\n                        Log.d(TAG, \"run: videoResponseString:\"+videoResponseString);\r\n                    }\r\n                    else {\r\n                        mergeVideoString = videoResponse.body().string();\r\n                        Log.d(TAG, \"run: Merge\");\r\n                    }\r\n                    Log.d(TAG, \"run: 返回结果\"+videoNum+\"路视频：\\n\"+videoResponseString+\"\\n\"+mergeVideoString);\r\n\r\n                }catch (Exception e){\r\n                    e.printStackTrace();\r\n                    Log.d(\"POST失敗\", \"onClick: \"+e.toString());\r\n                    runOnUiThread(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            Toast.makeText(VideoEZplayer.this,\"請求視頻失败！\",Toast.LENGTH_LONG).show();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }).start();\r\n        Log.d(TAG, \"run: 返回结果\"+videoNum+\"路视频：\\n\"+videoResponseString);\r\n        if (videoNum!=6){\r\n            return videoResponseString;}\r\n        else return mergeVideoString;\r\n    }\r\n\r\n\r\n\r\n    public void playVideo(int videoNum){\r\n        if(videoPlayingNum==videoNum)return;\r\n\r\n        switch (videoNum){\r\n            //E40958484 E40958558 E40958703 E40958817 右左前后序列号\r\n            case 0:\r\n                break;\r\n            case 1:\r\n                //只播原始視頻\r\n                Log.d(TAG, \"playVideo: 前视角\");\r\n//                playViaDevSerial(testURL);\r\n                playViaDevSerial(\"E40958703\");\r\n//                playViaDevSerial(\"E40958703\",mSurfaceHolder);\r\n//                mEZPlayer1.stopRealPlay();\r\n                break;\r\n            case 2:\r\n                //后视角\r\n                playViaDevSerial(\"E40958817\");\r\n//                surfaceCreated(mSurfaceHolder);\r\n                break;\r\n            case 3:\r\n                //左视角\r\n                playViaDevSerial(\"E40958558\");\r\n//                mEZPlayer1=EZOpenSDK.getInstance().createPlayer(\"E40958484\",1);\r\n//                mEZPlayer1.startRealPlay();\r\n                break;\r\n            case 4:\r\n                //右视角\r\n                playViaDevSerial(\"E40958484\");\r\n                break;\r\n            case 5:\r\n                //上帝视角\r\n                playViaDevSerial(\"231236707\");\r\n                break;\r\n            case 6:\r\n                //只有融合視頻\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        videoPlayingNum=videoNum;\r\n    }\r\n\r\n    public void playViaDevSerial(final String deviceSerial){\r\n       SurfaceView mSurfaceView1 = (SurfaceView) findViewById(R.id.surfaceview);\r\n       SurfaceHolder mSurfaceHolder1 = mSurfaceView1.getHolder();\r\n       mEZPlayer1.release();\r\n       if(testURL.equals(deviceSerial)){\r\n           mEZPlayer1=EZOpenSDK.getInstance().createPlayerWithUrl(testURL);}\r\n       else{\r\n            mEZPlayer1 = EZOpenSDK.getInstance().createPlayer(deviceSerial, 1);\r\n        }\r\n\r\n        Log.d(TAG, \"playViaDevSerial: 播放器绑定界面\"+mEZPlayer1.setSurfaceHold(mSurfaceHolder1));\r\n\r\n        mSurfaceHolder1.addCallback(this);\r\n\r\n        Log.d(TAG, \"playViaDevSerial: 播放器设备\"+deviceSerial);\r\n\r\n//        mEZPlayer1.setSurfaceHold(holder);\r\n//        mEZPlayer.setHandler(mHandler);\r\n\r\n//        holder.addCallback(this);\r\n        Log.d(TAG, \"playViaDevSerial: 播放成功？\"+mEZPlayer1.startRealPlay());\r\n    }\r\n\r\n\r\n\r\n\r\n    @OnClick({R.id.light})\r\n    public void onClick(View view) {\r\n        switch (view.getId()) {\r\n            case R.id.light:\r\n            {\r\n//                    requestTextView.setText(\"請求開燈/關燈\");\r\n            }\r\n            break;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        /**demo的内容，恢复系统其它媒体的状态*/\r\n        MediaUtils.muteAudioFocus(mContext, true);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        /**demo的内容，暂停系统其它媒体的状态*/\r\n        MediaUtils.muteAudioFocus(mContext, false);\r\n        /**demo的内容，激活设备常亮状态*/\r\n        if (wakeLock != null) {\r\n            wakeLock.acquire();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void onConfigurationChanged(Configuration newConfig) {\r\n        super.onConfigurationChanged(newConfig);\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        super.onBackPressed();\r\n        /**demo的内容，恢复设备亮度状态*/\r\n        if (wakeLock != null) {\r\n            wakeLock.release();\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onCheckedChanged(MyRadioGroup group, int checkedId) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void surfaceCreated(SurfaceHolder holder) {\r\n        Log.d(TAG, \"surfaceCreated: 播放器创建\");\r\n/*//        mSurfaceHolder = holder;\r\n//        Intent intent =  getIntent();\r\n//        mEZPlayer1=EZOpenSDK.getInstance().createPlayer(\"231236707\",1);\r\n//        mEZPlayer=EZOpenSDK.getInstance().createPlayer(\"E40958484\",1);\r\n\r\n\r\n        mEZPlayer1.setSurfaceHold(holder);\r\n//        mEZPlayer.setHandler(mHandler);\r\n        mEZPlayer1.startRealPlay();*/\r\n//        mEZPlayer1.startRealPlay();\r\n    }\r\n\r\n    @Override\r\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void surfaceDestroyed(SurfaceHolder holder) {\r\n\r\n\r\n    }\r\n}\r\n
===================================================================
--- app/src/main/java/com/dou361/jjdxm_ijkplayer/videomonitoring/VideoEZplayer.java	(revision 0a79339a31be5764438e7c12d5dc21790fd30f39)
+++ app/src/main/java/com/dou361/jjdxm_ijkplayer/videomonitoring/VideoEZplayer.java	(date 1618905081390)
@@ -51,10 +51,10 @@
 
     EZPlayer mEZPlayer1;
 
-    private int count = 0;
-
     public String hostURL="http://vehicleroadcloud.faw.cn:60443/backend/appBackend/";
-    private String testURL="ezopen://open.ys7.com/231236707/1.live";
+    private final String testURL=
+//            "rtmp://150.158.176.170:1935/live/fushion";//张浩本地上帝视角
+                "ezopen://open.ys7.com/231236707/1.live";//实验室摄像头
     public CountDownTimer countDownTimer;
     public VideoRequest videoRequest;
     public VideoReply videoReply,videoReply2;
@@ -251,13 +251,17 @@
         Log.d(TAG, "run: 返回结果"+videoNum+"路视频：\n"+videoResponseString);
         if (videoNum!=6){
             return videoResponseString;}
-        else return mergeVideoString;
+        else {
+            return mergeVideoString;
+        }
     }
 
 
 
     public void playVideo(int videoNum){
-        if(videoPlayingNum==videoNum)return;
+        if(videoPlayingNum==videoNum) {
+            return;
+        }
 
         switch (videoNum){
             //E40958484 E40958558 E40958703 E40958817 右左前后序列号
@@ -288,7 +292,7 @@
                 break;
             case 5:
                 //上帝视角
-                playViaDevSerial("231236707");
+                playViaDevSerial(testURL);
                 break;
             case 6:
                 //只有融合視頻
