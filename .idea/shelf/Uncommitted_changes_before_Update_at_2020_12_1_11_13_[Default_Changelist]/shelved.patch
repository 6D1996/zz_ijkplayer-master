Index: iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXOTAListener.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXOTAListener.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXOTAListener.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,41 +0,0 @@
-// ITXMqttListener.aidl
-package com.tencent.iot.hub.device.android.service;
-
-import com.tencent.iot.hub.device.android.service.TXMqttMessage;
-import com.tencent.iot.hub.device.android.service.TXMqttToken;
-
-interface ITXOTAListener {
-
-    /**
-     * 上报固件版本回调
-     *
-     * @param resultCode  上报结果码；0：成功；其它：失败
-     * @param version  版本；
-     * @param resultMsg  上报结果码描述
-     */
-    void onReportFirmwareVersion(int resultCode, String version, String resultMsg);
-
-    /**
-    * OTA升级包下载进度回调
-    *
-    * @param percent  下载进度（0 ~ 100）;
-    * @param version  版本；
-    */
-    void onDownloadProgress(int percent, String version);
-
-    /**
-    * OTA升级包下载完成回调
-    * @param outputFile  已下载完成的升级包文件名（包含全路径）；
-    * @param version  版本；
-    */
-    void onDownloadCompleted(String outputFile, String version);
-
-    /**
-    * OTA升级包下载失败回调
-    *
-    * @param errCode  失败错误码; -1: 下载超时; -2:文件不存在；-3:签名过期；-4:校验错误；
-    * @param version  版本；
-    */
-    void onDownloadFailure(int errCode, String version);
-
-}
Index: iot_service/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/AndroidManifest.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/AndroidManifest.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,10 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-
-    package="com.tencent.iot.hub.device.android.service">
-
-    <application android:allowBackup="true" android:label="@string/app_name"
-        android:supportsRtl="true">
-
-    </application>
-
-</manifest>
Index: iot_core/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/proguard-rules.pro	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/proguard-rules.pro	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,25 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in E:\android_sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
-
-# Uncomment this to preserve the line number information for
-# debugging stack traces.
-#-keepattributes SourceFile,LineNumberTable
-
-# If you keep the line number information, uncomment this to
-# hide the original source file name.
-#-renamesourcefileattribute SourceFile
Index: iot_core/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/AndroidManifest.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/AndroidManifest.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,17 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-
-    package="com.tencent.iot.hub.device.android.core">
-
-    <application android:allowBackup="true" android:label="@string/app_name"
-        android:supportsRtl="true">
-
-    </application>
-
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
-    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.WAKE_LOCK" />
-
-</manifest>
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/shadow/DeviceProperty.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/shadow/DeviceProperty.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/shadow/DeviceProperty.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,46 +0,0 @@
-package com.tencent.iot.hub.device.android.core.shadow;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import com.tencent.iot.hub.device.java.core.shadow.TXShadowConstants;
-
-/**
- * 设备属性信息
- */
-public class DeviceProperty extends com.tencent.iot.hub.device.java.core.shadow.DeviceProperty implements Parcelable {
-
-    public static final Creator<DeviceProperty> CREATOR = new Creator<DeviceProperty>() {
-        @Override
-        public DeviceProperty createFromParcel(Parcel in) {
-            return new DeviceProperty(in);
-        }
-
-        @Override
-        public DeviceProperty[] newArray(int size) {
-            return new DeviceProperty[size];
-        }
-    };
-
-    public DeviceProperty() {
-    }
-
-    protected DeviceProperty(Parcel in) {
-        // 注意，此处的读值顺序应与writeToParcel()方法中一致
-        mKey = in.readString();
-        mData = in.readString();
-        mDataType = TXShadowConstants.JSONDataType.valueOf(TXShadowConstants.JSONDataType.class, in.readString());
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel out, int flag) {
-        out.writeString(mKey);
-        out.writeString(mData.toString());
-        out.writeString(mDataType.name());
-    }
-}
Index: iot_service/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/.gitignore	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/.gitignore	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,1 +0,0 @@
-/build
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/HmacSha1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/HmacSha1.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/HmacSha1.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,50 +0,0 @@
-package com.tencent.iot.hub.device.android.core.util;
-
-import javax.crypto.Mac;
-import javax.crypto.spec.SecretKeySpec;
-
-public class HmacSha1 {
-
-    private static final String HMAC_SHA1= "HmacSHA1";
-
-    /**
-     * 生成签名数据
-     *
-     * @param data 待加密的数据
-     * @param key  加密使用的key
-     * @return 生成16进制编码的字符串
-     */
-    public static String getSignature(byte[] data, byte[] key)  {
-        try {
-            SecretKeySpec signingKey = new SecretKeySpec(key, HMAC_SHA1);
-            Mac mac = Mac.getInstance(HMAC_SHA1);
-            mac.init(signingKey);
-
-            byte[] rawHmac = mac.doFinal(data);
-
-            return bytesToHexString(rawHmac);
-        }catch (Exception e) {
-            e.printStackTrace();
-        }
-
-        return null;
-    }
-
-    /**
-     * byte[]数组转换为16进制的字符串
-     *
-     * @param bytes 要转换的字节数组
-     * @return 转换后的结果
-     */
-    private static String bytesToHexString(byte[] bytes) {
-        StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < bytes.length; i++) {
-            String hex = Integer.toHexString(0xFF & bytes[i]);
-            if (hex.length() == 1) {
-                sb.append('0');
-            }
-            sb.append(hex);
-        }
-        return sb.toString();
-    }
-}
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/mqtt/TXMqttConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/mqtt/TXMqttConnection.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/mqtt/TXMqttConnection.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,509 +0,0 @@
-package com.tencent.iot.hub.device.android.core.mqtt;
-
-import android.content.Context;
-import android.util.Base64;
-import android.util.Log;
-
-import com.tencent.iot.hub.device.android.core.log.TXMqttLog;
-import com.tencent.iot.hub.device.android.core.log.TXMqttLogCallBack;
-import com.tencent.iot.hub.device.android.core.log.TXMqttLogConstants;
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-import com.tencent.iot.hub.device.java.core.common.Status;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants;
-import com.tencent.iot.hub.device.java.core.mqtt.TXOTACallBack;
-import com.tencent.iot.hub.device.java.core.mqtt.TXOTAConstansts;
-import com.tencent.iot.hub.device.java.core.mqtt.TXOTAImpl;
-import com.tencent.iot.hub.device.java.core.util.HmacSha256;
-
-import org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions;
-import org.eclipse.paho.client.mqttv3.IMqttActionListener;
-import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
-import org.eclipse.paho.client.mqttv3.IMqttToken;
-import org.eclipse.paho.client.mqttv3.MqttAsyncClient;
-import org.eclipse.paho.client.mqttv3.MqttCallbackExtended;
-import org.eclipse.paho.client.mqttv3.MqttClientPersistence;
-import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
-import org.eclipse.paho.client.mqttv3.MqttException;
-import org.eclipse.paho.client.mqttv3.MqttMessage;
-import org.eclipse.paho.client.mqttv3.internal.wire.MqttSuback;
-import org.eclipse.paho.client.mqttv3.internal.wire.MqttWireMessage;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
-import static com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants.MQTT_SDK_VER;
-
-
-public class TXMqttConnection extends com.tencent.iot.hub.device.java.core.mqtt.TXMqttConnection implements MqttCallbackExtended {
-
-    public static final String TAG = "TXMQTT_" + MQTT_SDK_VER;
-
-    protected Context mContext;
-    protected TXAlarmPingSender mPingSender = null;
-
-    private static int INVALID_MESSAGE_ID = -1;
-
-    protected boolean mMqttLogFlag;
-    public TXMqttLogCallBack mMqttLogCallBack = null;
-    private TXMqttLog mMqttLog = null;
-
-    /**
-     * 断连状态下buffer缓冲区，当连接重新建立成功后自动将buffer中数据写出
-     */
-    protected DisconnectedBufferOptions bufferOpts = null;
-
-    protected volatile TXMqttConstants.ConnectStatus mConnectStatus = TXMqttConstants.ConnectStatus.kConnectIdle;
-
-    /**
-     * @param context    用户上下文（这个参数在回调函数时透传给用户）
-     * @param productID  产品名
-     * @param deviceName 设备名，唯一
-	 * @param secretKey  密钥
-     * @param callBack   连接、消息发布、消息订阅回调接口
-     */
-    public TXMqttConnection(Context context, String productID, String deviceName, String secretKey, TXMqttActionCallBack callBack) {
-        this(context, productID, deviceName, secretKey, null, callBack);
-    }
-
-    /**
-     * @param context    用户上下文（这个参数在回调函数时透传给用户）
-     * @param productID  产品名
-     * @param deviceName 设备名，唯一
-	 * @param secretKey  密钥
-     * @param bufferOpts 发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用
-     * @param callBack   连接、消息发布、消息订阅回调接口
-     */
-    public TXMqttConnection(Context context, String productID, String deviceName, String secretKey, DisconnectedBufferOptions bufferOpts, TXMqttActionCallBack callBack) {
-        this(context, productID, deviceName, secretKey, bufferOpts, null, callBack);
-    }
-
-    /**
-     * 使用腾讯云物联网通信默认地址 "${ProductId}.iotcloud.tencentdevices.com:8883"  https://cloud.tencent.com/document/product/634/32546
-     * @param context           用户上下文（这个参数在回调函数时透传给用户）
-     * @param productID         产品名
-     * @param deviceName        设备名，唯一
-	 * @param secretKey         密钥
-     * @param bufferOpts        发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用
-     * @param clientPersistence 消息永久存储
-     * @param callBack          连接、消息发布、消息订阅回调接口
-     */
-    public TXMqttConnection(Context context, String productID, String deviceName, String secretKey,
-                            DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence, TXMqttActionCallBack callBack) {
-        this(context, null, productID, deviceName, secretKey, bufferOpts, clientPersistence, callBack);
-    }
-
-    /**
-     * @param context           用户上下文（这个参数在回调函数时透传给用户）
-     * @param serverURI         服务器URI
-     * @param productID         产品名
-     * @param deviceName        设备名，唯一
-     * @param secretKey         密钥
-     * @param bufferOpts        发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用
-     * @param clientPersistence 消息永久存储
-     * @param callBack          连接、消息发布、消息订阅回调接口
-     */
-    public TXMqttConnection(Context context, String serverURI, String productID, String deviceName, String secretKey,
-                            DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence,TXMqttActionCallBack callBack) {
-        this(context, serverURI, productID, deviceName, secretKey, bufferOpts, clientPersistence, false, null, callBack);
-    }
-
-    /**
-     * @param context           用户上下文（这个参数在回调函数时透传给用户）
-     * @param serverURI         服务器URI
-     * @param productID         产品名
-     * @param deviceName        设备名，唯一
-	 * @param secretKey         密钥
-     * @param bufferOpts        发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用
-     * @param clientPersistence 消息永久存储
-     * @param logCallBack       日子上传回调接口
-     * @param callBack          连接、消息发布、消息订阅回调接口
-     */
-    public TXMqttConnection(Context context, String serverURI, String productID, String deviceName, String secretKey,
-                            DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence, TXMqttLogCallBack logCallBack,TXMqttActionCallBack callBack) {
-        this(context, serverURI, productID, deviceName, secretKey, bufferOpts, clientPersistence, true, logCallBack, callBack);
-    }
-
-    /**
-     * @param context           用户上下文（这个参数在回调函数时透传给用户）
-     * @param serverURI         服务器URI
-     * @param productID         产品名
-     * @param deviceName        设备名，唯一
-     * @param secretKey         密钥
-     * @param bufferOpts        发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用
-     * @param clientPersistence 消息永久存储
-     * @param callBack          连接、消息发布、消息订阅回调接口
-     */
-    public TXMqttConnection(Context context, String serverURI, String productID, String deviceName, String secretKey,DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence, Boolean mqttLogFlag, TXMqttLogCallBack logCallBack, TXMqttActionCallBack callBack) {
-        super(serverURI, productID, deviceName, secretKey, bufferOpts, clientPersistence, callBack);
-        this.mContext = context;
-        this.mMqttLogFlag = mqttLogFlag;
-        this.mMqttLogCallBack = logCallBack;
-    }
-
-    /**
-     * 连接MQTT服务器，结果通过回调函数通知。
-     *
-     * @param options     连接参数
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public synchronized Status connect(MqttConnectOptions options, Object userContext) {
-        if (mConnectStatus.equals(TXMqttConstants.ConnectStatus.kConnecting)) {
-            TXLog.i(TAG, "The client is connecting. Connect return directly.");
-            return Status.MQTT_CONNECT_IN_PROGRESS;
-        }
-
-        if (mConnectStatus.equals(TXMqttConstants.ConnectStatus.kConnected)) {
-            TXLog.i(TAG, "The client is already connected. Connect return directly.");
-            return Status.OK;
-        }
-
-        this.mConnOptions = options;
-        if (mConnOptions == null) {
-            TXLog.e(TAG, "Connect options == null, will not connect.");
-            return Status.PARAMETER_INVALID;
-        }
-
-        Long timestamp;
-        if (options.isAutomaticReconnect()) {
-            timestamp = (long) Integer.MAX_VALUE;
-        } else {
-            timestamp = System.currentTimeMillis()/1000 + 600;
-        }
-        String userNameStr = mUserName + ";" + getConnectId() + ";" + timestamp;
-
-        mConnOptions.setUserName(userNameStr);
-
-        if (mSecretKey != null && mSecretKey.length() != 0) {
-            try {
-                String passWordStr = HmacSha256.getSignature(userNameStr.getBytes(), Base64.decode(mSecretKey, Base64.DEFAULT)) + ";hmacsha256";
-                mConnOptions.setPassword(passWordStr.toCharArray());
-            }
-            catch (IllegalArgumentException e) {
-                Log.d(TAG, "Failed to set password");
-            }
-        }
-
-        mConnOptions.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1);
-
-        IMqttActionListener mActionListener = new IMqttActionListener() {
-            @Override
-            public void onSuccess(IMqttToken token) {
-                TXLog.i(TAG, "onSuccess!");
-                setConnectingState(TXMqttConstants.ConnectStatus.kConnected);
-                mActionCallBack.onConnectCompleted(Status.OK, false, token.getUserContext(), "connected to " + mServerURI);
-
-                // 连接建立后，如果需要日志，则初始化日志功能
-                if (mMqttLogFlag) {
-                    initMqttLog(TAG);
-                }
-            }
-
-            @Override
-            public void onFailure(IMqttToken token, Throwable exception) {
-                TXLog.e(TAG, exception, "onFailure!");
-                setConnectingState(TXMqttConstants.ConnectStatus.kConnectFailed);
-                mActionCallBack.onConnectCompleted(Status.ERROR, false, token.getUserContext(), exception.toString());
-            }
-        };
-
-        if (mMqttClient == null) {
-            try {
-                mPingSender = new TXAlarmPingSender(mContext);
-                mMqttClient = new MqttAsyncClient(mServerURI, mClientId, mMqttPersist, mPingSender);
-                mMqttClient.setCallback(this);
-                mMqttClient.setBufferOpts(this.bufferOpts);
-                mMqttClient.setManualAcks(false);
-            } catch (Exception e) {
-                TXLog.e(TAG, "new MqttClient failed", e);
-                setConnectingState(TXMqttConstants.ConnectStatus.kConnectFailed);
-                return Status.ERROR;
-            }
-        }
-
-        try {
-            TXLog.i(TAG, "Start connecting to %s", mServerURI);
-            setConnectingState(TXMqttConstants.ConnectStatus.kConnecting);
-            mMqttClient.connect(mConnOptions, userContext, mActionListener);
-        } catch (Exception e) {
-            TXLog.e(TAG, "MqttClient connect failed", e);
-            setConnectingState(TXMqttConstants.ConnectStatus.kConnectFailed);
-            return Status.ERROR;
-        }
-
-        return Status.OK;
-    }
-
-    /**
-     * 初始化日志上传功能
-     * @param tag
-     */
-    protected void initMqttLog(final String tag) {
-        if (mMqttLog == null) {
-            this.mMqttLog = new TXMqttLog(this);
-        }
-
-        if (Status.OK != mMqttLog.initMqttLog()){
-            TXLog.i(tag,"Init MqttLog failed!" );
-        }
-    }
-
-    /**
-     * 生成一条设备日志
-     * @param logLevel 日志级别：
-     *                 MQTT错误：TXMqttLogConstants.LEVEL_FATAL    
-     *                 错误：TXMqttLogConstants.LEVEL_ERROR
-     *                 警告：TXMqttLogConstants.LEVEL_WARN
-     *                 通知：TXMqttLogConstants.LEVEL_INFO
-     *                 调试：TXMqttLogConstants.LEVEL_DEBUG
-     * @param tag
-     * @param format
-     * @param obj
-     */
-    public void mLog(int logLevel, final String tag,final String format, final Object... obj) {
-        if( mMqttLog != null) {
-            if( !(mMqttLog.saveMqttLog(logLevel, tag, format, obj))) {
-                TXLog.w(tag, "Save %s Level Log failed!", TXMqttLog.level_str[logLevel] );
-            }
-        }
-    }
-
-    public void mLog(int logLevel, final String tag,final String msg) {
-        if( mMqttLog != null) {
-            if( !(mMqttLog.saveMqttLog(logLevel, tag, msg))) {
-                TXLog.w(tag, "Save %s Level Log failed!", TXMqttLog.level_str[logLevel] );
-            }
-        }
-    }
-
-    /**
-     * 触发一次日志上传
-     */
-    public void uploadLog() {
-        if(mMqttLog != null) {
-            mMqttLog.uploadMqttLog();
-        }
-    }
-
-    /**
-     * 订阅RRPC Topic, 结果通过回调函数通知。
-     * topic格式: $rrpc/rxd/${ProductId}/${DeviceName}/+
-     *
-     * @param qos         QOS等级(仅支持QOS=0的消息)
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status subscribeRRPCTopic(final int qos, Object userContext) {
-        String topic = String.format("$rrpc/rxd/%s/%s/+", mProductId, mDeviceName);
-        return subscribe(topic, qos, userContext);
-    }
-
-
-    private Status publishRRPCToCloud(Object userContext, String processId, Map<String, String> replyMsg) {
-        // 应答topic格式: $rrpc/txd/${ProductId}/${DeviceName}/${messageid}
-        String topic  = String.format("$rrpc/txd/%s/%s/%s", mProductId, mDeviceName, processId);
-        //TODO 通过replyMsg构建mqtt messge
-        MqttMessage message = new MqttMessage();
-        JSONObject jsonObject = new JSONObject();
-        try {
-            jsonObject.put("test-key", "test-value"); // for test
-            for (Map.Entry<String, String> entrys : replyMsg.entrySet()) {
-                jsonObject.put(entrys.getKey(), entrys.getValue());
-            }
-        } catch (JSONException e) {
-            TXLog.e(TAG, e, "pack json data failed!");
-        }
-        message.setQos(TXMqttConstants.QOS0);
-        message.setPayload(jsonObject.toString().getBytes());
-        return publish(topic, message ,userContext);
-    }
-
-
-    /**
-     * 订阅广播Topic, 结果通过回调函数通知。
-     * 广播Topic格式: $broadcast/rxd/${ProductId}/${DeviceName}
-     *
-     * @param qos         QOS等级
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status subscribeBroadcastTopic(final int qos, Object userContext) {
-        String broadCastTopic = "";
-        if ((mMqttClient != null) && (mMqttClient.isConnected())) {
-            broadCastTopic = String.format("$broadcast/rxd/%s/%s", mProductId, mDeviceName);
-            try {
-                mMqttClient.subscribe(broadCastTopic, qos ,userContext, new QcloudMqttActionListener(TXMqttConstants.SUBSCRIBE));
-            } catch (Exception e) {
-                TXLog.e(TAG, e, "subscribe topic: %s failed.", broadCastTopic);
-                mLog(TXMqttLogConstants.LEVEL_FATAL, TAG, "subscribe topic: %s failed.", broadCastTopic);
-                return Status.ERROR;
-            }
-        } else {
-            TXLog.e(TAG, "subscribe topic: %s failed, because mMqttClient not connected.", broadCastTopic);
-            mLog(TXMqttLogConstants.LEVEL_FATAL, TAG, "subscribe topic: %s failed, because mMqttClient not connected.", broadCastTopic);
-            return Status.MQTT_NO_CONN;
-        }
-        return Status.OK;
-    }
-
-    @Override
-    public void connectComplete(boolean reconnect, String serverURI) {
-        TXLog.i(TAG, "connectComplete. reconnect flag is " + reconnect);
-        setConnectingState(TXMqttConstants.ConnectStatus.kConnected);
-
-        if (!reconnect) {
-            return;
-        }
-
-        Iterator<String> it = mSubscribedTopicMap.keySet().iterator();
-        while (it.hasNext()) {
-            String topic = it.next();
-            Integer qos = mSubscribedTopicMap.get(topic);
-            try {
-                TXLog.i(TAG, "subscribe to %s...", topic);
-                mMqttClient.subscribe(topic, qos, null, new QcloudMqttActionListener(TXMqttConstants.SUBSCRIBE));
-            } catch (Exception e) {
-                TXLog.e(TAG, "subscribe to %s failed.", topic);
-                mLog(TXMqttLogConstants.LEVEL_FATAL, TAG,"subscribe to %s failed.", topic);
-            }
-        }
-
-        mActionCallBack.onConnectCompleted(Status.OK, reconnect, null, "connected to " + serverURI);
-
-        //重新连接，处理离线日志，重新获取日志级别
-        if (mMqttLogFlag) {
-            initMqttLog(TAG);
-        }
-    }
-
-    /**
-     * 收到MQTT消息
-     *
-     * @param topic   消息主题
-     * @param message 消息内容结构体
-     * @throws Exception
-     */
-    @Override
-    public void messageArrived(String topic, MqttMessage message) throws Exception {
-        if (message.getQos() > 0 && message.getId() == mLastReceivedMessageId) {
-            TXLog.e(TAG, "Received topic: %s, id: %d, message: %s, discard repeated message!!!", topic, message.getId(), message);
-            mLog(TXMqttLogConstants.LEVEL_FATAL, TAG,"Received topic: %s, id: %d, message: %s, discard repeated message!!!", topic, message.getId(), message);
-            return;
-        }
-
-        TXLog.i(TAG, "Received topic: %s, id: %d, message: %s", topic, message.getId(), message);
-
-        if (topic != null && topic.contains("rrpc/rxd")) {
-            String[] items = topic.split("/");
-            String processId = items[items.length-1];
-            //TODO：数据格式暂不确定
-            Map<String, String> replyMessage = new HashMap<>();
-            publishRRPCToCloud(null, processId, replyMessage);
-        }
-
-        mLastReceivedMessageId = message.getId();
-
-        boolean consumed = false;
-        if (mOTAImpl != null ) {
-            consumed = mOTAImpl.processMessage(topic, message);
-        }
-
-        if (mActionCallBack != null) {
-            if (!consumed) {
-                mActionCallBack.onMessageReceived(topic, message);
-            }
-        }
-
-        //判断获取日志等级
-        if (mMqttLog != null) {
-            if (topic.startsWith("$" + TXMqttLogConstants.LOG)) {
-                String jsonStr = new String(message.getPayload());
-
-                try {
-                    JSONObject jsonObj = new JSONObject(jsonStr);
-
-                    if (jsonObj.has(TXMqttLogConstants.LOG_LEVEL)) {
-                        int logLevel = jsonObj.getInt(TXMqttLogConstants.LOG_LEVEL);
-                        mMqttLog.setMqttLogLevel(logLevel);
-                        uploadLog();
-                        TXLog.d(TAG, "******Set mqttLogLevel to " + logLevel);
-                        return;
-                    }
-
-                } catch (Exception e) {
-                    e.printStackTrace();
-                }
-            }
-            TXLog.d(TAG, "******Get mqttLogLevel failed ");
-        }
-    }
-
-    /**
-     * 事件回调
-     */
-    private class QcloudMqttActionListener implements IMqttActionListener {
-        private int command;
-
-        public QcloudMqttActionListener(int command) {
-            this.command = command;
-        }
-
-        @Override
-        public void onSuccess(IMqttToken token) {
-
-            MqttWireMessage mqttWireMessage = token.getResponse();
-
-            switch (command) {
-                case TXMqttConstants.PUBLISH:
-                    mActionCallBack.onPublishCompleted(Status.OK, token, token.getUserContext(), TXMqttConstants.PUBLISH_SUCCESS);
-                    break;
-
-                case TXMqttConstants.SUBSCRIBE:
-                    int[] qos = ((MqttSuback) mqttWireMessage).getGrantedQos();
-                    if (null != qos && qos.length >= 1 && qos[0] == 128) {
-                        mActionCallBack.onSubscribeCompleted(Status.ERROR, token, token.getUserContext(), TXMqttConstants.SUBSCRIBE_FAIL);
-                    } else {
-                        mActionCallBack.onSubscribeCompleted(Status.OK, token, token.getUserContext(), TXMqttConstants.SUBSCRIBE_SUCCESS);
-
-                        if (mOTAImpl != null) {
-                            mOTAImpl.onSubscribeCompleted(Status.OK, token, token.getUserContext(), TXMqttConstants.SUBSCRIBE_SUCCESS);
-                        }
-                    }
-                    break;
-
-                case TXMqttConstants.UNSUBSCRIBE:
-                    mActionCallBack.onUnSubscribeCompleted(Status.OK, token, token.getUserContext(), TXMqttConstants.UNSUBSCRIBE_SUCCESS);
-                    break;
-
-                default:
-                    TXLog.e(TAG, "Unknown message on Success:" + token);
-                    mLog(TXMqttLogConstants.LEVEL_FATAL, TAG,"Unknown message on Success:" + token);
-                    break;
-            }
-        }
-
-        @Override
-        public void onFailure(IMqttToken token, Throwable exception) {
-            switch (command) {
-                case TXMqttConstants.PUBLISH:
-                    mActionCallBack.onPublishCompleted(Status.ERROR, token, token.getUserContext(), exception.toString());
-                    break;
-                case TXMqttConstants.SUBSCRIBE:
-                    mActionCallBack.onSubscribeCompleted(Status.ERROR, token, token.getUserContext(), exception.toString());
-                    break;
-                case TXMqttConstants.UNSUBSCRIBE:
-                    mActionCallBack.onUnSubscribeCompleted(Status.ERROR, token, token.getUserContext(), exception.toString());
-                    break;
-                default:
-                    TXLog.e(TAG, "Unknown message on onFailure:" + token);
-                    mLog(TXMqttLogConstants.LEVEL_FATAL, TAG,"Unknown message on onFailure:" + token);
-                    break;
-            }
-        }
-    }
-
-}
Index: iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttToken.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttToken.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttToken.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,107 +0,0 @@
-package com.tencent.iot.hub.device.android.service;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import org.eclipse.paho.client.mqttv3.IMqttToken;
-import org.eclipse.paho.client.mqttv3.MqttToken;
-
-import java.util.Arrays;
-
-/**
- * 该类负责序列化MqttToken相关信息
- */
-
-public class TXMqttToken implements Parcelable {
-
-    private String[] mTopics = null;
-    private volatile boolean mCompleted = false;
-    private int mMessageID = 0;
-    private int[] mGrantedQos = null;
-    private boolean mSessionPresent = false;
-
-    protected TXMqttToken(Parcel in) {
-        mTopics = in.createStringArray();
-        mCompleted = in.readByte() != 0;
-        mMessageID = in.readInt();
-        mGrantedQos = in.createIntArray();
-        mSessionPresent = in.readByte() != 0;
-    }
-
-    public TXMqttToken() {
-    }
-
-    public TXMqttToken(String[] topics, boolean mCompleted, int mMessageID, int[] mGrantedQos, boolean mSessionPresent) {
-        this.mTopics = topics;
-        this.mCompleted = mCompleted;
-        this.mMessageID = mMessageID;
-        this.mGrantedQos = mGrantedQos;
-        this.mSessionPresent = mSessionPresent;
-    }
-
-    public TXMqttToken(IMqttToken mqttToken) {
-        if (null != mqttToken.getTopics() && mqttToken.getTopics().length > 0) {
-            mTopics = new String[mqttToken.getTopics().length];
-            System.arraycopy(mqttToken.getTopics(), 0, mTopics, 0, mqttToken.getTopics().length);
-        }
-        mCompleted = mqttToken.isComplete();
-        mMessageID = mqttToken.getMessageId();
-        if (null != mqttToken.getGrantedQos() && mqttToken.getGrantedQos().length > 0) {
-            mGrantedQos = new int[mqttToken.getGrantedQos().length];
-            System.arraycopy(mqttToken.getGrantedQos(), 0, mGrantedQos, 0, mqttToken.getGrantedQos().length);
-        }
-        mSessionPresent = mqttToken.getSessionPresent();
-    }
-
-    public static final Creator<TXMqttToken> CREATOR = new Creator<TXMqttToken>() {
-        @Override
-        public TXMqttToken createFromParcel(Parcel in) {
-            return new TXMqttToken(in);
-        }
-
-        @Override
-        public TXMqttToken[] newArray(int size) {
-            return new TXMqttToken[size];
-        }
-    };
-
-    public MqttToken transToMqttToken() {
-        MqttToken mqttToken = new MqttToken("TXMqttToken");
-        mqttToken.internalTok.setTopics(mTopics);
-        mqttToken.internalTok.setMessageID(mMessageID);
-        return mqttToken;
-    }
-
-    @Override
-    public String toString() {
-        return "TXMqttToken{" +
-                "mTopics=" + Arrays.toString(mTopics) +
-                ", mCompleted=" + mCompleted +
-                ", mMessageID=" + mMessageID +
-                ", mGrantedQos=" + Arrays.toString(mGrantedQos) +
-                ", mSessionPresent=" + mSessionPresent +
-                '}';
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel parcel, int i) {
-        parcel.writeStringArray(mTopics);
-        parcel.writeByte((byte) (mCompleted ? 1 : 0));
-        parcel.writeInt(mMessageID);
-        parcel.writeIntArray(mGrantedQos);
-        parcel.writeByte((byte) (mSessionPresent ? 1 : 0));
-    }
-
-    public void readFromParcel(Parcel in) {
-        mTopics = in.createStringArray();
-        mCompleted = in.readByte() != 0;
-        mMessageID = in.readInt();
-        mGrantedQos = in.createIntArray();
-        mSessionPresent = in.readByte() != 0;
-    }
-}
Index: iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttService.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttService.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,918 +0,0 @@
-package com.tencent.iot.hub.device.android.service;
-
-import android.app.Service;
-import android.content.Context;
-import android.content.Intent;
-import android.os.IBinder;
-import android.os.RemoteException;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.tencent.iot.hub.device.android.core.mqtt.TXMqttConnection;
-import com.tencent.iot.hub.device.android.core.shadow.TXShadowConnection;
-import com.tencent.iot.hub.device.android.core.util.AsymcSslUtils;
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-import com.tencent.iot.hub.device.java.core.common.Status;
-import com.tencent.iot.hub.device.android.core.shadow.DeviceProperty;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants;
-import com.tencent.iot.hub.device.java.core.mqtt.TXOTACallBack;
-import com.tencent.iot.hub.device.java.core.mqtt.TXOTAConstansts;
-import com.tencent.iot.hub.device.java.core.shadow.TXShadowActionCallBack;
-import com.tencent.iot.hub.device.java.core.shadow.TXShadowConstants;
-
-import org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions;
-import org.eclipse.paho.client.mqttv3.IMqttToken;
-import org.eclipse.paho.client.mqttv3.MqttClientPersistence;
-import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
-import org.eclipse.paho.client.mqttv3.MqttMessage;
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.util.List;
-
-import static com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants.MQTT_SERVER_PORT_TLS;
-import static com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants.PREFIX;
-import static com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants.QCLOUD_IOT_MQTT_DIRECT_DOMAIN;
-
-/**
- * MQTT 远程服务
- * <p>
- * 如需将MQTT功能运行在独立进程中时，使用TXMqttService开启服务；
- * 不需要时，直接调用TXMqttConnection或TXShadowConnection中相关接口即可。
- */
-public class TXMqttService extends Service {
-
-    private static final String TAG = TXMqttService.class.getSimpleName();
-
-    private Context mContext = null;
-
-    /**
-     * 服务器URI
-     */
-    private String mServerURI;
-
-    /**
-     * Iot Hub控制台获取产品ID
-     */
-    private String mProductId;
-
-    /**
-     * 设备名，唯一
-     */
-    private String mDeviceName;
-
-    private String mSecretKey;
-
-    /**
-     * MQTT 连接器
-     */
-    private TXMqttConnection mMqttConnection = null;
-
-    /**
-     * shadow连接器
-     */
-    private TXShadowConnection mShadowConnection = null;
-
-    /**
-     * mqttAction回调接口
-     */
-    private TXMqttActionCallBack mMqttActionCallBack = null;
-
-    /**
-     * shadowAction回调接口
-     */
-    private TXShadowActionCallBack mShadowActionCallBack = null;
-
-    /**
-     * 客户端MqttAction监听器
-     */
-    private ITXMqttActionListener mMqttActionListener = null;
-
-    /**
-     * 客户端ShadowAction监听器
-     */
-    private ITXShadowActionListener mShadowActionListener = null;
-
-    /**
-     * 断连缓存选项
-     */
-    private DisconnectedBufferOptions mDisconnectedBufferOptions = null;
-
-    private MqttClientPersistence mClientPersistence = null;
-
-    /**
-     * MQTT
-     */
-    private ITXMqttService.Stub mMqttService = null;
-
-    /**
-     * 是否使用shadow
-     */
-    private boolean mUseShadow = false;
-
-    private boolean isInit = false;
-
-
-    private ITXOTAListener mOTAListener = null;
-    private TXOTACallBack mInternalOTACallback = new TXOTACallBack() {
-        @Override
-        public void onReportFirmwareVersion(int resultCode, String version, String resultMsg) {
-            if (mOTAListener != null) {
-                try {
-                    mOTAListener.onReportFirmwareVersion(resultCode, version, resultMsg);
-                }catch (Exception e) {
-                    e.printStackTrace();
-                }
-            }
-        }
-
-        @Override
-        public boolean onLastestFirmwareReady(String url, String md5, String version) {
-            TXLog.e(TAG, "TXMqttService onLastestFirmwareReady");
-            return false;
-        }
-
-        @Override
-        public void onDownloadProgress(int percent, String version) {
-            if (mOTAListener != null) {
-                try {
-                    mOTAListener.onDownloadProgress(percent, version);
-                }catch (Exception e) {
-                    e.printStackTrace();
-                }
-            }
-        }
-
-        @Override
-        public void onDownloadCompleted(String outputFile, String version) {
-            try {
-                mOTAListener.onDownloadCompleted(outputFile, version);
-            }catch (Exception e) {
-
-            }
-        }
-
-        @Override
-        public void onDownloadFailure(int errCode, String version) {
-            try {
-                mOTAListener.onDownloadFailure(errCode, version);
-            }catch (Exception e) {
-
-            }
-        }
-    };
-
-    @Override
-    public void onCreate() {
-        super.onCreate();
-        TXLog.d(TAG, "onCreate");
-        init();
-    }
-
-    @Override
-    public int onStartCommand(Intent intent, int flags, int startId) {
-        String intentStr = (null == intent) ? "" : intent.toString();
-        TXLog.d(TAG, "onStartCommand, intent[%s], flags[%d], startId[%d]", intentStr, flags, startId);
-        if (startId > 1 && null != mMqttActionListener) {
-            try {
-                mMqttActionListener.onServiceStartedCallback();
-            } catch (RemoteException e) {
-                TXLog.e(TAG, e, "invoke remote method[onServiceStartedCallback] failed!");
-            }
-        }
-        return START_STICKY;
-    }
-
-    @Override
-    public IBinder onBind(Intent intent) {
-        TXLog.d(TAG, "onBind");
-        return mMqttService;
-    }
-
-    @Override
-    public boolean onUnbind(Intent intent) {
-        TXLog.d(TAG, "onUnbind");
-        return super.onUnbind(intent);
-    }
-
-    @Override
-    public void onDestroy() {
-        TXLog.d(TAG, "onDestroy");
-        super.onDestroy();
-        if (mUseShadow) {
-            if (null != mShadowConnection) {
-                mShadowConnection.disConnect(null);
-            }
-        } else {
-            if (null != mMqttConnection) {
-                mMqttConnection.disConnect(null);
-            }
-        }
-
-        try {
-            mMqttActionListener.onServiceDestroyCallback();
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote method[onServiceDestroyCallback] failed!");
-        }
-
-        mMqttService = null;
-        mClientPersistence = null;
-        mDisconnectedBufferOptions = null;
-
-        mMqttConnection = null;
-        mShadowConnection = null;
-        mMqttActionListener = null;
-        mShadowActionListener = null;
-    }
-
-    /**
-     * 初始化设备信息
-     *
-     * @param mqttClientOptions
-     */
-    private void initDeviceInfo(TXMqttClientOptions mqttClientOptions) {
-        mProductId = mqttClientOptions.getProductId();
-        mDeviceName = mqttClientOptions.getDeviceName();
-        mServerURI = mqttClientOptions.getServerURI();
-        mSecretKey = mqttClientOptions.getSecretKey();
-        TXLog.d(TAG, "initDeviceInfo, productId[%s], deviceName[%s], serverURI[%s]", mProductId, mDeviceName, mServerURI);
-        isInit = true;
-    }
-
-    /**
-     * mqtt连接服务器
-     *
-     * @param options
-     * @param userContextId
-     */
-    private String connect(TXMqttConnectOptions options, long userContextId) {
-        Status status = Status.ERROR;
-        if (!isInit) {
-            TXLog.d(TAG, "device is not initialized!");
-            return status.name();
-        }
-
-        // 检查连接类型是否发生改变，若发生改变，则先关闭之前的连接
-        if (mUseShadow != options.isUseShadow()) {
-            if (mUseShadow && null != mShadowConnection
-                    && mShadowConnection.getConnectStatus() == TXMqttConstants.ConnectStatus.kConnected) {
-                mShadowConnection.disConnect(null);
-            } else if (null != mMqttConnection
-                    && mMqttConnection.getConnectStatus() == TXMqttConstants.ConnectStatus.kConnected) {
-                mMqttConnection.disConnect(null);
-            }
-        }
-
-        MqttConnectOptions connectOptions = new MqttConnectOptions();
-        connectOptions.setConnectionTimeout(options.getConnectionTimeout());
-        connectOptions.setAutomaticReconnect(options.isAutomaticReconnect());
-        connectOptions.setCleanSession(options.isCleanSession());
-        connectOptions.setKeepAliveInterval(options.getKeepAliveInterval());
-
-        if (options.isAsymcEncryption()) {
-
-            String certFile = options.getDeviceCertName();
-            String keyFile  = options.getDeviceKeyName();
-            String secretKey = options.getSecretKey();
-
-            if (secretKey != null) {
-                connectOptions.setSocketFactory(AsymcSslUtils.getSocketFactory());
-            }else {
-
-                if (certFile.startsWith("/")) {
-                    connectOptions.setSocketFactory(AsymcSslUtils.getSocketFactoryByFile(certFile, keyFile));
-                } else if (certFile.startsWith("file://")) {
-                    certFile = certFile.substring(7);
-                    keyFile = keyFile.substring(7);
-                    connectOptions.setSocketFactory(AsymcSslUtils.getSocketFactoryByFile(certFile, keyFile));
-                } else {
-                    connectOptions.setSocketFactory(AsymcSslUtils.getSocketFactoryByAssetsFile(mContext, certFile, keyFile));
-                }
-            }
-        }
-
-        mUseShadow = options.isUseShadow();
-        if (mUseShadow) {
-            if (TextUtils.isEmpty(mServerURI)) {
-                mShadowConnection = new TXShadowConnection(mContext, PREFIX + mProductId + QCLOUD_IOT_MQTT_DIRECT_DOMAIN + MQTT_SERVER_PORT_TLS, mProductId, mDeviceName, mSecretKey,
-                        mDisconnectedBufferOptions, mClientPersistence, mShadowActionCallBack);
-            } else {
-                mShadowConnection = new TXShadowConnection(mContext, mServerURI, mProductId, mDeviceName, mSecretKey,
-                        mDisconnectedBufferOptions, mClientPersistence, mShadowActionCallBack);
-            }
-            status = mShadowConnection.connect(connectOptions, null);
-        } else {
-            mMqttConnection = new TXMqttConnection(mContext, mProductId, mDeviceName, mSecretKey, mMqttActionCallBack);
-            status = mMqttConnection.connect(connectOptions, Long.valueOf(userContextId));
-        }
-        return status.name();
-    }
-
-    /**
-     * 重新连接
-     *
-     * @return
-     */
-    private String reconnect() {
-        Status status = Status.ERROR;
-        if (!isInit) {
-            TXLog.d(TAG, "device is not initialized!");
-            return status.name();
-        }
-
-        if (!mUseShadow && null != mMqttConnection) {
-            status = mMqttConnection.reconnect();
-        }
-        return status.name();
-    }
-
-    /**
-     * mqtt断连
-     */
-    private String disConnect(long timeout, long userContextId) {
-        Status status = Status.ERROR;
-        if (!isInit) {
-            TXLog.d(TAG, "device is not initialized!");
-            return status.name();
-        }
-
-        if (mUseShadow && null != mShadowConnection) {
-            status = mShadowConnection.disConnect(null);
-        } else if (null != mMqttConnection) {
-            status = mMqttConnection.disConnect(timeout, Long.valueOf(userContextId));
-        }
-        return status.name();
-    }
-
-    private String publish(String topic, TXMqttMessage txMessage, long userContext) {
-        Status status = Status.ERROR;
-        if (!isInit) {
-            TXLog.d(TAG, "device is not initialized!");
-            return status.name();
-        }
-
-        MqttMessage message = txMessage.transToMqttMessage();
-        if (mUseShadow && null != mShadowConnection) {
-            status = mShadowConnection.getMqttConnection().publish(topic, message, userContext);
-        } else if (null != mMqttConnection) {
-            status = mMqttConnection.publish(topic, message, userContext);
-        }
-        return status.name();
-    }
-
-    /**
-     * 初始化OTA功能。
-     *
-     * @param storagePath OTA升级包存储路径(调用者必确保路径已存在，并且具有写权限)
-     * @param otaListener OTA事件回调
-     */
-    public void initOTA(String storagePath, ITXOTAListener otaListener) {
-        if (!isInit) {
-            TXLog.d(TAG, "device is not initialized!");
-            return;
-        }
-        
-        mOTAListener = otaListener;
-
-        if (mUseShadow && null != mShadowConnection) {
-            mShadowConnection.getMqttConnection().initOTA(storagePath, mInternalOTACallback);
-        } else if (null != mMqttConnection) {
-            mMqttConnection.initOTA(storagePath, mInternalOTACallback);
-        }
-    }
-
-    /**
-     * 上报设备当前版本信息到后台服务器。
-     *
-     * @param currentFirmwareVersion 设备当前版本信息
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportCurrentFirmwareVersion(String currentFirmwareVersion) {
-        Status status = Status.ERROR;
-
-        if (mUseShadow && null != mShadowConnection) {
-            status = mShadowConnection.getMqttConnection().reportCurrentFirmwareVersion(currentFirmwareVersion);
-        } else if (null != mMqttConnection) {
-            status = mMqttConnection.reportCurrentFirmwareVersion(currentFirmwareVersion);
-        }
-        return status;
-    }
-
-    /**
-     * 上报设备升级状态到后台服务器。
-     *
-     * @param state
-     * @param resultCode
-     * @param resultMsg
-     * @param version
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportOTAState(String state, int resultCode, String resultMsg, String version) {
-        Status status = Status.ERROR;
-
-
-        if (mUseShadow && null != mShadowConnection) {
-            status = mShadowConnection.getMqttConnection().reportOTAState(TXOTAConstansts.ReportState.valueOf(TXOTAConstansts.ReportState.class, state), resultCode, resultMsg, version);
-        } else if (null != mMqttConnection) {
-            status = mMqttConnection.reportOTAState(TXOTAConstansts.ReportState.valueOf(TXOTAConstansts.ReportState.class, state), resultCode, resultMsg, version);
-        }
-        return status;
-    }
-
-    private String subscribeBroadcastTopic(int qos, long userContextId) {
-        Status status = Status.ERROR;
-        if (!isInit) {
-            TXLog.d(TAG, "device is not initialized!");
-            return status.name();
-        }
-        if (mUseShadow && null != mShadowConnection) {
-            status = mShadowConnection.getMqttConnection().subscribeBroadcastTopic(qos, Long.valueOf(userContextId));
-        } else if (null != mMqttConnection) {
-            status = mMqttConnection.subscribeBroadcastTopic(qos, Long.valueOf(userContextId));
-        }
-        return status.name();
-    }
-
-    private String subscribe(String topic, int qos, long userContextId) {
-        Status status = Status.ERROR;
-        if (!isInit) {
-            TXLog.d(TAG, "device is not initialized!");
-            return status.name();
-        }
-
-        if (mUseShadow && null != mShadowConnection) {
-            status = mShadowConnection.getMqttConnection().subscribe(topic, qos, Long.valueOf(userContextId));
-        } else if (null != mMqttConnection) {
-            status = mMqttConnection.subscribe(topic, qos, Long.valueOf(userContextId));
-        }
-
-        return status.name();
-    }
-
-    private String unSubscribe(String topic, long userContextId) {
-        Status status = Status.ERROR;
-        if (!isInit) {
-            TXLog.d(TAG, "device is not initialized!");
-            return status.name();
-        }
-
-        if (mUseShadow && null != mShadowConnection) {
-            status = mShadowConnection.getMqttConnection().unSubscribe(topic, Long.valueOf(userContextId));
-        } else if (null != mMqttConnection) {
-            status = mMqttConnection.unSubscribe(topic, Long.valueOf(userContextId));
-        }
-
-        return status.name();
-    }
-
-    private String subscribeRRPCTopic(int qos, long userContextId) {
-        Status status = Status.ERROR;
-        if (!isInit) {
-            TXLog.d(TAG, "device is not initialized!");
-            return status.name();
-        }
-
-        if (mUseShadow && null != mShadowConnection) {
-            status = mShadowConnection.getMqttConnection().subscribeRRPCTopic(qos, Long.valueOf(userContextId));
-        } else if (null != mMqttConnection) {
-            status = mMqttConnection.subscribeRRPCTopic(qos, Long.valueOf(userContextId));
-        }
-
-        return status.name();
-    }
-
-    private void handlePublishCompleted(Status status, IMqttToken token, Object userContext, String errMsg) {
-        if (null == userContext) {
-            return;
-        }
-
-        if (mUseShadow) {
-            if (null == mShadowActionListener) {
-                TXLog.d(TAG, "ITXShadowActionListener instance is null!");
-                return;
-            }
-
-            try {
-                if (userContext instanceof Long) {
-                    mShadowActionListener.onPublishCompleted(status.name(), new TXMqttToken(token),
-                            ((Long) userContext).longValue(), errMsg);
-                }
-            } catch (RemoteException e) {
-                TXLog.e(TAG, e, "invoke remote method[onPublishCompleted] failed!");
-            } catch (Exception ex) {
-                TXLog.e(TAG, ex, "invoke remote method[onPublishCompleted] failed!");
-            }
-
-            return;
-        }
-
-        if (null == mMqttActionListener) {
-            TXLog.d(TAG, "ITXMqttActionListener instance is null!");
-            return;
-        }
-
-        try {
-            if (userContext instanceof Long) {
-                mMqttActionListener.onPublishCompleted(status.name(), new TXMqttToken(token), ((Long) userContext).longValue(), errMsg);
-            }
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote method[onPublishCompleted] failed!");
-        } catch (Exception ex) {
-            TXLog.e(TAG, ex, "invoke remote method[onPublishCompleted] failed!");
-        }
-    }
-
-    private void handleSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {
-        if (null == userContext) {
-            return;
-        }
-
-        if (mUseShadow) {
-            if (null == mShadowActionListener) {
-                TXLog.d(TAG, "ITXShadowActionListener instance is null!");
-                return;
-            }
-
-            try {
-                if (userContext instanceof Long) {
-                    mShadowActionListener.onSubscribeCompleted(status.name(), new TXMqttToken(asyncActionToken), ((Long) userContext).longValue(), errMsg);
-                }
-            } catch (RemoteException e) {
-                TXLog.e(TAG, e, "invoke remote method[onSubscribeCompleted] failed!");
-            } catch (Exception ex) {
-                TXLog.e(TAG, ex, "invoke remote method[onSubscribeCompleted] failed!");
-            }
-
-            return;
-        }
-
-        if (null == mMqttActionListener) {
-            TXLog.d(TAG, "ITXMqttActionListener instance is null!");
-            return;
-        }
-
-        try {
-            if (userContext instanceof Long) {
-                mMqttActionListener.onSubscribeCompleted(status.name(), new TXMqttToken(asyncActionToken),
-                        ((Long) userContext).longValue(), errMsg);
-            }
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote method[onSubscribeCompleted] failed!");
-        } catch (Exception ex) {
-            TXLog.e(TAG, ex, "invoke remote method[onSubscribeCompleted] failed!");
-        }
-    }
-
-    private void handleUnSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {
-        if (null == userContext) {
-            return;
-        }
-
-        if (mUseShadow) {
-            if (null == mShadowActionListener) {
-                TXLog.d(TAG, "ITXShadowActionListener instance is null!");
-                return;
-            }
-
-            try {
-                if (userContext instanceof Long) {
-                    mShadowActionListener.onUnSubscribeCompleted(status.name(), new TXMqttToken(asyncActionToken), ((Long) userContext).longValue(), errMsg);
-                }
-            } catch (RemoteException e) {
-                TXLog.e(TAG, e, "invoke remote method[onUnSubscribeCompleted] failed!");
-            } catch (Exception ex) {
-                TXLog.e(TAG, ex, "invoke remote method[onUnSubscribeCompleted] failed!");
-            }
-
-            return;
-        }
-
-        if (null == mMqttActionListener) {
-            TXLog.d(TAG, "ITXMqttActionListener instance is null!");
-            return;
-        }
-
-        try {
-            if (userContext instanceof Long) {
-                mMqttActionListener.onUnSubscribeCompleted(status.name(), new TXMqttToken(asyncActionToken), ((Long) userContext).longValue(), errMsg);
-            }
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote method[onUnSubscribeCompleted] failed!");
-        } catch (Exception ex) {
-            TXLog.e(TAG, ex, "invoke remote method[onUnSubscribeCompleted] failed!");
-        }
-    }
-
-    private void handleMessageReceived(String topic, MqttMessage message) {
-        if (mUseShadow) {
-            if (null == mShadowActionListener) {
-                TXLog.d(TAG, "ITXShadowActionListener instance is null!");
-                return;
-            }
-
-            try {
-                mShadowActionListener.onMessageReceived(topic, new TXMqttMessage(message));
-            } catch (RemoteException e) {
-                TXLog.e(TAG, e, "invoke remote method[onUnSubscribeCompleted] failed!");
-            } catch (Exception ex) {
-                TXLog.e(TAG, ex, "invoke remote method[onUnSubscribeCompleted] failed!");
-            }
-
-            return;
-        }
-
-
-        if (null == mMqttActionListener) {
-            TXLog.d(TAG, "ITXMqttActionListener instance is null!");
-            return;
-        }
-
-        try {
-            mMqttActionListener.onMessageReceived(topic, new TXMqttMessage(message));
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote method[onMessageReceived] failed!");
-        }
-    }
-
-    private void init() {
-        mContext = this.getApplicationContext();
-
-        mMqttActionCallBack = new TXMqttActionCallBack() {
-            @Override
-            public void onConnectCompleted(Status status, boolean reconnect, Object userContext, String msg) {
-                if (null == mMqttActionListener) {
-                    TXLog.d(TAG, "ITXMqttActionListener instance is null!");
-                    return;
-                }
-
-                try {
-                    if (userContext instanceof Long) {
-                        mMqttActionListener.onConnectCompleted(status.name(), reconnect, ((Long) userContext).longValue(), msg);
-                    }
-                } catch (RemoteException e) {
-                    TXLog.e(TAG, e, "invoke remote method[onConnectCompleted] failed!");
-                }
-            }
-
-            @Override
-            public void onConnectionLost(Throwable cause) {
-                if (null == mMqttActionListener) {
-                    TXLog.d(TAG, "ITXMqttActionListener instance is null!");
-                    return;
-                }
-
-                try {
-                    mMqttActionListener.onConnectionLost(cause.getMessage());
-                } catch (RemoteException e) {
-                    TXLog.e(TAG, e, "invoke remote method[onConnectionLost] failed!");
-                }
-            }
-
-            @Override
-            public void onDisconnectCompleted(Status status, Object userContext, String msg) {
-                if (null == mMqttActionListener) {
-                    TXLog.d(TAG, "ITXMqttActionListener instance is null!");
-                    return;
-                }
-
-                try {
-                    if (userContext instanceof Long) {
-                        mMqttActionListener.onDisconnectCompleted(status.name(), ((Long) userContext).longValue(), msg);
-                    }
-                } catch (RemoteException e) {
-                    TXLog.e(TAG, e, "invoke remote method[onDisconnectCompleted] failed!");
-                }
-            }
-
-            @Override
-            public void onPublishCompleted(Status status, IMqttToken token, Object userContext, String errMsg) {
-                TXMqttService.this.handlePublishCompleted(status, token, userContext, errMsg);
-            }
-
-            @Override
-            public void onSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {
-                TXMqttService.this.handleSubscribeCompleted(status, asyncActionToken, userContext, errMsg);
-            }
-
-            @Override
-            public void onUnSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {
-                TXMqttService.this.handleUnSubscribeCompleted(status, asyncActionToken, userContext, errMsg);
-            }
-
-            @Override
-            public void onMessageReceived(String topic, MqttMessage message) {
-                TXMqttService.this.handleMessageReceived(topic, message);
-            }
-        };
-
-        mShadowActionCallBack = new TXShadowActionCallBack() {
-            @Override
-            public void onRequestCallback(String type, int result, String document) {
-                if (null == mShadowActionListener) {
-                    TXLog.d(TAG, "ITXShadowActionListener instance is null!");
-                    return;
-                }
-
-                try {
-                    mShadowActionListener.onRequestCallback(type, result, document);
-                } catch (RemoteException e) {
-                    TXLog.e(TAG, e, "invoke remote method[onRequestCallback] failed!");
-                }
-            }
-
-            @Override
-            public void onDevicePropertyCallback(String propertyJSONDocument, List<? extends com.tencent.iot.hub.device.java.core.shadow.DeviceProperty> devicePropertyList) {
-                if (null == mShadowActionListener) {
-                    TXLog.d(TAG, "ITXShadowActionListener instance is null!");
-                    return;
-                }
-
-                try {
-                    mShadowActionListener.onDevicePropertyCallback(propertyJSONDocument, (List<DeviceProperty>) devicePropertyList);
-                } catch (RemoteException e) {
-                    TXLog.e(TAG, e, "invoke remote method[onRequestCallback] failed!");
-                }
-            }
-
-            @Override
-            public void onPublishCompleted(Status status, IMqttToken token, Object userContext, String errMsg) {
-                TXMqttService.this.handlePublishCompleted(status, token, userContext, errMsg);
-            }
-
-            @Override
-            public void onSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {
-                TXMqttService.this.handleSubscribeCompleted(status, asyncActionToken, userContext, errMsg);
-            }
-
-            @Override
-            public void onUnSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {
-                TXMqttService.this.handleUnSubscribeCompleted(status, asyncActionToken, userContext, errMsg);
-            }
-
-            @Override
-            public void onMessageReceived(String topic, MqttMessage message) {
-                TXMqttService.this.handleMessageReceived(topic, message);
-            }
-        };
-
-        mMqttService = new ITXMqttService.Stub() {
-            @Override
-            public void registerMqttActionListener(ITXMqttActionListener mqttActionListener) throws RemoteException {
-                mMqttActionListener = mqttActionListener;
-            }
-
-            @Override
-            public void registerShadowActionListener(ITXShadowActionListener shadowActionListener) throws RemoteException {
-                mShadowActionListener = shadowActionListener;
-            }
-
-            /**
-             * 初始化设备信息
-             *
-             * @param mqttClientOptions   mqtt客户端选项
-             * @throws RemoteException
-             */
-            @Override
-            public void initDeviceInfo(TXMqttClientOptions mqttClientOptions) throws RemoteException {
-                TXMqttService.this.initDeviceInfo(mqttClientOptions);
-            }
-
-            @Override
-            public void setBufferOpts(TXDisconnectedBufferOptions bufferOptions) throws RemoteException {
-                if (mUseShadow && null != mShadowConnection) {
-                    mShadowConnection.setBufferOpts(bufferOptions.transToDisconnectedBufferOptions());
-                } else if (null != mMqttConnection) {
-                    mMqttConnection.setBufferOpts(bufferOptions.transToDisconnectedBufferOptions());
-                }
-            }
-
-            @Override
-            public String connect(TXMqttConnectOptions options, long userContextId) throws RemoteException {
-                return TXMqttService.this.connect(options, userContextId);
-            }
-
-            @Override
-            public String reconnect() throws RemoteException {
-                return TXMqttService.this.reconnect();
-            }
-
-            @Override
-            public String disConnect(long timeout, long userContextId) throws RemoteException {
-                return TXMqttService.this.disConnect(timeout, userContextId);
-            }
-
-            @Override
-            public String subscribeBroadcastTopic(int qos, long userContextId) throws RemoteException {
-                return TXMqttService.this.subscribeBroadcastTopic(qos, userContextId);
-            }
-
-            @Override
-            public String subscribe(String topic, int qos, long userContextId) throws RemoteException {
-                return TXMqttService.this.subscribe(topic, qos, userContextId);
-            }
-
-            @Override
-            public String unSubscribe(String topic, long userContextId) throws RemoteException {
-                return TXMqttService.this.unSubscribe(topic, userContextId);
-            }
-
-            @Override
-            public String publish(String topic, TXMqttMessage message, long userContextId) throws RemoteException {
-                return TXMqttService.this.publish(topic, message, userContextId);
-            }
-
-            @Override
-            public String subscribeRRPCTopic(int qos, long userContextId) throws RemoteException {
-                return TXMqttService.this.subscribeRRPCTopic(qos, userContextId);
-            }
-
-            @Override
-            public String getConnectStatus() throws RemoteException {
-                return mShadowConnection.getConnectStatus().name();
-            }
-
-            @Override
-            public String updateShadow(List<DeviceProperty> devicePropertyList, long userContextId) throws RemoteException {
-                for (DeviceProperty deviceProperty : devicePropertyList) {
-                    TXLog.d(TAG, "updateShadow, deviceProperty[%s]", deviceProperty.toString());
-
-                    if (deviceProperty.mDataType == TXShadowConstants.JSONDataType.OBJECT) {
-                        try {
-                            deviceProperty.mData = new JSONObject((String) deviceProperty.mData);
-                        }catch (Exception e) {
-                            e.printStackTrace();
-                        }
-                    }else if (deviceProperty.mDataType == TXShadowConstants.JSONDataType.ARRAY) {
-                        try {
-                            deviceProperty.mData = new JSONArray((String) deviceProperty.mData);
-                        }catch (Exception e) {
-                            e.printStackTrace();
-                        }
-                    }
-                }
-
-                Status status = Status.ERROR;
-                if (mUseShadow && null != mShadowConnection) {
-                    status = mShadowConnection.update(devicePropertyList, Long.valueOf(userContextId));
-                }
-                return status.name();
-            }
-
-            @Override
-            public String getShadow(long userContextId) throws RemoteException {
-                Status status = Status.ERROR;
-                if (mUseShadow && null != mShadowConnection) {
-                    status = mShadowConnection.get(Long.valueOf(userContextId));
-                }
-                return status.name();
-            }
-
-            @Override
-            public void registerDeviceProperty(DeviceProperty deviceProperty) throws RemoteException {
-                if (mUseShadow && null != mShadowConnection) {
-                    mShadowConnection.registerProperty(deviceProperty);
-                }
-            }
-
-            @Override
-            public void unRegisterDeviceProperty(DeviceProperty deviceProperty) throws RemoteException {
-                if (mUseShadow && null != mShadowConnection) {
-                    mShadowConnection.unRegisterProperty(deviceProperty);
-                }
-            }
-
-            @Override
-            public String reportNullDesiredInfo(String reportJsonDoc) throws RemoteException {
-                Status status = Status.ERROR;
-                if (mUseShadow && null != mShadowConnection) {
-                    if (TextUtils.isEmpty(reportJsonDoc)) {
-                        status = mShadowConnection.reportNullDesiredInfo();
-                    } else {
-                        status = mShadowConnection.reportNullDesiredInfo(reportJsonDoc);
-                    }
-                }
-                return status.name();
-            }
-
-            @Override
-            public void initOTA(String storagePath, ITXOTAListener listener) throws RemoteException {
-
-                TXMqttService.this.initOTA(storagePath, listener);
-            }
-
-            @Override
-            public String reportCurrentFirmwareVersion(String currentFirmwareVersion) throws RemoteException {
-                Status status = TXMqttService.this.reportCurrentFirmwareVersion(currentFirmwareVersion);
-                return status.name();
-            }
-
-            @Override
-            public String reportOTAState(String state, int resultCode, String resultMsg, String version) throws RemoteException {
-                Status status = TXMqttService.this.reportOTAState(state, resultCode, resultMsg, version);
-                return status.name();
-            }
-        };
-    }
-
-}
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLogCallBack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLogCallBack.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLogCallBack.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,37 +0,0 @@
-package com.tencent.iot.hub.device.android.core.log;
-
-public abstract class  TXMqttLogCallBack {
-
-    /**
-     * 打印生成的日志和调试信息
-     * @param message 打印的信息
-     */
-    public abstract void printDebug(String message);
-
-    /**
-     * 设置密钥
-     * @return 返回密钥
-     */
-    public abstract String setSecretKey();
-
-    /**
-     * 断线时保存日志
-     * @param log 日志
-     * @return 返回存储的日志长度
-     */
-    public abstract boolean saveLogOffline(String log);
-
-
-    /**
-     * 读取断线时保存的日志
-     * @return 返回读取的日志内容
-     */
-    public abstract String readOfflineLog();
-
-    /**
-     * 删除断线时保存的日志
-     * @return 删除成功返回true，失败返回false
-     */
-    public abstract boolean delOfflineLog();
-
-}
Index: iot_service/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/gradle.properties	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/gradle.properties	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,23 +0,0 @@
-# ��İ���
-PROJ_GROUP=com.qcloud.iot
-# ���ID
-PROJ_ARTIFACTID=iot-service
-# ��İ汾
-PROJ_VERSION=2.1.0
-### ��� gradle���õ���ʽ���� $PROJ_GROUP:$PROJ_ARTIFACTID:$PROJ_VERSION
-
-# ����
-PROJ_NAME=IoT-Service
-# �����Ŀ��ҳ
-PROJ_WEBSITEURL=https://github.com/tencentyun/qcloud-iot-sdk-android
-# ������ٵ�ַ
-PROJ_ISSUETRACKERURL=https://github.com/tencentyun/qcloud-iot-sdk-android/issues
-# VCS ��ַ
-PROJ_VCSURL=https://github.com/tencentyun/qcloud-iot-sdk-android.git
-# ��ļ�����
-PROJ_DESCRIPTION=
-
-# �����ߵ���Ϣ, ��������
-DEVELOPER_ID=shockcao
-DEVELOPER_NAME=Cao ShaoKun
-DEVELOPER_EMAIL=shockcao@tencent.com
\ No newline at end of file
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/gateway/TXGatewayConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/gateway/TXGatewayConnection.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/gateway/TXGatewayConnection.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,523 +0,0 @@
-package com.tencent.iot.hub.device.android.core.gateway;
-
-import android.content.Context;
-import android.util.Base64;
-import android.util.Log;
-
-import com.tencent.iot.hub.device.android.core.log.TXMqttLogCallBack;
-import com.tencent.iot.hub.device.android.core.mqtt.TXAlarmPingSender;
-import com.tencent.iot.hub.device.android.core.mqtt.TXMqttConnection;
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-import com.tencent.iot.hub.device.java.core.common.Status;
-import com.tencent.iot.hub.device.java.core.gateway.TXGatewaySubdev;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants;
-import com.tencent.iot.hub.device.java.core.util.HmacSha256;
-
-import org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions;
-import org.eclipse.paho.client.mqttv3.IMqttActionListener;
-import org.eclipse.paho.client.mqttv3.IMqttToken;
-import org.eclipse.paho.client.mqttv3.MqttAsyncClient;
-import org.eclipse.paho.client.mqttv3.MqttClientPersistence;
-import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
-import org.eclipse.paho.client.mqttv3.MqttMessage;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.security.InvalidKeyException;
-import java.security.NoSuchAlgorithmException;
-import java.util.HashMap;
-
-import javax.crypto.Mac;
-import javax.crypto.spec.SecretKeySpec;
-
-import static com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants.MQTT_SDK_VER;
-
-/**
- * Created by willssong on 2018/12/25.
- */
-
-public class TXGatewayConnection  extends TXMqttConnection {
-    public static final String TAG = "TXMQTT" + MQTT_SDK_VER;
-    private static final String HMAC_SHA_256 = "HmacSHA256";
-
-    private HashMap<String, TXGatewaySubdev> mSubdevs = new HashMap<String, TXGatewaySubdev>();
-    private static final String GW_OPERATION_RES_PREFIX = "$gateway/operation/result/";
-    private static final String GW_OPERATION_PREFIX = "$gateway/operation/";
-    private static final String PRODUCT_CONFIG_PREFIX = "$config/operation/result/";
-
-    public TXGatewayConnection(Context context, String serverURI, String productID, String deviceName, String secretKey, DisconnectedBufferOptions bufferOpts,
-                               MqttClientPersistence clientPersistence, Boolean mqttLogFlag, TXMqttLogCallBack logCallBack, TXMqttActionCallBack callBack) {
-        super(context, serverURI, productID, deviceName, secretKey, bufferOpts, clientPersistence, mqttLogFlag,logCallBack,callBack);
-    }
-
-    /**
-     * @param context           用户上下文（这个参数在回调函数时透传给用户）
-     * @param serverURI         服务器URI
-     * @param productID         产品名
-     * @param deviceName        设备名，唯一
-     * @param secretKey         密钥
-     * @param bufferOpts        发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用
-     * @param clientPersistence 消息永久存储
-     * @param callBack          连接、消息发布、消息订阅回调接口
-     */
-    public TXGatewayConnection(Context context, String serverURI, String productID, String deviceName, String secretKey,
-                            DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence, TXMqttLogCallBack logCallBack,TXMqttActionCallBack callBack) {
-        this(context, serverURI, productID, deviceName, secretKey, bufferOpts, clientPersistence,true, logCallBack, callBack);
-    }
-
-    /**
-     * 使用腾讯云物联网通信默认地址 "${ProductId}.iotcloud.tencentdevices.com:8883"  https://cloud.tencent.com/document/product/634/32546
-     * @param context
-     * @param productID
-     * @param deviceName
-     * @param secretKey
-     * @param bufferOpts
-     * @param clientPersistence
-     * @param callBack
-     */
-    public TXGatewayConnection(Context context, String productID, String deviceName, String secretKey,
-                               DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence,
-                               TXMqttActionCallBack callBack) {
-        this(context, null, productID, deviceName, secretKey, bufferOpts, clientPersistence, false,null, callBack);
-    }
-
-    /**
-     *
-     * @param context
-     * @param productID
-     * @param deviceName
-     * @param secretKey
-     * @param bufferOpts
-     * @param callBack
-     */
-    public TXGatewayConnection(Context context, String productID, String deviceName, String secretKey,
-                               DisconnectedBufferOptions bufferOpts, TXMqttActionCallBack callBack) {
-        this(context, productID, deviceName, secretKey, bufferOpts, null, callBack);
-    }
-
-    public TXGatewayConnection(Context context, String srvURL, String productID, String deviceName,
-                               String secretKey, TXMqttActionCallBack callBack) {
-        this(context, srvURL, productID, deviceName, secretKey, null, null, false, null, callBack);
-    }
-
-    /**
-     *
-     * @param context
-     * @param productID
-     * @param deviceName
-     * @param secretKey
-     * @param callBack
-     */
-    public TXGatewayConnection(Context context, String productID, String deviceName,
-                               String secretKey, TXMqttActionCallBack callBack) {
-        this(context, productID, deviceName, secretKey, null, null, callBack);
-    }
-
-
-
-    /**
-     *
-     * @param productId
-     * @param devName
-     * @return null if not existed otherwise the subdev
-     */
-    private TXGatewaySubdev findSubdev(String productId, String devName) {
-        Log.d(TAG, "The hashed information is " + mSubdevs);
-        return mSubdevs.get(productId + devName);
-    }
-
-    /**
-     * remove the subdev if it is offline
-     * @param subdev
-     * @return the operation results
-     */
-    private synchronized TXGatewaySubdev removeSubdev(TXGatewaySubdev subdev) {
-        return mSubdevs.remove(subdev.mProductId + subdev.mDevName);
-    }
-
-    /**
-     * remove the subdev if it is offline
-     * @param productId
-     * @param devName
-     * @return
-     */
-    private synchronized TXGatewaySubdev removeSubdev(String productId, String devName) {
-        return mSubdevs.remove(productId + devName);
-    }
-
-    /**
-     *  add a new subdev entry
-     * @param dev
-     */
-    private synchronized void addSubdev(TXGatewaySubdev dev) {
-        mSubdevs.put(dev.mProductId + dev.mDevName, dev);
-    }
-
-    /**
-     *  Get the subdev status
-     * @param productId
-     * @param devName
-     * @return the status of subdev
-     */
-    public Status getSubdevStatus(String productId, String devName) {
-        TXGatewaySubdev subdev = findSubdev(productId, devName);
-        if (subdev == null) {
-            return Status.SUBDEV_STAT_NOT_EXIST;
-        }
-        return subdev.getSubdevStatus();
-    }
-
-    /**
-     * set the status of the subdev
-     * @param productId
-     * @param devName
-     * @param stat
-     * @return the status of operation
-     */
-    public Status setSubdevStatus(String productId, String devName, Status stat) {
-        TXGatewaySubdev subdev = findSubdev(productId, devName);
-        if (subdev == null) {
-            return Status.SUBDEV_STAT_NOT_EXIST;
-        }
-        subdev.setSubdevStatus(stat);
-        return Status.OK;
-    }
-
-    /**
-     * publish the offline message for the subdev
-     * @param subProductID
-     * @param subDeviceName
-     * @return the result of operation
-     */
-    public Status gatewaySubdevOffline(String subProductID, String subDeviceName) {
-        Log.d(TAG, "Try to find " + subProductID + " & " + subDeviceName);
-        TXGatewaySubdev subdev = findSubdev(subProductID, subDeviceName);
-        if (subdev == null) {
-            Log.d(TAG, "Cant find the subdev");
-            subdev = new TXGatewaySubdev(subProductID, subDeviceName);
-        }
-        String topic = GW_OPERATION_PREFIX + mProductId + "/" + mDeviceName;
-
-        Log.d(TAG, "set " + subProductID + " & " + subDeviceName + " to offline");
-
-        // format the payload
-        JSONObject obj = new JSONObject();
-        try {
-            obj.put("type", "offline");
-            JSONObject plObj = new JSONObject();
-            String strDev = "[{'product_id':'" + subProductID +"','device_name':'" + subDeviceName + "'}]";
-            JSONArray devs = new JSONArray(strDev);
-            plObj.put("devices", devs);
-            obj.put("payload", plObj);
-        } catch (JSONException e) {
-            return Status.ERROR;
-        }
-        MqttMessage message = new MqttMessage();
-        message.setQos(0);
-        message.setPayload(obj.toString().getBytes());
-        Log.d(TAG, "publish message " + message);
-
-        return super.publish(topic, message, null);
-    }
-
-    private static String sign(String src, String psk) {
-        Mac mac;
-
-        try {
-            mac = Mac.getInstance(HMAC_SHA_256);
-        } catch (NoSuchAlgorithmException e) {
-            e.printStackTrace();
-            return null;
-        }
-
-        String hmacSign;
-        SecretKeySpec signKey = new SecretKeySpec(psk.getBytes(), HMAC_SHA_256);
-
-        try {
-            mac.init(signKey);
-            byte[] rawHmac = mac.doFinal(src.getBytes());
-            hmacSign = com.tencent.iot.hub.device.java.core.util.Base64.encodeToString(rawHmac, com.tencent.iot.hub.device.java.core.util.Base64.NO_WRAP);
-            return hmacSign;
-        } catch (InvalidKeyException e) {
-            e.printStackTrace();
-        }
-        return null;
-    }
-
-    public Status gatewayBindSubdev(String subProductID, String subDeviceName, String psk) {
-
-        String topic = GW_OPERATION_PREFIX + mProductId + "/" + mDeviceName;
-
-        // format the payload
-        JSONObject obj = new JSONObject();
-        try {
-            obj.put("type", "bind");
-            JSONObject plObj = new JSONObject();
-            JSONObject dev = new JSONObject();
-            dev.put("product_id", subProductID);
-            dev.put("device_name", subDeviceName);
-            int randNum = (int) (Math.random() * 999999);
-            dev.put("random", randNum);
-            long timestamp = System.currentTimeMillis() / 1000;
-            dev.put("timestamp", timestamp);
-            dev.put("signmethod", "hmacsha256");
-            dev.put("authtype", "psk");
-            String text2Sgin = subProductID + subDeviceName + ";" + randNum + ";" + timestamp;
-            dev.put("signature", sign(text2Sgin, psk));
-            JSONArray devs = new JSONArray();
-            devs.put(dev);
-            plObj.put("devices", devs);
-            obj.put("payload", plObj);
-        } catch (JSONException e) {
-            return Status.ERROR;
-        }
-
-        MqttMessage message = new MqttMessage();
-        message.setQos(0);
-        message.setPayload(obj.toString().getBytes());
-        Log.d(TAG, "publish message " + message);
-
-        return super.publish(topic, message, null);
-    }
-
-    public Status gatewayUnbindSubdev(String subProductID, String subDeviceName) {
-
-        String topic = GW_OPERATION_PREFIX + mProductId + "/" + mDeviceName;
-
-        // format the payload
-        JSONObject obj = new JSONObject();
-        try {
-            obj.put("type", "unbind");
-            JSONObject plObj = new JSONObject();
-            JSONObject dev = new JSONObject();
-            dev.put("product_id", subProductID);
-            dev.put("device_name", subDeviceName);
-            JSONArray devs = new JSONArray();
-            devs.put(dev);
-            plObj.put("devices", devs);
-            obj.put("payload", plObj);
-        } catch (JSONException e) {
-            return Status.ERROR;
-        }
-
-        MqttMessage message = new MqttMessage();
-        message.setQos(0);
-        message.setPayload(obj.toString().getBytes());
-        Log.d(TAG, "publish message " + message);
-
-        return super.publish(topic, message, null);
-    }
-
-    public Status getGatewaySubdevRealtion() {
-        String topic = GW_OPERATION_PREFIX + mProductId + "/" + mDeviceName;
-
-        JSONObject obj = new JSONObject();
-        try {
-            obj.put("type", "describe_sub_devices");
-        } catch (JSONException e) {
-            return Status.ERROR;
-        }
-
-        MqttMessage message = new MqttMessage();
-        message.setQos(0);
-        message.setPayload(obj.toString().getBytes());
-        Log.d(TAG, "publish message " + message);
-
-        return super.publish(topic, message, null);
-    }
-
-    public Status getRemoteConfig() {
-        // format the payload
-        JSONObject obj = new JSONObject();
-        try {
-            obj.put("type", "get");
-        } catch (JSONException e) {
-            return Status.ERROR;
-        }
-
-        MqttMessage message = new MqttMessage();
-        // 这里添加获取到的数据
-        message.setPayload(obj.toString().getBytes());
-        message.setQos(1);
-        String topic = String.format("$config/report/%s/%s", mProductId, mDeviceName);
-        return super.publish(topic, message, null);
-    }
-
-    public Status concernConfig() {
-        String subscribeConfigTopic = PRODUCT_CONFIG_PREFIX + mProductId + "/" + mDeviceName;
-        return this.subscribe(subscribeConfigTopic, 1, "subscribe config topic");
-    }
-
-    public Status gatewaySubdevOnline(String subProductID, String subDeviceName) {
-        TXGatewaySubdev subdev = findSubdev(subProductID, subDeviceName);
-        if (subdev == null) {
-            Log.d(TAG, "Cant find the subdev");
-            subdev = new TXGatewaySubdev(subProductID, subDeviceName);
-        }
-        String topic = GW_OPERATION_PREFIX + mProductId + "/" + mDeviceName;
-        Log.d(TAG, "set " + subProductID + " & " + subDeviceName + " to Online");
-
-        // format the payload
-        JSONObject obj = new JSONObject();
-        try {
-            obj.put("type", "online");
-            JSONObject plObj = new JSONObject();
-            String strDev = "[{'product_id':'" + subProductID +"','device_name':'" + subDeviceName + "'}]";
-            JSONArray devs = new JSONArray(strDev);
-            plObj.put("devices", devs);
-            obj.put("payload", plObj);
-        } catch (JSONException e) {
-            return Status.ERROR;
-        }
-        addSubdev(subdev);
-
-        MqttMessage message = new MqttMessage();
-        message.setQos(0);
-        message.setPayload(obj.toString().getBytes());
-        Log.d(TAG, "publish message " + message);
-
-        return super.publish(topic, message, null);
-    }
-
-    private boolean consumeGwOperationMsg(String topic, MqttMessage message) {
-        if (!topic.startsWith(GW_OPERATION_RES_PREFIX)) {
-            return false;
-        }
-        Log.d(TAG, "got gate operation messga " + topic + message);
-        String productInfo = topic.substring(GW_OPERATION_RES_PREFIX.length());
-        int splitIdx = productInfo.indexOf('/');
-        String productId = productInfo.substring(0, splitIdx);
-        String devName = productInfo.substring(splitIdx + 1);
-
-        TXGatewaySubdev subdev = findSubdev(productId, devName);
-
-        // this subdev is not managed by me
-        if (subdev == null) {
-            return false;
-        }
-
-        try {
-            byte[] payload = message.getPayload();
-            JSONObject jsonObject = new JSONObject(new String(payload));
-
-            String type = jsonObject.getString("type");
-            if (type.equalsIgnoreCase("online")) {
-                String res = jsonObject.getString("result");
-
-                if (res.equals("0")) {
-                    subdev.setSubdevStatus(Status.SUBDEV_STAT_ONLINE);
-                }
-
-            } else if (type.equalsIgnoreCase("offline")) {
-                String res = jsonObject.getString("result");
-
-                if (res.equals("0")) {
-                    removeSubdev(subdev);
-                }
-            }
-
-        }catch (JSONException e) {
-
-        }
-
-        return true;
-    }
-
-    @Override
-    public void messageArrived(String topic, MqttMessage message) throws Exception {
-        Log.d(TAG, "message received " + topic);
-        if (!consumeGwOperationMsg(topic, message)) {
-            super.messageArrived(topic, message);
-        }
-    }
-
-    @Override
-    public synchronized Status connect(MqttConnectOptions options, Object userContext) {
-        if (mConnectStatus.equals(TXMqttConstants.ConnectStatus.kConnecting)) {
-            TXLog.i(TAG, "The client is connecting. Connect return directly.");
-            return Status.MQTT_CONNECT_IN_PROGRESS;
-        }
-
-        if (mConnectStatus.equals(TXMqttConstants.ConnectStatus.kConnected)) {
-            TXLog.i(TAG, "The client is already connected. Connect return directly.");
-            return Status.OK;
-        }
-
-        this.mConnOptions = options;
-        if (mConnOptions == null) {
-            TXLog.e(TAG, "Connect options == null, will not connect.");
-            return Status.PARAMETER_INVALID;
-        }
-
-        Long timestamp = System.currentTimeMillis()/1000 + 600;
-        String userNameStr = mUserName + ";" + getConnectId() + ";" + timestamp;
-
-        mConnOptions.setUserName(userNameStr);
-
-        if (mSecretKey != null && mSecretKey.length() != 0) {
-            try {
-                String passWordStr = HmacSha256.getSignature(userNameStr.getBytes(), Base64.decode(mSecretKey, Base64.DEFAULT)) + ";hmacsha256";
-                mConnOptions.setPassword(passWordStr.toCharArray());
-            }
-            catch (IllegalArgumentException e) {
-                Log.d(TAG, "Failed to set password");
-            }
-        }
-
-        mConnOptions.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1);
-
-        IMqttActionListener mActionListener = new IMqttActionListener() {
-            @Override
-            public void onSuccess(IMqttToken token) {
-                TXLog.i(TAG, "onSuccess!");
-                setConnectingState(TXMqttConstants.ConnectStatus.kConnected);
-                mActionCallBack.onConnectCompleted(Status.OK, false, token.getUserContext(), "connected to " + mServerURI);
-                // If the connection is established, subscribe the gateway operation topic
-                String gwTopic = GW_OPERATION_RES_PREFIX + mProductId + "/" + mDeviceName;
-                int qos = TXMqttConstants.QOS1;
-
-                subscribe(gwTopic, qos, "Subscribe GATEWAY result topic");
-                Log.d(TAG, "Connected, then subscribe the gateway result topic");
-
-                if (mMqttLogFlag) {
-                    initMqttLog(TAG);
-                }
-            }
-
-            @Override
-            public void onFailure(IMqttToken token, Throwable exception) {
-                TXLog.e(TAG, exception, "onFailure!");
-                setConnectingState(TXMqttConstants.ConnectStatus.kConnectFailed);
-                mActionCallBack.onConnectCompleted(Status.ERROR, false, token.getUserContext(), exception.toString());
-            }
-        };
-
-        if (mMqttClient == null) {
-            try {
-                mPingSender = new TXAlarmPingSender(mContext);
-                mMqttClient = new MqttAsyncClient(mServerURI, mClientId, mMqttPersist, mPingSender);
-                mMqttClient.setCallback(this);
-                mMqttClient.setBufferOpts(super.bufferOpts);
-                mMqttClient.setManualAcks(false);
-            } catch (Exception e) {
-                TXLog.e(TAG, "new MqttClient failed", e);
-                setConnectingState(TXMqttConstants.ConnectStatus.kConnectFailed);
-                return Status.ERROR;
-            }
-        }
-
-        try {
-            TXLog.i(TAG, "Start connecting to %s", mServerURI);
-            setConnectingState(TXMqttConstants.ConnectStatus.kConnecting);
-            mMqttClient.connect(mConnOptions, userContext, mActionListener);
-        } catch (Exception e) {
-            TXLog.e(TAG, "MqttClient connect failed", e);
-            setConnectingState(TXMqttConstants.ConnectStatus.kConnectFailed);
-            return Status.ERROR;
-        }
-
-        return Status.OK;
-    }
-}
Index: iot_core/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/build.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/build.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,159 +0,0 @@
-apply plugin: 'com.android.library'
-apply plugin: 'maven-publish'
-apply plugin: 'signing'
-
-
-android {
-    compileSdkVersion 29
-    buildToolsVersion "26.0.3"
-
-    defaultConfig {
-        minSdkVersion 16
-        targetSdkVersion 29
-        versionCode 2
-        versionName "1.1"
-
-        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
-
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-
-    sourceSets {
-        main {
-            java {
-                srcDirs - ["src/main/java", "src/main/aidl"]
-            }
-            jni {
-                srcDir "src/main/jni"
-            }
-        }
-    }
-    lintOptions {
-        abortOnError false
-    }
-}
-
-task androidJavadocs(type: Javadoc) {
-    failOnError false
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    android.libraryVariants.all { variant ->
-        if (variant.name == 'release') {
-            owner.classpath += variant.javaCompile.classpath
-        }
-    }
-    exclude '**/R.html', '**/R.*.html', '**/index.html'
-}
-
-task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
-    classifier = 'javadoc'
-    from androidJavadocs.destinationDir
-}
-
-task androidSourcesJar(type: Jar) {
-    classifier = 'sources'
-    from android.sourceSets.main.java.srcDirs
-}
-
-def libVersion = '3.2.1-SNAPSHOT'
-ext.isReleaseVersion = !libVersion.endsWith("SNAPSHOT")
-publishing {
-    publications {
-        aar(MavenPublication) {
-            groupId 'com.tencent.iot.hub'
-            artifactId 'hub-device-android-core'
-            version libVersion
-            artifact(androidSourcesJar)
-            artifact(androidJavadocsJar)
-            artifact file('build/outputs/aar/iot_core-release.aar')
-
-            pom {
-                name = 'hub device android core'
-                description = 'Hub Device Android Core library'
-                url = 'https://github.com/tencentyun/iot-device-java/tree/master/hub-device-android'
-                licenses {
-                    license {
-                        name = 'Tencent Binary License'
-                        url = 'https://github.com/tencentyun/iot-device-java/blob/master/hub-device-android/LICENSE'
-                    }
-                }
-                developers {
-                    developer {
-                        id = 'tencent_archurtan'
-                        name = 'Tencent archurtan'
-                        email = 'archurtan@tencent.com'
-                    }
-                }
-                scm {
-                    url = 'scm:git@github.com:tencentyun/iot-device-java.git'
-                    connection = 'scm:git@github.com:tencentyun/iot-device-java.git'
-                    developerConnection = 'scm:git@github.com:tencentyun/iot-device-java.git'
-                }
-            }
-
-            pom.withXml {
-                def dependenciesNode = asNode().appendNode('dependencies')
-                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
-                    if (dp.version != "unspecified") {
-                        def dependencyNode = dependenciesNode.appendNode('dependency')
-                        dependencyNode.appendNode('groupId', dp.group)
-                        dependencyNode.appendNode('artifactId', dp.name)
-                        dependencyNode.appendNode('version', dp.version)
-
-                        // for exclusions
-                        if (dp.excludeRules.size() > 0) {
-                            def exclusions = dependencyNode.appendNode('exclusions')
-                            dp.excludeRules.each { ExcludeRule ex ->
-                                def exclusion = exclusions.appendNode('exclusion')
-                                exclusion.appendNode('groupId', ex.group)
-                                exclusion.appendNode('artifactId', ex.module)
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    }
-    repositories {
-        maven {
-            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
-            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
-            url = libVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
-            credentials {
-                username = System.getenv("IOT_SONATYPE_USERNAME")
-                password = System.getenv("IOT_SONATYPE_PASSWORD")
-            }
-        }
-    }
-}
-
-dependencies {
-    implementation fileTree(dir: 'libs', include: ['*.jar'])
-    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
-        exclude group: 'com.android.support', module: 'support-annotations'
-    })
-    //noinspection GradleCompatible
-    implementation 'com.android.support:appcompat-v7:26.1.0'
-    testImplementation 'junit:junit:4.13'
-
-    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.3'
-    implementation "com.squareup.okhttp3:okhttp:3.12.2"
-    implementation 'org.bouncycastle:bcprov-jdk15on:1.65'
-    implementation 'org.bouncycastle:bcpkix-jdk15on:1.65'
-    if (findProject(':hub-device-java') != null) {
-        implementation project(path: ':hub-device-java')
-    } else {
-        implementation 'com.tencent.iot.hub:hub-device-java:1.0.0'
-    }
-}
-
-signing {
-    if (isReleaseVersion) {
-        sign publishing.publications.aar
-    }
-}
Index: iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttToken.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttToken.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttToken.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,4 +0,0 @@
-// parcelable TXMqttToken.aidl
-package com.tencent.iot.hub.device.android.service;
-
-parcelable TXMqttToken;
Index: iot_core/bintray.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/bintray.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/bintray.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,136 +0,0 @@
-group = PROJ_GROUP
-version = PROJ_VERSION
-project.archivesBaseName = PROJ_ARTIFACTID
-
-apply plugin: 'com.jfrog.bintray'
-apply plugin: "com.jfrog.artifactory"
-apply plugin: 'maven-publish'
-
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.sourceFiles
-    classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-    options.charSet = 'UTF-8'
-    options.encoding = "UTF-8"
-    source = android.sourceSets.main.java.srcDirs
-    classpath += configurations.compile
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from javadoc.destinationDir
-}
-
-task androidJniSymbolsJar(type: Jar) {
-    classifier = 'symbols'
-    from file('obj/local/')
-    include '**/*.so'
-}
-
-javadoc {
-    options{
-        encoding "UTF-8"
-        charSet 'UTF-8'
-        author true
-        version true
-        links "http://docs.oracle.com/javase/7/docs/api"
-        title "$PROJ_NAME $PROJ_VERSION"
-    }
-}
-
-
-def pomConfig = {
-    licenses {
-        license {
-            name "MIT License"
-            url "http://opensource.org/licenses/MIT"
-            distribution "repo"
-        }
-    }
-    developers {
-        developer {
-            id DEVELOPER_ID
-            name DEVELOPER_NAME
-            email DEVELOPER_EMAIL
-        }
-    }
-}
-
-publishing {
-    publications {
-        mavenJava(MavenPublication) {
-            artifactId PROJ_ARTIFACTID
-            artifact javadocJar
-            artifact sourcesJar
-            artifact androidJniSymbolsJar
-
-            pom.withXml {
-                def root = asNode()
-                root.appendNode('description', PROJ_DESCRIPTION)
-                root.children().last() + pomConfig
-
-                def dependenciesNode = root.appendNode('dependencies')
-                configurations.compile.allDependencies.each {
-                    if (it.group && it.name && it.version) {
-                        def dependencyNode = dependenciesNode.appendNode('dependency')
-                        dependencyNode.appendNode('groupId', it.group)
-                        dependencyNode.appendNode('artifactId', it.name)
-                        dependencyNode.appendNode('version', it.version)
-                    }
-                }
-            }
-        }
-    }
-}
-
-afterEvaluate {
-    publishing.publications.mavenJava.artifact(bundleReleaseAar)
-}
-
-bintray {
-    Properties properties = new Properties()
-    if (rootProject.file("local.properties").exists()) {
-        properties.load(project.rootProject.file('local.properties').newDataInputStream())
-        user = properties.getProperty("bintray.user")
-        key = properties.getProperty("bintray.apikey")
-    }
-
-    publications = ['mavenJava']
-    publish = true
-
-    pkg {
-        repo = 'iot'
-        userOrg= 'qcloudplatform145'
-        name = PROJ_NAME
-        desc = PROJ_DESCRIPTION
-        websiteUrl = PROJ_WEBSITEURL
-        issueTrackerUrl = PROJ_ISSUETRACKERURL
-        vcsUrl = PROJ_VCSURL
-        licenses = ['MIT']
-        publicDownloadNumbers = true
-    }
-}
-
-artifactory {
-    contextUrl = 'http://oss.jfrog.org/artifactory'
-    resolve {
-        repository {
-            repoKey = 'libs-release'
-        }
-    }
-    publish {
-        repository {
-            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
-            username = bintray.user
-            password = bintray.key
-        }
-        defaults {
-            //这里的名字和上面红色的名字一致即可，会将其包含的输出上传到jfrog上去
-            publications('mavenJava')
-            publishArtifacts = true
-        }
-    }
-}
\ No newline at end of file
Index: iot_service/bintray.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/bintray.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/bintray.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,138 +0,0 @@
-group = PROJ_GROUP
-version = PROJ_VERSION
-project.archivesBaseName = PROJ_ARTIFACTID
-
-apply plugin: 'com.jfrog.bintray'
-apply plugin: "com.jfrog.artifactory"
-apply plugin: 'maven-publish'
-
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.sourceFiles
-    classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-    options.charSet = 'UTF-8'
-    options.encoding = "UTF-8"
-    source = android.sourceSets.main.java.srcDirs
-    classpath += configurations.compile
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from javadoc.destinationDir
-}
-
-task androidJniSymbolsJar(type: Jar) {
-    classifier = 'symbols'
-    from file('obj/local/')
-    include '**/*.so'
-}
-
-javadoc {
-    options {
-        encoding "UTF-8"
-        charSet 'UTF-8'
-        author true
-        version true
-        links "http://docs.oracle.com/javase/7/docs/api"
-        title "$PROJ_NAME $PROJ_VERSION"
-    }
-
-    exclude "**/*.aidl"
-}
-
-
-def pomConfig = {
-    licenses {
-        license {
-            name "MIT License"
-            url "http://opensource.org/licenses/MIT"
-            distribution "repo"
-        }
-    }
-    developers {
-        developer {
-            id DEVELOPER_ID
-            name DEVELOPER_NAME
-            email DEVELOPER_EMAIL
-        }
-    }
-}
-
-publishing {
-    publications {
-        mavenJava(MavenPublication) {
-            artifactId PROJ_ARTIFACTID
-            artifact javadocJar
-            artifact sourcesJar
-            artifact androidJniSymbolsJar
-
-            pom.withXml {
-                def root = asNode()
-                root.appendNode('description', PROJ_DESCRIPTION)
-                root.children().last() + pomConfig
-
-                def dependenciesNode = root.appendNode('dependencies')
-                configurations.compile.allDependencies.each {
-                    if (it.group && it.name && it.version) {
-                        def dependencyNode = dependenciesNode.appendNode('dependency')
-                        dependencyNode.appendNode('groupId', it.group)
-                        dependencyNode.appendNode('artifactId', it.name)
-                        dependencyNode.appendNode('version', it.version)
-                    }
-                }
-            }
-        }
-    }
-}
-
-afterEvaluate {
-    publishing.publications.mavenJava.artifact(bundleReleaseAar)
-}
-
-bintray {
-    Properties properties = new Properties()
-    if (rootProject.file("local.properties").exists()) {
-        properties.load(project.rootProject.file('local.properties').newDataInputStream())
-        user = properties.getProperty("bintray.user")
-        key = properties.getProperty("bintray.apikey")
-    }
-
-    publications = ['mavenJava']
-    publish = true
-
-    pkg {
-        repo = 'iot'
-        userOrg = 'qcloudplatform145'
-        name = PROJ_NAME
-        desc = PROJ_DESCRIPTION
-        websiteUrl = PROJ_WEBSITEURL
-        issueTrackerUrl = PROJ_ISSUETRACKERURL
-        vcsUrl = PROJ_VCSURL
-        licenses = ['MIT']
-        publicDownloadNumbers = true
-    }
-}
-
-artifactory {
-    contextUrl = 'http://oss.jfrog.org/artifactory'
-    resolve {
-        repository {
-            repoKey = 'libs-release'
-        }
-    }
-    publish {
-        repository {
-            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
-            username = bintray.user
-            password = bintray.key
-        }
-        defaults {
-            //这里的名字和上面红色的名字一致即可，会将其包含的输出上传到jfrog上去
-            publications('mavenJava')
-            publishArtifacts = true
-        }
-    }
-}
\ No newline at end of file
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLogImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLogImpl.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLogImpl.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,188 +0,0 @@
-package com.tencent.iot.hub.device.android.core.log;
-
-import com.tencent.iot.hub.device.android.core.mqtt.TXMqttConnection;
-import com.tencent.iot.hub.device.android.core.util.HmacSha1;
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-
-import java.io.IOException;
-import java.util.concurrent.LinkedBlockingDeque;
-import java.util.concurrent.TimeUnit;
-
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-
-public class TXMqttLogImpl {
-
-    public static final String TAG = TXMqttLogImpl.class.getName();
-
-    /**
-     * 定时上传时间：单位ms，30S一次
-     */
-    private long timeInterval = 30000;
-
-    /**
-     * 日志队列，容量10000条日志，剩余容量低于四分之一时触发一次日志上传
-     */
-    private LinkedBlockingDeque<String> logDeque;
-    private static int dequeSize = 10000; //最大容量10000条日志
-    private static int dequeThreshold = dequeSize/4; //剩余容量预警阈值
-
-    /**
-     * http客户端，用于上传日志到服务器
-     */
-    private OkHttpClient mOkHttpClient;
-
-    /**http 服务器 URL*/
-    private static final String MQTT_LOG_UPLOAD_SERVER_URL =  "http://devicelog.iot.cloud.tencent.com:80/cgi-bin/report-log";
-
-    /**Content Type*/
-    private static final MediaType MEDIA_TYPE_LOG = MediaType.parse("text/plain;charset=utf-8");
-
-    /**
-     * 固定头部
-     * 格式：[鉴权类型（1字符，C代表证书方式，P代表PSK方式）][预留（3字符，填充#）][产品ID（10字符，不足后面补#）][设备ID（48字符，不足后面补#）]
-     */
-    private String mFixedHead;
-
-    /**
-     * 签名密钥,最多保留24位
-     */
-    private String mSecretKey;
-
-    /**
-     * 上传标志，true表示立刻上传
-     */
-    private boolean mUploadFlag;
-
-    /**
-     * 日志上传回调函数，用于离线下的日志存储和上线后的日志上传
-     */
-    private TXMqttLogCallBack mMqttLogCallBack;
-
-    TXMqttLogImpl(TXMqttConnection mqttConnection) {
-        this.mOkHttpClient =  new OkHttpClient().newBuilder().connectTimeout(1, TimeUnit.SECONDS).build();
-        this.logDeque = new LinkedBlockingDeque<String>(dequeSize);
-        //固定头部格式：[鉴权类型（1字符，C代表证书方式，P代表PSK方式）][预留（3字符，填充#）][产品ID（10字符，不足后面补#）][设备ID（48字符，不足后面补#）]
-        this.mFixedHead = String.format("%c###%s%s",
-                mqttConnection.mSecretKey == null ? 'C' : 'P',
-                String.format("%-10s",mqttConnection.mProductId).replace(" ","#"),
-                String.format("%-48s", mqttConnection.mDeviceName).replace(" ","#")
-        );
-        this.mUploadFlag = false;
-        this.mMqttLogCallBack = mqttConnection.mMqttLogCallBack;
-        this.mSecretKey = mMqttLogCallBack.setSecretKey();
-        new UploaderToServer().start();
-    }
-
-    /**
-     * 完成日志上传的操作
-     */
-    class UploaderToServer extends Thread {
-        @Override
-        public void run() {
-
-            long nowCurrentMillis = System.currentTimeMillis();
-
-            while (true) {
-                if (mUploadFlag || (logDeque.size() > dequeSize - dequeThreshold)
-                    || (nowCurrentMillis < System.currentTimeMillis()- timeInterval)) {
-
-                    if (logDeque.size() == 0) {
-                        nowCurrentMillis = System.currentTimeMillis();
-                        mUploadFlag = false;
-                        continue;
-                    }
-
-                    StringBuffer log = new StringBuffer();
-
-                    //获取所有的log
-                    try {
-                        while (logDeque.size() > 0)
-                            log.append(logDeque.take());
-                    } catch (Exception e) {
-                        mMqttLogCallBack.printDebug( "Take log from deque failed");
-                    }
-
-                    //格式为[签名][固定头部][时间戳（10位）][日志]
-                    String payLoad = String.format("%s%s%s", mFixedHead, String.valueOf(System.currentTimeMillis()).substring(0, 10), log.toString());
-                    payLoad = HmacSha1.getSignature(payLoad.getBytes(), mSecretKey.getBytes()) + payLoad;
-
-                    Request request = new Request.Builder()
-                            .url(MQTT_LOG_UPLOAD_SERVER_URL)
-                            .post(RequestBody.create(MEDIA_TYPE_LOG, payLoad))
-                            .build();
-
-                    //发送请求
-                    try {
-                        Response response = mOkHttpClient.newCall(request).execute();
-                        if(!response.isSuccessful()) {
-                            mMqttLogCallBack.printDebug(String.format("Upload log to %s failed! Response:[%s]",MQTT_LOG_UPLOAD_SERVER_URL,response.body().string()));
-                        } else {
-                            mMqttLogCallBack.printDebug(String.format("Upload log to %s success!",MQTT_LOG_UPLOAD_SERVER_URL));
-                        }
-                    } catch (IOException e) {
-                        mMqttLogCallBack.saveLogOffline(log.toString()); //存在文本中
-                        mMqttLogCallBack.printDebug(String.format("Lost Connection! Call mMqttCallBack.saveLogOffline()"));
-                    }
-
-                    nowCurrentMillis = System.currentTimeMillis();
-                    mUploadFlag = false;
-
-                    //TXLog.i(TAG, "log upload :%s", log);
-                }
-
-                try {
-                    Thread.sleep(10); //休眠10ms
-                } catch (InterruptedException e) {
-                    TXLog.w(TAG, "The thread has been interrupted");
-                }
-            }
-        }
-    }
-
-    /**
-     * 添加日志到队列中，如果队列空间不足则上传
-     * @param log 日志
-     * @return 添加成功，返回true，添加失败，返回false
-     */
-    boolean appendToLogDeque(String log) {
-        try {
-            logDeque.add(log);
-            mMqttLogCallBack.printDebug(String.format("Add log to log Deque! %s",log).replace("\n\f",""));
-            return true;
-        } catch (Exception e) {
-            mMqttLogCallBack.printDebug(String.format("Add log to log Deque failed! %s" ,log).replace("\n\f",""));
-            return false;
-        }
-    }
-
-    /**
-     * 触发一次日志上传
-     */
-    void uploadMqttLog() {
-        mUploadFlag = true;
-    }
-
-    /**
-     * 上传离线日志
-     */
-    void uploadOfflineLog() {
-        String offlineLog = mMqttLogCallBack.readOfflineLog();
-        if (offlineLog != null) {
-            appendToLogDeque(offlineLog);
-            mMqttLogCallBack.delOfflineLog();
-        }
-        mUploadFlag = true;
-    }
-
-    /**
-     * 清空队列
-     */
-    void resetLogDeque() {
-        logDeque.clear();
-    }
-
-}
Index: iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXDisconnectedBufferOptions.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXDisconnectedBufferOptions.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXDisconnectedBufferOptions.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,4 +0,0 @@
-// parcelable TXDisconnectedBufferOptions.aidl
-package com.tencent.iot.hub.device.android.service;
-
-parcelable TXDisconnectedBufferOptions;
Index: iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXShadowClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXShadowClient.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXShadowClient.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,341 +0,0 @@
-package com.tencent.iot.hub.device.android.service;
-
-import android.content.Context;
-import android.content.ServiceConnection;
-import android.os.RemoteException;
-
-import com.tencent.iot.hub.device.android.core.shadow.DeviceProperty;
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-import com.tencent.iot.hub.device.java.core.common.Status;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants;
-import com.tencent.iot.hub.device.java.core.mqtt.TXOTACallBack;
-import com.tencent.iot.hub.device.java.core.mqtt.TXOTAConstansts;
-import com.tencent.iot.hub.device.java.core.shadow.TXShadowActionCallBack;
-
-import java.util.List;
-
-/**
- * Shadow远程服务客户端
- */
-public class TXShadowClient {
-
-    private static final String TAG = TXShadowClient.class.getSimpleName();
-
-    /**
-     * mqtt客户端，ShadowClient所有功能均通过该成员变量进行
-     */
-    private TXMqttClient mMqttClient = null;
-
-    /**
-     * shadowAction监听器，用于跨进程调用
-     */
-    private ITXShadowActionListener mShadowActionListener = null;
-
-    /**
-     * shadowAction回调接口，用于外部回调
-     */
-    private TXShadowActionCallBack mShadowActionCallBack = null;
-
-    public TXShadowClient() {
-        this.mMqttClient = new TXMqttClient();
-    }
-
-    public TXShadowClient(TXMqttClient mMqttClient) {
-        this.mMqttClient = mMqttClient;
-    }
-
-    /**
-     * 设置ShadowAction回调接口
-     *
-     * @param mShadowActionCallBack shadowAction回调接口
-     * @return
-     */
-    public TXShadowClient setShadowActionCallBack(TXShadowActionCallBack mShadowActionCallBack) {
-        this.mShadowActionCallBack = mShadowActionCallBack;
-        return this;
-    }
-
-    /**
-     * 设置远程服务连接回调接口
-     *
-     * @param serviceConnection 远程服务连接回调接口
-     * @return
-     */
-    public TXShadowClient setServiceConnection(ServiceConnection serviceConnection) {
-        mMqttClient.setServiceConnection(serviceConnection);
-        return this;
-    }
-
-    /**
-     * 获取Mqtt客户端实例
-     *
-     * @return
-     */
-    public TXMqttClient getMqttClient() {
-        return mMqttClient;
-    }
-
-    /**
-     * 初始化远程服务客户端
-     *
-     * @param context
-     * @param clientOptions 客户端选项
-     */
-    public void init(Context context, TXMqttClientOptions clientOptions) {
-        initListener();
-        mMqttClient.init(context, clientOptions, mShadowActionListener);
-    }
-
-    /**
-     * 开启远程服务
-     */
-    public void startRemoteService() {
-        mMqttClient.startRemoteService();
-    }
-
-    /**
-     * 停止远程服务
-     */
-    public void stopRemoteService() {
-        mMqttClient.stopRemoteService();
-    }
-
-    /**
-     * 设置断连状态buffer缓冲区
-     *
-     * @param bufferOpts
-     */
-    public void setBufferOpts(TXDisconnectedBufferOptions bufferOpts) {
-        mMqttClient.setBufferOpts(bufferOpts);
-    }
-
-    /**
-     * 与云端建立连接，结果通过回调函数通知
-     *
-     * @param connectOptions 连接参数
-     * @param userContext    用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status connect(TXMqttConnectOptions connectOptions, Object userContext) {
-        connectOptions.setUseShadow(true);
-        return mMqttClient.connect(connectOptions, userContext);
-    }
-
-    /**
-     * 断开连接请求，结果通过回调函数通知。
-     *
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status disConnect(Object userContext) {
-        return mMqttClient.disConnect(userContext);
-    }
-
-    /**
-     * 获取连接状态
-     *
-     * @return 连接状态
-     */
-    public TXMqttConstants.ConnectStatus getConnectStatus() {
-        TXMqttConstants.ConnectStatus status = TXMqttConstants.ConnectStatus.kDisconnected;
-        try {
-            String statusStr = mMqttClient.mRemoteServer.getConnectStatus();
-            status = Status.valueOf(TXMqttConstants.ConnectStatus.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[getConnectStatus] failed!");
-        }
-        return status;
-    }
-
-    /**
-     * 获取设备影子
-     */
-    public Status get(Object userContext) {
-        Status status = Status.ERROR;
-        try {
-            long requestId = mMqttClient.addUserContext(userContext);
-            String statusStr = mMqttClient.mRemoteServer.getShadow(requestId);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[getShadow] failed!");
-        }
-        return status;
-    }
-
-    /**
-     * 更新设备属性信息，结果通过回调函数通知。
-     *
-     * @param devicePropertyList 需要更新的设备属性集
-     * @param userContext        用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status update(List<DeviceProperty> devicePropertyList, Object userContext) {
-        Status status = Status.ERROR;
-        try {
-            long requestId = mMqttClient.addUserContext(userContext);
-            String statusStr = mMqttClient.mRemoteServer.updateShadow(devicePropertyList, requestId);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[updateShadow] failed!");
-        }
-        return status;
-    }
-
-    /**
-     * 注册设备属性
-     *
-     * @param deviceProperty
-     */
-    public void registerProperty(DeviceProperty deviceProperty) {
-        try {
-            mMqttClient.mRemoteServer.registerDeviceProperty(deviceProperty);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[registerDeviceProperty] failed!");
-        }
-    }
-
-    /**
-     * 取消注册设备属性
-     *
-     * @param deviceProperty
-     */
-    public void unRegisterProperty(DeviceProperty deviceProperty) {
-        try {
-            mMqttClient.mRemoteServer.unRegisterDeviceProperty(deviceProperty);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[unRegisterDeviceProperty] failed!");
-        }
-    }
-
-    /**
-     * 更新delta信息后，上报空的desired信息，通知服务器不再发送delta消息。
-     *
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportNullDesiredInfo() {
-        return reportNullDesiredInfo(null);
-    }
-
-    /**
-     * 更新delta信息后，上报空的desired信息，通知服务器不再发送delta消息。
-     *
-     * @param reportJsonDoc 用户上报的JSON内容
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportNullDesiredInfo(String reportJsonDoc) {
-        Status status = Status.ERROR;
-        try {
-            String statusStr = mMqttClient.mRemoteServer.reportNullDesiredInfo(reportJsonDoc);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[reportNullDesiredInfo] failed!");
-        }
-        return status;
-    }
-
-    /**
-     * 释放资源
-     */
-    public void clear() {
-        mMqttClient.clear();
-    }
-
-    /**
-     * 初始化OTA功能。
-     *
-     * @param storagePath OTA升级包存储路径(调用者必确保路径已存在，并且具有写权限)
-     * @param callback    OTA事件回调
-     */
-    public void initOTA(String storagePath, TXOTACallBack callback) {
-
-        mMqttClient.initOTA(storagePath, callback);
-    }
-
-    /**
-     * 上报设备当前版本信息到后台服务器。
-     *
-     * @param currentFirmwareVersion 设备当前版本信息
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportCurrentFirmwareVersion(String currentFirmwareVersion)  {
-
-        return mMqttClient.reportCurrentFirmwareVersion(currentFirmwareVersion);
-    }
-
-    /**
-     * 上报设备升级状态到后台服务器。
-     *
-     * @param state
-     * @param resultCode
-     * @param resultMsg
-     * @param version
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportOTAState(TXOTAConstansts.ReportState state, int resultCode, String resultMsg, String version) {
-
-        return mMqttClient.reportOTAState(state, resultCode, resultMsg, version);
-    }
-
-    /**
-     * 初始化监听器
-     */
-    private void initListener() {
-        mShadowActionListener = new ITXShadowActionListener.Stub() {
-            @Override
-            public void onRequestCallback(String type, int result, String document) throws RemoteException {
-                TXLog.d(TAG, "onRequestCallback, type[%s], result[%d], document[%s]", type, result, document);
-                if (null != mShadowActionCallBack) {
-                    mShadowActionCallBack.onRequestCallback(type, result, document);
-                }
-            }
-
-            @Override
-            public void onDevicePropertyCallback(String propertyJSONDocument, List<DeviceProperty> devicePropertyList) throws RemoteException {
-                TXLog.d(TAG, "onDevicePropertyCallback, propertyJSONDocument[%s], devicePropertyList size[%d]",
-                        propertyJSONDocument, devicePropertyList.size());
-                for (DeviceProperty deviceProperty : devicePropertyList) {
-                    TXLog.d(TAG, deviceProperty.toString());
-                }
-                if (null != mShadowActionCallBack) {
-                    mShadowActionCallBack.onDevicePropertyCallback(propertyJSONDocument, devicePropertyList);
-                }
-            }
-
-            @Override
-            public void onPublishCompleted(String status, TXMqttToken token, long userContextId, String errMsg) throws RemoteException {
-                TXLog.d(TAG, "onPublishCompleted, status[%s], token[%s], errMsg[%s]", status, token, errMsg);
-                if (null != mShadowActionCallBack) {
-                    mShadowActionCallBack.onPublishCompleted(Status.valueOf(Status.class, status), token.transToMqttToken(),
-                            mMqttClient.getUserContext(Long.valueOf(userContextId)), errMsg);
-                }
-            }
-
-            @Override
-            public void onSubscribeCompleted(String status, TXMqttToken token, long userContextId, String errMsg) throws RemoteException {
-                TXLog.d(TAG, "onSubscribeCompleted, status[%s], token[%s], errMsg[%s]", status, token, errMsg);
-                if (null != mShadowActionCallBack) {
-                    mShadowActionCallBack.onSubscribeCompleted(Status.valueOf(Status.class, status), token.transToMqttToken(),
-                            mMqttClient.getUserContext(Long.valueOf(userContextId)), errMsg);
-                }
-            }
-
-            @Override
-            public void onUnSubscribeCompleted(String status, TXMqttToken token, long userContextId, String errMsg) throws RemoteException {
-                TXLog.d(TAG, "onUnSubscribeCompleted, status[%s], token[%s], errMsg[%s]", status, token, errMsg);
-                if (null != mShadowActionCallBack) {
-                    mShadowActionCallBack.onUnSubscribeCompleted(Status.valueOf(Status.class, status), token.transToMqttToken(),
-                            mMqttClient.getUserContext(Long.valueOf(userContextId)), errMsg);
-                }
-            }
-
-            @Override
-            public void onMessageReceived(String topic, TXMqttMessage message) throws RemoteException {
-                TXLog.d(TAG, "onMessageReceived, topic[%s], message[%s]", topic, message);
-                if (null != mShadowActionCallBack) {
-                    mShadowActionCallBack.onMessageReceived(topic, message.transToMqttMessage());
-                }
-            }
-        };
-    }
-
-}
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/shadow/TXShadowConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/shadow/TXShadowConnection.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/shadow/TXShadowConnection.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,324 +0,0 @@
-package com.tencent.iot.hub.device.android.core.shadow;
-
-import android.content.Context;
-
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;
-import com.tencent.iot.hub.device.android.core.mqtt.TXMqttConnection;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants;
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-import com.tencent.iot.hub.device.java.core.common.Status;
-import com.tencent.iot.hub.device.java.core.shadow.TXShadowActionCallBack;
-import com.tencent.iot.hub.device.java.core.shadow.TXShadowConstants;
-
-import org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions;
-import org.eclipse.paho.client.mqttv3.IMqttToken;
-import org.eclipse.paho.client.mqttv3.MqttClientPersistence;
-import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
-import org.eclipse.paho.client.mqttv3.MqttMessage;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import static com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants.MQTT_SERVER_PORT_TLS;
-import static com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants.QCLOUD_IOT_MQTT_DIRECT_DOMAIN;
-
-
-public class TXShadowConnection {
-
-    public static final String TAG = TXShadowConnection.class.getName();
-
-    /**
-     * clientToken formatter
-     */
-    private static final String CLIENT_TOKEN = "%s-%d";
-
-    private Context mContext = null;
-
-    private com.tencent.iot.hub.device.java.core.shadow.TXShadowConnection mTXShadowConn = null;
-
-    /**
-     * shadow action回调接口
-     */
-    private TXShadowActionCallBack mShadowActionCallback = null;
-
-    /**
-     * mqtt 连接实例
-     */
-    private TXMqttConnection mMqttConnection = null;
-
-
-    private int mQos = TXMqttConstants.QOS0;
-
-
-    /**
-     * 保存用户注册的属性
-     */
-    private HashMap<String, DeviceProperty> mRegisterPropertyMap = new HashMap<>();
-
-    /**
-     * 是否已经成功订阅OPERATION_RESULT_TOPIC
-     */
-    private boolean mIsOperationResultSubscribeSuccess = false;
-
-    /**
-     * 文档版本号
-     */
-    private int mDocumentVersion = 0;
-
-    private String OPERATION_TOPIC = null;
-    private String OPERATION_RESULT_TOPIC = null;
-
-    private static final int MAX_MESSAGE_ID = 65535;
-    private int mPublishMessageId = 0;
-
-    /**
-     * @param context    用户上下文（这个参数在回调函数时透传给用户）
-     * @param productID  产品名
-     * @param deviceName 设备名，唯一
-     * @param secretKey  密钥
-     * @param callBack   连接、消息发布、消息订阅回调接口
-     */
-    public TXShadowConnection(Context context, String productID, String deviceName, String secretKey, TXShadowActionCallBack callBack) {
-        this(context, productID, deviceName, secretKey, null, callBack);
-    }
-
-    /**
-     * @param context    用户上下文（这个参数在回调函数时透传给用户）
-     * @param productID  产品名
-     * @param deviceName 设备名，唯一
-     * @param secretKey  密钥
-     * @param bufferOpts 发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用
-     * @param callBack   连接、消息发布、消息订阅回调接口
-     */
-    public TXShadowConnection(Context context, String productID, String deviceName, String secretKey,
-                              DisconnectedBufferOptions bufferOpts, TXShadowActionCallBack callBack) {
-        this(context, productID, deviceName, secretKey, bufferOpts, null, callBack);
-    }
-
-    /**
-     * @param context           用户上下文（这个参数在回调函数时透传给用户）
-     * @param productID         产品名
-     * @param deviceName        设备名，唯一
-     * @param secretKey         密钥
-     * @param bufferOpts        发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用
-     * @param clientPersistence 消息永久存储
-     * @param callBack          连接、消息发布、消息订阅回调接口
-     */
-    public TXShadowConnection(Context context, String productID, String deviceName, String secretKey,
-                              DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence, TXShadowActionCallBack callBack) {
-        this(context, null, productID, deviceName, secretKey, bufferOpts, clientPersistence, callBack);
-    }
-
-    /**
-     * Shadow连接器构造器
-     *
-     * @param context           用户上下文（这个参数在回调函数时透传给用户）
-     * @param serverURI         服务器URI
-     * @param productID         产品名
-     * @param deviceName        设备名，唯一
-     * @param secretKey         密钥
-     * @param bufferOpts        发布消息缓存buffer，当发布消息时MQTT连接非连接状态时使用
-     * @param clientPersistence 消息永久存储
-     * @param callBack          连接、消息发布、消息订阅回调接口
-     */
-    public TXShadowConnection(Context context, String serverURI, String productID, String deviceName, String secretKey,
-                              DisconnectedBufferOptions bufferOpts, MqttClientPersistence clientPersistence, TXShadowActionCallBack callBack) {
-        this.mContext = context;
-        this.mShadowActionCallback = callBack;
-
-        mTXShadowConn = new com.tencent.iot.hub.device.java.core.shadow.TXShadowConnection(serverURI, productID, deviceName, secretKey,
-                bufferOpts, clientPersistence, callBack);
-        mMqttConnection = new TXMqttConnection(context, serverURI, productID, deviceName, secretKey,
-                bufferOpts, clientPersistence, mTXShadowConn.mShadowUponMqttCallBack);
-
-        OPERATION_TOPIC = "$shadow/operation/" + productID + "/" + mMqttConnection.mDeviceName;
-        OPERATION_RESULT_TOPIC = "$shadow/operation/result/" + productID + "/" + mMqttConnection.mDeviceName;
-
-        mPublishMessageId = new Random().nextInt(MAX_MESSAGE_ID);
-
-        mTXShadowConn.setMqttConnection(mMqttConnection);
-    }
-
-    /**
-     * 获取TXMqttConnection句柄
-     */
-    public TXMqttConnection getMqttConnection() {
-        return (TXMqttConnection) mTXShadowConn.getMqttConnection();
-    }
-
-
-    /**
-     * 设置断连状态buffer缓冲区
-     *
-     * @param bufferOpts 缓冲参数
-     */
-    public void setBufferOpts(DisconnectedBufferOptions bufferOpts) {
-        mTXShadowConn.setBufferOpts(bufferOpts);
-    }
-
-    /**
-     * 与云端建立连接，结果通过回调函数通知。
-     *
-     * @param options     连接参数
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public synchronized Status connect(MqttConnectOptions options, Object userContext) {
-        return mTXShadowConn.connect(options, userContext);
-    }
-
-    /**
-     * 断开连接请求，结果通过回调函数通知。
-     *
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status disConnect(Object userContext) {
-        return mTXShadowConn.disConnect(userContext);
-    }
-
-    /**
-     * 获取连接状态
-     *
-     * @return 连接状态
-     */
-    public TXMqttConstants.ConnectStatus getConnectStatus() {
-        return mTXShadowConn.getConnectStatus();
-    }
-
-    /**
-     * 订阅普通主题
-     *
-     * @param topicName 主题名
-     * @param qos QOS等级
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status subscribe(String topicName, int qos, Object userContext) {
-        Status status;
-        status = checkMqttStatus();
-        if (status != Status.OK) {
-            return status;
-        }
-        TXLog.d(TAG, "sub topic is " + topicName);
-        // 订阅主题
-        return mMqttConnection.subscribe(topicName, qos, userContext);
-    }
-
-    /**
-     * 取消订阅普通主题
-     *
-     * @param topicName 主题名
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status unSubscribe(String topicName, Object userContext) {
-        Status status;
-        status = checkMqttStatus();
-        if (status != Status.OK) {
-            return status;
-        }
-        TXLog.d(TAG, "Start to unSubscribe" + topicName);
-        // 取消订阅主题
-        return mMqttConnection.unSubscribe(topicName, userContext);
-    }
-
-    /**
-     * 实现普通topic的发布
-     *
-     * @param topicName    topic
-     * @param message     发布的消息
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status publish(String topicName, MqttMessage message, Object userContext) {
-        //判断MQTT状态
-        Status status;
-        status = checkMqttStatus();
-        if (status != Status.OK) {
-            return status;
-        }
-        TXLog.d(TAG, "pub topic " + topicName + message);
-        // 发布主题
-        return mMqttConnection.publish(topicName, message, userContext);
-    }
-
-    /**
-     * 更新设备属性信息，结果通过回调函数通知。
-     *
-     * @param devicePropertyList 需要更新的设备属性集
-     * @param userContext        用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status update(List<DeviceProperty> devicePropertyList, Object userContext) {
-        return mTXShadowConn.update(devicePropertyList, userContext);
-    }
-
-    /**
-     * 更新delta信息后，上报空的desired信息，通知服务器不再发送delta消息。
-     *
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportNullDesiredInfo() {
-        return mTXShadowConn.reportNullDesiredInfo();
-    }
-
-    /**
-     * 更新delta信息后，上报空的desired信息，通知服务器不再发送delta消息。
-     *
-     * @param reportJsonDoc 用户上报的JSON内容
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportNullDesiredInfo(String reportJsonDoc) {
-        return mTXShadowConn.reportNullDesiredInfo(reportJsonDoc);
-    }
-
-    /**
-     * 获取设备影子文档，结果通过回调函数通知。
-     *
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status get(Object userContext) {
-        return mTXShadowConn.get(userContext);
-    }
-
-    /**
-     * 注册当前设备的设备属性
-     *
-     * @param property 设备属性
-     */
-    public void registerProperty(DeviceProperty property) {
-        mTXShadowConn.registerProperty(property);
-    }
-
-    /**
-     * 取消注册当前设备的指定属性
-     *
-     * @param property
-     */
-    public void unRegisterProperty(DeviceProperty property) {
-        mTXShadowConn.unRegisterProperty(property);
-    }
-
-    /**
-     * 检查mqtt状态
-     *
-     * @return 当前状态
-     */
-    private Status checkMqttStatus() {
-        if (null == mMqttConnection || mMqttConnection.getConnectStatus() != TXMqttConstants.ConnectStatus.kConnected) {
-            TXLog.e(TAG, "mqtt is disconnected!");
-            return Status.MQTT_NO_CONN;
-        }
-
-        return Status.OK;
-    }
-}
Index: iot_service/src/test/java/com/qcloud/iot/service/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/test/java/com/qcloud/iot/service/ExampleUnitTest.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/test/java/com/qcloud/iot/service/ExampleUnitTest.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,17 +0,0 @@
-package com.qcloud.iot.service;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-/**
- * Example local unit test, which will execute on the development machine (host).
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() throws Exception {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
Index: iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttConnectOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttConnectOptions.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttConnectOptions.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,182 +0,0 @@
-package com.tencent.iot.hub.device.android.service;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
-
-/**
- * 该类负责序列化MqttConnectOptions相关信息
- */
-
-public class TXMqttConnectOptions implements Parcelable {
-
-    private int mConnectionTimeout = MqttConnectOptions.CONNECTION_TIMEOUT_DEFAULT;
-    private int mKeepAliveInterval = MqttConnectOptions.KEEP_ALIVE_INTERVAL_DEFAULT;
-    private boolean mAutomaticReconnect = false;
-    private boolean mCleanSession = MqttConnectOptions.CLEAN_SESSION_DEFAULT;
-
-    /**
-     * 是否使用shadow
-     */
-    private boolean mUseShadow = false;
-
-    /**
-     * 是否采用非对称加密
-     */
-    private boolean mAsymcEncryption = true;
-
-    /**
-     * 设备证书名
-     */
-    private String mDeviceCertName;
-
-    /**
-     * 设备私钥文件名
-     */
-    private String mDeviceKeyName;
-
-    /**
-     * 设备密码
-     */
-    private String mSecretKey;
-
-    public static final Creator<TXMqttConnectOptions> CREATOR = new Creator<TXMqttConnectOptions>() {
-        @Override
-        public TXMqttConnectOptions createFromParcel(Parcel in) {
-            return new TXMqttConnectOptions(in);
-        }
-
-        @Override
-        public TXMqttConnectOptions[] newArray(int size) {
-            return new TXMqttConnectOptions[size];
-        }
-    };
-
-    public TXMqttConnectOptions() {
-    }
-
-    public TXMqttConnectOptions(int mConnectionTimeout, int mKeepAliveInterval, boolean mAutomaticReconnect, boolean mCleanSession,
-                                boolean mAsymcEncryption, String mDeviceCertName, String mDeviceKeyName, String mSecretKey) {
-        this.mConnectionTimeout = mConnectionTimeout;
-        this.mKeepAliveInterval = mKeepAliveInterval;
-        this.mAutomaticReconnect = mAutomaticReconnect;
-        this.mCleanSession = mCleanSession;
-        this.mAsymcEncryption = mAsymcEncryption;
-        this.mDeviceCertName = mDeviceCertName;
-        this.mDeviceKeyName = mDeviceKeyName;
-        this.mSecretKey = mSecretKey;
-    }
-
-    protected TXMqttConnectOptions(Parcel in) {
-        mConnectionTimeout = in.readInt();
-        mKeepAliveInterval = in.readInt();
-        mDeviceCertName = in.readString();
-        mDeviceKeyName = in.readString();
-        mSecretKey = in.readString();
-        boolean[] booleanArray = new boolean[4];
-        in.readBooleanArray(booleanArray);
-        mAutomaticReconnect = booleanArray[0];
-        mUseShadow = booleanArray[1];
-        mCleanSession = booleanArray[2];
-        mAsymcEncryption = booleanArray[3];
-    }
-
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel out, int flag) {
-        out.writeInt(mConnectionTimeout);
-        out.writeInt(mKeepAliveInterval);
-        out.writeString(mDeviceCertName);
-        out.writeString(mDeviceKeyName);
-        out.writeString(mSecretKey);
-        boolean[] booleanArray = new boolean[]{mAutomaticReconnect, mUseShadow, mCleanSession, mAsymcEncryption};
-        out.writeBooleanArray(booleanArray);
-    }
-
-    public int getConnectionTimeout() {
-        return mConnectionTimeout;
-    }
-
-    public TXMqttConnectOptions setConnectionTimeout(int mConnectionTimeout) {
-        this.mConnectionTimeout = mConnectionTimeout;
-        return this;
-    }
-
-    public int getKeepAliveInterval() {
-        return mKeepAliveInterval;
-    }
-
-    public TXMqttConnectOptions setKeepAliveInterval(int mKeepAliveInterval) {
-        this.mKeepAliveInterval = mKeepAliveInterval;
-        return this;
-    }
-
-    public boolean isAutomaticReconnect() {
-        return mAutomaticReconnect;
-    }
-
-    public TXMqttConnectOptions setAutomaticReconnect(boolean mAutomaticReconnect) {
-        this.mAutomaticReconnect = mAutomaticReconnect;
-        return this;
-    }
-
-    public boolean isCleanSession() {
-        return mCleanSession;
-    }
-
-    public TXMqttConnectOptions setCleanSession(boolean mCleanSession) {
-        this.mCleanSession = mCleanSession;
-        return this;
-    }
-
-    public boolean isAsymcEncryption() {
-        return mAsymcEncryption;
-    }
-
-    public TXMqttConnectOptions setAsymcEncryption(boolean mAsymcEncryption) {
-        this.mAsymcEncryption = mAsymcEncryption;
-        return this;
-    }
-
-    public String getDeviceCertName() {
-        return mDeviceCertName;
-    }
-
-    public TXMqttConnectOptions setDeviceCertName(String mDeviceCertName) {
-        this.mDeviceCertName = mDeviceCertName;
-        return this;
-    }
-
-    public String getDeviceKeyName() {
-        return mDeviceKeyName;
-    }
-
-    public TXMqttConnectOptions setDeviceKeyName(String mDeviceKeyName) {
-        this.mDeviceKeyName = mDeviceKeyName;
-        return this;
-    }
-
-    public String getSecretKey() {
-        return mSecretKey;
-    }
-
-    public TXMqttConnectOptions setSecretKey(String secretKey) {
-        this.mSecretKey = secretKey;
-        return this;
-    }
-
-    protected boolean isUseShadow() {
-        return mUseShadow;
-    }
-
-    protected TXMqttConnectOptions setUseShadow(boolean mUseShadow) {
-        this.mUseShadow = mUseShadow;
-        return this;
-    }
-}
Index: iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttClient.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttClient.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,675 +0,0 @@
-package com.tencent.iot.hub.device.android.service;
-
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.ServiceConnection;
-import android.os.IBinder;
-import android.os.RemoteException;
-
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-import com.tencent.iot.hub.device.java.core.common.Status;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;
-import com.tencent.iot.hub.device.java.core.mqtt.TXOTACallBack;
-import com.tencent.iot.hub.device.java.core.mqtt.TXOTAConstansts;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicLong;
-
-/**
- * mqtt远程服务客户端
- */
-
-public class TXMqttClient {
-
-    private static final String TAG = TXMqttClient.class.getSimpleName();
-
-    private Context mContext = null;
-
-    /**
-     * mqtt客户端选项
-     */
-    private TXMqttClientOptions mMqttClientOptions = null;
-
-    private Intent mServiceIntent = null;
-
-    /**
-     * 内部service连接回调接口
-     */
-    private ServiceConnection mInternalServiceConnection = null;
-
-    /**
-     * 外部service连接回调接口，用于回调service连接状态，便于外部进行mqtt操作
-     */
-    private ServiceConnection mExternalServiceConnection = null;
-
-    /**
-     * mqttAction监听器，用于跨进程调用
-     */
-    private ITXMqttActionListener mMqttActionListener = null;
-
-    /**
-     * mqttAction回调接口，用于外部回调
-     */
-    private TXMqttActionCallBack mMqttActionCallBack = null;
-
-    private AtomicLong mRequestId = null;
-
-    /**
-     * 因userContext在外部定义，sdk内部不便于实现序列化。
-     * 因此在客户端保存requestId与userContext的映射关系，在跨进程调用时通过requestId代替userContext进行传递。
-     */
-    private Map<Long, Object> mUserContextMap = null;
-
-    /**
-     * mqtt远程服务
-     */
-    protected ITXMqttService mRemoteServer = null;
-
-    private TXOTACallBack mOTACallback = null;
-
-    private ITXOTAListener mOTAListener = new ITXOTAListener.Stub() {
-        @Override
-        public void onReportFirmwareVersion(int resultCode, String version, String resultMsg) {
-            if (mOTACallback != null) {
-                mOTACallback.onReportFirmwareVersion(resultCode, version, resultMsg);
-            }
-        }
-
-        @Override
-        public void onDownloadProgress(int percent, String version) throws RemoteException {
-            if (mOTACallback != null) {
-                mOTACallback.onDownloadProgress(percent, version);
-            }
-        }
-
-        @Override
-        public void onDownloadCompleted(String outputFile, String version) throws RemoteException {
-            if (mOTACallback != null) {
-                mOTACallback.onDownloadCompleted(outputFile, version);
-            }
-        }
-
-        @Override
-        public void onDownloadFailure(int errCode, String version) throws RemoteException {
-            if (mOTACallback != null) {
-                mOTACallback.onDownloadFailure(errCode, version);
-            }
-        }
-    };
-
-    public TXMqttClient() {
-    }
-
-    /**
-     * 设置MqttAction回调接口
-     *
-     * @param mMqttActionCallBack mqttAction回调接口
-     * @return
-     */
-    public TXMqttClient setMqttActionCallBack(TXMqttActionCallBack mMqttActionCallBack) {
-        this.mMqttActionCallBack = mMqttActionCallBack;
-        return this;
-    }
-
-    /**
-     * 设置远程服务连接回调接口
-     *
-     * @param serviceConnection 远程服务连接回调接口
-     * @return
-     */
-    public TXMqttClient setServiceConnection(ServiceConnection serviceConnection) {
-        mExternalServiceConnection = serviceConnection;
-        return this;
-    }
-
-    /**
-     * 初始化远程服务客户端
-     *
-     * @param context
-     * @param clientOptions 客户端选项
-     */
-    public void init(Context context, TXMqttClientOptions clientOptions) {
-
-        internalInit(context, clientOptions);
-
-        mInternalServiceConnection = new ServiceConnection() {
-
-            @Override
-            public void onServiceDisconnected(ComponentName name) {
-                TXLog.d(TAG, "onServiceDisconnected, ComponentName[%s]", name.getClassName());
-                mRemoteServer = null;
-                if (null != mExternalServiceConnection) {
-                    mExternalServiceConnection.onServiceDisconnected(name);
-                }
-            }
-
-            @Override
-            public void onServiceConnected(ComponentName name, IBinder service) {
-                TXLog.d(TAG, "onServiceConnected, ComponentName[%s]", name.getClassName());
-
-                if (null != mExternalServiceConnection) {
-                    mExternalServiceConnection.onServiceConnected(name, null);
-                }
-
-                // 再次开启远程服务时，会回调ITXMqttActionListener.aidl的onServiceStartedCallback()接口，用于返回服务已开启状态
-                // 同时该接口会调用mInternalServiceConnection的onServiceConnected()接口，此时传递的IBinder为null，因此需判断service是否为空。
-                if (null == service) {
-                    return;
-                }
-
-                mRemoteServer = ITXMqttService.Stub.asInterface(service);
-
-                try {
-                    mRemoteServer.registerMqttActionListener(mMqttActionListener);
-                    mRemoteServer.initDeviceInfo(mMqttClientOptions);
-                } catch (RemoteException e) {
-                    TXLog.e(TAG, e, "invoke remote service failed!");
-                }
-            }
-        };
-    }
-
-    /**
-     * 初始化远程服务客户端（内部接口不对外，仅供TXShadowClient调用）
-     *
-     * @param context
-     * @param clientOptions        客户端选项
-     * @param shadowActionListener shadowAction监听器
-     */
-    protected void init(Context context, TXMqttClientOptions clientOptions, final ITXShadowActionListener shadowActionListener) {
-
-        internalInit(context, clientOptions);
-
-        mInternalServiceConnection = new ServiceConnection() {
-
-            @Override
-            public void onServiceDisconnected(ComponentName name) {
-                TXLog.d(TAG, "onServiceDisconnected, ComponentName[%s]", name.getClassName());
-                mRemoteServer = null;
-
-                if (null != mExternalServiceConnection) {
-                    mExternalServiceConnection.onServiceDisconnected(name);
-                }
-            }
-
-            @Override
-            public void onServiceConnected(ComponentName name, IBinder service) {
-                TXLog.d(TAG, "onServiceConnected, ComponentName[%s]", name.getClassName());
-
-                // 再次开启远程服务时，会回调ITXMqttActionListener.aidl的onServiceStartedCallback()接口，用于返回服务已开启状态
-                // 同时该接口会调用mInternalServiceConnection的onServiceConnected()接口，此时传递的IBinder为null，因此需判断service是否为空。
-                if (null == service) {
-                    if (null != mExternalServiceConnection) {
-                        mExternalServiceConnection.onServiceConnected(name, null);
-                    }
-
-                    return;
-                }
-
-                mRemoteServer = ITXMqttService.Stub.asInterface(service);
-
-                try {
-                    mRemoteServer.registerMqttActionListener(mMqttActionListener);
-                    mRemoteServer.registerShadowActionListener(shadowActionListener);
-                    mRemoteServer.initDeviceInfo(mMqttClientOptions);
-
-                } catch (RemoteException e) {
-                    TXLog.e(TAG, e, "invoke remote service failed!");
-                }
-
-                if (null != mExternalServiceConnection) {
-                    mExternalServiceConnection.onServiceConnected(name, null);
-                }
-            }
-        };
-
-    }
-
-    /**
-     * 开启远程服务
-     */
-    public void startRemoteService() {
-        if (null == mContext) {
-            TXLog.e(TAG, "TXMqttClient is not initialized!");
-            return;
-        }
-
-        if (null == mServiceIntent) {
-            mServiceIntent = new Intent(mContext, TXMqttService.class);
-        }
-
-        try {
-            mContext.startService(mServiceIntent);
-            mContext.bindService(mServiceIntent, mInternalServiceConnection, Context.BIND_AUTO_CREATE);
-        } catch (Exception e) {
-            TXLog.e(TAG, e, "start remote service failed!");
-        }
-    }
-
-    /**
-     * 停止远程服务
-     */
-    public void stopRemoteService() {
-        if (null == mContext || null == mRemoteServer) {
-            TXLog.e(TAG, "remote service is not start!");
-            return;
-        }
-
-        try {
-            mContext.unbindService(mInternalServiceConnection);
-            mContext.stopService(mServiceIntent);
-        } catch (Exception e) {
-            TXLog.e(TAG, e, "stop and unbind remote service is failed!");
-        }
-    }
-
-    /**
-     * 设置断连状态buffer缓冲区
-     *
-     * @param bufferOpts
-     */
-    public void setBufferOpts(TXDisconnectedBufferOptions bufferOpts) {
-        if (null == bufferOpts) {
-            return;
-        }
-        try {
-            mRemoteServer.setBufferOpts(bufferOpts);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[setBufferOpts] failed!");
-        }
-    }
-
-    /**
-     * 连接MQTT服务器，结果通过回调函数通知。
-     *
-     * @param connectOptions 连接参数
-     * @param userContext    用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status connect(TXMqttConnectOptions connectOptions, Object userContext) {
-        Status status = Status.ERROR;
-        if (null == mRemoteServer) {
-            TXLog.e(TAG, "remote service is not start!");
-            return status;
-        }
-        long requestId = mRequestId.getAndIncrement();
-        mUserContextMap.put(requestId, userContext);
-
-        try {
-            String statusStr = mRemoteServer.connect(connectOptions, requestId);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[connect] failed!");
-        }
-
-        return status;
-    }
-
-    /**
-     * 重新连接, 结果通过回调函数通知。
-     *
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reconnect() {
-        Status status = Status.ERROR;
-        if (null == mRemoteServer) {
-            TXLog.e(TAG, "remote service is not start!");
-            return status;
-        }
-
-        try {
-            String statusStr = mRemoteServer.reconnect();
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[reconnect] failed!");
-        }
-
-        return status;
-    }
-
-    /**
-     * MQTT断连，结果通过回调函数通知。
-     *
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status disConnect(Object userContext) {
-        return disConnect(0, userContext);
-    }
-
-    /**
-     * MQTT断连, 结果通过回调函数通知。
-     *
-     * @param timeout     等待时间（必须大于0）。单位：毫秒
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status disConnect(long timeout, Object userContext) {
-        Status status = Status.ERROR;
-        if (null == mRemoteServer) {
-            TXLog.e(TAG, "remote service is not start!");
-            return status;
-        }
-        long requestId = mRequestId.getAndIncrement();
-        mUserContextMap.put(requestId, userContext);
-        try {
-            String statusStr = mRemoteServer.disConnect(timeout, requestId);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[disConnect] failed!");
-        }
-        return status;
-    }
-
-    /**
-     * 订阅广播Topic, 结果通过回调函数通知。
-     * 广播Topic格式: $broadcast/rxd/${ProductId}/${DeviceName}
-     *
-     * @param qos         QOS等级
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status subscribeBroadcastTopic(final int qos, Object userContext) {
-        Status status = Status.ERROR;
-        if (null == mRemoteServer) {
-            TXLog.e(TAG, "remote service is not start!");
-            return status;
-        }
-        long requestId = mRequestId.getAndIncrement();
-        String broadCastTopic = String.format("$broadcast/rxd/%s/%s", mMqttClientOptions.getProductId(),
-                mMqttClientOptions.getDeviceName());
-        try {
-            String statusStr = mRemoteServer.subscribe(broadCastTopic, qos, requestId);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[subscribe] failed!");
-        }
-        return status;
-    }
-
-    /**
-     * 订阅Topic, 结果通过回调函数通知。
-     *
-     * @param topic       topic名称
-     * @param qos         QOS等级
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status subscribe(String topic, int qos, Object userContext) {
-        Status status = Status.ERROR;
-        if (null == mRemoteServer) {
-            TXLog.e(TAG, "remote service is not start!");
-            return status;
-        }
-        long requestId = mRequestId.getAndIncrement();
-        mUserContextMap.put(requestId, userContext);
-        try {
-            String statusStr = mRemoteServer.subscribe(topic, qos, requestId);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[subscribe] failed!");
-        }
-        return status;
-    }
-
-    /**
-     * 取消订阅主题, 结果通过回调函数通知。
-     *
-     * @param topic       要取消订阅的主题
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status unSubscribe(String topic, Object userContext) {
-        Status status = Status.ERROR;
-        if (null == mRemoteServer) {
-            TXLog.e(TAG, "remote service is not start!");
-            return status;
-        }
-        long requestId = mRequestId.getAndIncrement();
-        mUserContextMap.put(requestId, userContext);
-        try {
-            String statusStr = mRemoteServer.unSubscribe(topic, requestId);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[unSubscribe] failed!");
-        }
-
-        return status;
-    }
-
-    /**
-     * 发布MQTT消息接口, 结果通过回调函数通知。
-     *
-     * @param topic       topic名称
-     * @param message     消息内容
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status publish(String topic, TXMqttMessage message, Object userContext) {
-        Status status = Status.ERROR;
-        if (null == mRemoteServer) {
-            TXLog.e(TAG, "remote service is not start!");
-            return status;
-        }
-        long requestId = mRequestId.getAndIncrement();
-        mUserContextMap.put(requestId, userContext);
-        try {
-            String statusStr = mRemoteServer.publish(topic, message, requestId);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[publish] failed!");
-        }
-
-        return status;
-    }
-
-    /**
-     * 订阅RRPC主题, 结果通过回调函数通知。
-     * topic格式: $rrpc/rxd/${ProductId}/${DeviceName}/+
-     *
-     * @param qos         QOS等级
-     * @param userContext 用户上下文（这个参数在回调函数时透传给用户）
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status subscribeRRPCTopic(int qos, Object userContext) {
-        String rrpcTopic = String.format("$rrpc/rxd/%s/%s/+", mMqttClientOptions.getProductId(),
-                mMqttClientOptions.getDeviceName());
-        return subscribe(rrpcTopic, qos, userContext);
-    }
-
-    /**
-     * 释放资源
-     */
-    public void clear() {
-        mUserContextMap.clear();
-    }
-
-
-    /**
-     * 初始化OTA功能。
-     *
-     * @param storagePath OTA升级包存储路径(调用者必须确保路径已存在，并且具有写权限)
-     * @param callback    OTA事件回调
-     */
-    public void initOTA(String storagePath, TXOTACallBack callback) {
-        mOTACallback = callback;
-
-        try {
-            mRemoteServer.initOTA(storagePath, mOTAListener);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[initOTA] failed!");
-        }
-    }
-
-    /**
-     * 上报设备当前版本信息到后台服务器。
-     *
-     * @param currentFirmwareVersion 设备当前版本信息
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportCurrentFirmwareVersion(String currentFirmwareVersion)  {
-        Status status = Status.ERROR;
-
-        try {
-            String statusStr = mRemoteServer.reportCurrentFirmwareVersion(currentFirmwareVersion);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[reportCurrentFirmwareVersion] failed!");
-        }
-
-        return status;
-    }
-
-    /**
-     * 上报设备升级状态到后台服务器。
-     *
-     * @param state 状态
-     * @param resultCode 结果代码。0：表示成功；其它：表示失败；常见错误码：-1:下载超时; -2:文件不存在；-3:签名过期；-4:校验错误；-5:更新固件失败
-     * @param resultMsg 结果描述
-     * @param version 版本号
-     * @return 发送请求成功时返回Status.OK; 其它返回值表示发送请求失败；
-     */
-    public Status reportOTAState(TXOTAConstansts.ReportState state, int resultCode, String resultMsg, String version) {
-        Status status = Status.ERROR;
-
-        try {
-            String statusStr = mRemoteServer.reportOTAState(state.name(), resultCode, resultMsg, version);
-            status = Status.valueOf(Status.class, statusStr);
-        } catch (RemoteException e) {
-            TXLog.e(TAG, e, "invoke remote service[reportOTAState] failed!");
-        }
-
-        return status;
-    }
-
-    /**
-     * 添加用户上下文
-     *
-     * @param userContext
-     * @return
-     */
-    protected long addUserContext(Object userContext) {
-        long requestId = mRequestId.getAndIncrement();
-        mUserContextMap.put(requestId, userContext);
-        return requestId;
-    }
-
-    /**
-     * 获取用户上下文
-     *
-     * @param userContextId
-     * @return
-     */
-    protected Object getUserContext(long userContextId) {
-        return mUserContextMap.get(userContextId);
-    }
-
-    /**
-     * 内部初始化
-     */
-    private void internalInit(Context context, TXMqttClientOptions clientOptions) {
-        mContext = context.getApplicationContext();
-        mMqttClientOptions = clientOptions;
-        mUserContextMap = new HashMap<Long, Object>();
-        mRequestId = new AtomicLong(0);
-
-        mMqttActionListener = new ITXMqttActionListener.Stub() {
-
-            @Override
-            public void onConnectCompleted(String status, boolean reconnect, long userContextId, String msg) throws RemoteException {
-                TXLog.d(TAG, "onConnectCompleted, status[%s], reconnect[%b], msg[%s]", status, reconnect, msg);
-                if (null != mMqttActionCallBack) {
-                    Object userContext = mUserContextMap.get(Long.valueOf(userContextId));
-                    mMqttActionCallBack.onConnectCompleted(Status.valueOf(Status.class, status),
-                            reconnect, userContext, msg);
-                    mUserContextMap.remove(Long.valueOf(userContextId));
-                }
-            }
-
-            @Override
-            public void onConnectionLost(String cause) throws RemoteException {
-                TXLog.d(TAG, "onConnectionLost, cause[%s]", cause);
-                if (null != mMqttActionCallBack) {
-                    mMqttActionCallBack.onConnectionLost(new Throwable(cause));
-                }
-            }
-
-            @Override
-            public void onDisconnectCompleted(String status, long userContextId, String msg) throws RemoteException {
-                TXLog.d(TAG, "onDisconnectCompleted, status[%s], msg[%s]", status, msg);
-                if (null != mMqttActionCallBack) {
-                    Object userContext = mUserContextMap.get(Long.valueOf(userContextId));
-                    mMqttActionCallBack.onDisconnectCompleted(Status.valueOf(Status.class, status), userContext, msg);
-                    mUserContextMap.remove(Long.valueOf(userContextId));
-                }
-            }
-
-            @Override
-            public void onPublishCompleted(String status, TXMqttToken token, long userContextId, String errMsg) throws RemoteException {
-                TXLog.d(TAG, "onPublishCompleted, status[%s], token[%s], errMsg[%s]", status, token, errMsg);
-                if (null != mMqttActionCallBack) {
-                    Object userContext = mUserContextMap.get(Long.valueOf(userContextId));
-                    mMqttActionCallBack.onPublishCompleted(Status.valueOf(Status.class, status), token.transToMqttToken(), userContext, errMsg);
-                    mUserContextMap.remove(Long.valueOf(userContextId));
-                }
-            }
-
-            @Override
-            public void onSubscribeCompleted(String status, TXMqttToken token, long userContextId, String errMsg) throws RemoteException {
-                TXLog.d(TAG, "onSubscribeCompleted, status[%s], token[%s], errMsg[%s]", status, token, errMsg);
-                if (null != mMqttActionCallBack) {
-                    Object userContext = mUserContextMap.get(Long.valueOf(userContextId));
-                    mMqttActionCallBack.onSubscribeCompleted(Status.valueOf(Status.class, status), token.transToMqttToken(), userContext, errMsg);
-                    mUserContextMap.remove(Long.valueOf(userContextId));
-                }
-            }
-
-            @Override
-            public void onUnSubscribeCompleted(String status, TXMqttToken token, long userContextId, String errMsg) throws RemoteException {
-                TXLog.d(TAG, "onUnSubscribeCompleted, status[%s], token[%s], errMsg[%s]", status, token, errMsg);
-                if (null != mMqttActionCallBack) {
-                    Object userContext = mUserContextMap.get(Long.valueOf(userContextId));
-                    mMqttActionCallBack.onUnSubscribeCompleted(Status.valueOf(Status.class, status), token.transToMqttToken(), userContext, errMsg);
-                    mUserContextMap.remove(Long.valueOf(userContextId));
-                }
-            }
-
-            @Override
-            public void onMessageReceived(String topic, TXMqttMessage message) throws RemoteException {
-                TXLog.d(TAG, "onMessageReceived, topic[%s], message[%s]", topic, message);
-                if (null != mMqttActionCallBack) {
-                    mMqttActionCallBack.onMessageReceived(topic, message.transToMqttMessage());
-                }
-            }
-
-            @Override
-            public void onServiceStartedCallback() throws RemoteException {
-                if (null != mInternalServiceConnection) {
-                    ComponentName componentName = null;
-                    if (null != mServiceIntent) {
-                        componentName = mServiceIntent.getComponent();
-                    }
-                    if (null != componentName) {
-                        mInternalServiceConnection.onServiceConnected(componentName, null);
-                    }
-                }
-            }
-
-            @Override
-            public void onServiceDestroyCallback() throws RemoteException {
-                TXLog.d(TAG, "onServiceDestroyCallback");
-                if (null != mInternalServiceConnection) {
-                    ComponentName componentName = null;
-                    if (null != mServiceIntent) {
-                        componentName = mServiceIntent.getComponent();
-                    }
-                    if (null != componentName) {
-                        mInternalServiceConnection.onServiceDisconnected(componentName);
-                    }
-                }
-            }
-        };
-    }
-}
Index: iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttClientOptions.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttClientOptions.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttClientOptions.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,4 +0,0 @@
-// TXMqttClientOptions.aidl
-package com.tencent.iot.hub.device.android.service;
-
-parcelable TXMqttClientOptions;
Index: iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttConnectOptions.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttConnectOptions.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttConnectOptions.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,4 +0,0 @@
-// TXMqttConnectOptions.aidl
-package com.tencent.iot.hub.device.android.service;
-
-parcelable TXMqttConnectOptions;
Index: iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXShadowActionListener.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXShadowActionListener.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXShadowActionListener.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,61 +0,0 @@
-// ITXShadowListener.aidl
-package com.tencent.iot.hub.device.android.service;
-
-import com.tencent.iot.hub.device.android.service.TXMqttMessage;
-import com.tencent.iot.hub.device.android.service.TXMqttToken;
-import com.tencent.iot.hub.device.android.core.shadow.DeviceProperty;
-
-interface ITXShadowActionListener {
-
-    /**
-     * 文档请求响应的回调接口
-     *
-     * @param type     文档操作方式, get/update/delete
-     * @param result   请求响应结果, 0: 成功；非0：失败
-     * @param document 云端返回的JSON文档
-     */
-    void onRequestCallback(String type, int result, String document);
-
-    /**
-     * 设备属性处理回调接口
-     *
-     * @param propertyJSONDocument 设备属性json文档
-     * @param devicePropertyList   更新后的设备属性集
-     */
-    void onDevicePropertyCallback(String propertyJSONDocument, out List<DeviceProperty> devicePropertyList);
-
-    /**
-     * 发布消息完成回调
-     *
-     * @param status OK: 发布消息成功，ERROR: 发布消息失败
-     * @param token  消息token
-     * @param errMsg 详细信息
-     */
-    void onPublishCompleted(String status, inout TXMqttToken token, long userContextId, String errMsg);
-
-    /**
-     * 订阅主题完成回调
-     *
-     * @param status     OK: 订阅成功，ERROR: 订阅失败
-     * @param token      消息token
-     * @param errMsg     详细信息
-     */
-    void onSubscribeCompleted(String status, inout TXMqttToken token, long userContextId, String errMsg);
-
-    /**
-     * 取消订阅主题完成回调
-     *
-     * @param status    OK: 取消订阅成功，ERROR: 取消订阅失败
-     * @param token     消息token，包含消息内容结构体
-     * @param errMsg    详细信息
-     */
-    void onUnSubscribeCompleted(String status, inout TXMqttToken token, long userContextId, String errMsg);
-
-    /**
-     * 收到订阅主题的消息Push
-     *
-     * @param topic   主题名称
-     * @param message 消息内容
-     */
-    void onMessageReceived(String topic, inout TXMqttMessage message);
-}
Index: iot_core/src/main/aidl/com/tencent/iot/hub/device/android/core/shadow/DeviceProperty.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/aidl/com/tencent/iot/hub/device/android/core/shadow/DeviceProperty.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/aidl/com/tencent/iot/hub/device/android/core/shadow/DeviceProperty.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,3 +0,0 @@
-package com.tencent.iot.hub.device.android.core.shadow;
-
-parcelable DeviceProperty;
\ No newline at end of file
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLog.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLog.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,140 +0,0 @@
-package com.tencent.iot.hub.device.android.core.log;
-
-import android.text.TextUtils;
-
-import com.tencent.iot.hub.device.android.core.mqtt.TXMqttConnection;
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-import com.tencent.iot.hub.device.java.core.common.Status;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants;
-
-import org.eclipse.paho.client.mqttv3.MqttMessage;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.text.SimpleDateFormat;
-import java.util.concurrent.atomic.AtomicInteger;
-
-public class TXMqttLog {
-
-    public static final String TAG = TXMqttLog.class.getName();
-
-    private TXMqttLogImpl mqttLogImp;
-
-    private  TXMqttConnection mMqttConnection;
-
-    public static final String level_str[] = new String[] {"ERR", "ERR", "WRN", "INF", "DBG"};
-    private  int mLogLevel = TXMqttLogConstants.LEVEL_FATAL;
-
-    private static final String LOG_OPERATION_PREFIX = "$log/operation/";
-    private static final String LOG_OPERATION_RES_PREFIX = "$log/operation/result/";
-
-    private static final String CLIENT_TOKEN = "%s-%d";
-    private AtomicInteger mClientTokenNum = new AtomicInteger(0);
-
-    public TXMqttLog(TXMqttConnection mqttConnection) {
-        this.mMqttConnection = mqttConnection;
-        this.mqttLogImp = new TXMqttLogImpl(mqttConnection);
-    }
-
-    /**
-     * 日志上传初始化，订阅指令下行topic，向数据上行topic发布消息
-     * @return 初始化成功时返回Status.OK; 其它返回值表示初始化失败；
-     */
-    public Status initMqttLog() {
-        //初始化之前处理上次的离线日志
-        mqttLogImp.uploadOfflineLog();
-
-        Status status;
-        status = subscribeLogResultTopic(mMqttConnection);
-        if (status != Status.OK) {
-            return status;
-        }
-        return publishLogLevelGet(mMqttConnection);
-    }
-
-    /**
-     * 设置日志级别，在接受消息回调函数中调用
-     * @param logLevel 日志等级
-     */
-    public void setMqttLogLevel(int logLevel) {
-        this.mLogLevel = logLevel;
-    }
-
-    /**
-     * 将一条日志保存到日志队列中
-     */
-    public boolean saveMqttLog(final int logLevel, final String tag, final String format, final Object... obj) {
-        //低于设置日志信息等级的信息不存储
-        if(mMqttConnection != null && logLevel <= mLogLevel) {
-            String log = buildMqttLog(logLevel, tag, format, obj);
-            return mqttLogImp.appendToLogDeque(log);
-        }
-        return false;
-    }
-
-    /**
-     * 触发一次日志上传
-     */
-    public void uploadMqttLog() {
-        mqttLogImp.uploadMqttLog();
-    }
-
-    /**
-     * 构造一条日志消息
-     * 格式：[日志内容（每行日志格式为"LEVEL|DATETIME|TAG|CONTENT"，行与行之间采用"\n\f,"分隔）]”
-     */
-    private String buildMqttLog(final int logLevel,final String tag,final String format, final Object... obj) {
-        long nowCurrentMillis = System.currentTimeMillis();
-        SimpleDateFormat timeFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
-        String logTime = timeFormatter.format(nowCurrentMillis);
-        String log = obj == null ? format : String.format(format, obj);
-        if (log == null) {
-            log = "";
-        }
-
-        return String.format("%s|%s|%s|%s\n\f", level_str[logLevel], logTime, tag, log);
-    }
-
-    /**
-     * 订阅指令上行topic
-     */
-    private Status subscribeLogResultTopic(TXMqttConnection mqttConnection) {
-        String topic = LOG_OPERATION_RES_PREFIX + mqttConnection.mProductId + "/" + mqttConnection.mDeviceName;
-        int qos = TXMqttConstants.QOS0;
-        return mqttConnection.subscribe(topic, qos, "Subscribe Log result topic");
-    }
-
-    /**
-     * 发布消息给数据上行topic
-     */
-    private Status publishLogLevelGet(TXMqttConnection mqttConnection) {
-        String topic = LOG_OPERATION_PREFIX + mqttConnection.mProductId + "/" + mqttConnection.mDeviceName;
-
-        String clientToken = String.format(CLIENT_TOKEN, mqttConnection.mClientId, mClientTokenNum.getAndIncrement());
-        String jsonDocument = buildGetJsonDocument(clientToken);
-
-        MqttMessage mqttMessage = new MqttMessage();
-        if (!TextUtils.isEmpty(jsonDocument)) {
-            mqttMessage.setPayload(jsonDocument.getBytes());
-        }
-        mqttMessage.setQos(TXMqttConstants.QOS0);
-
-        return  mqttConnection.publish(topic, mqttMessage, "Publish GET message");
-    }
-
-    private String buildGetJsonDocument(String clientToken) {
-        JSONObject documentJSONObj = new JSONObject();
-
-        try {
-            documentJSONObj.put(TXMqttLogConstants.TYPE, TXMqttLogConstants.GET_LOG_LEVEL);
-            documentJSONObj.put(TXMqttLogConstants.CLIENT_TOKEN, clientToken);
-        } catch (JSONException e) {
-            TXLog.e(TAG, e, "build report info failed");
-            return "";
-        }
-
-        return documentJSONObj.toString();
-    }
-
-}
-
Index: iot_core/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/res/values/strings.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/res/values/strings.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,3 +0,0 @@
-<resources>
-    <string name="app_name">iot_core</string>
-</resources>
Index: iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXDisconnectedBufferOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXDisconnectedBufferOptions.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXDisconnectedBufferOptions.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,114 +0,0 @@
-package com.tencent.iot.hub.device.android.service;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import org.eclipse.paho.client.mqttv3.DisconnectedBufferOptions;
-
-/**
- * 该类负责序列化DisconnectedBufferOptions相关信息
- */
-
-public class TXDisconnectedBufferOptions extends DisconnectedBufferOptions implements Parcelable {
-    private int bufferSize = DISCONNECTED_BUFFER_SIZE_DEFAULT;
-    private boolean bufferEnabled = DISCONNECTED_BUFFER_ENABLED_DEFAULT;
-    private boolean persistBuffer = PERSIST_DISCONNECTED_BUFFER_DEFAULT;
-    private boolean deleteOldestMessages = DELETE_OLDEST_MESSAGES_DEFAULT;
-
-    public TXDisconnectedBufferOptions() {
-        super();
-    }
-
-    protected TXDisconnectedBufferOptions(Parcel in) {
-        bufferSize = in.readInt();
-        bufferEnabled = in.readByte() != 0;
-        persistBuffer = in.readByte() != 0;
-        deleteOldestMessages = in.readByte() != 0;
-    }
-
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel parcel, int i) {
-        parcel.writeInt(bufferSize);
-        parcel.writeByte((byte) (bufferEnabled ? 1 : 0));
-        parcel.writeByte((byte) (persistBuffer ? 1 : 0));
-        parcel.writeByte((byte) (deleteOldestMessages ? 1 : 0));
-
-    }
-
-    public static final Creator<TXDisconnectedBufferOptions> CREATOR = new Creator<TXDisconnectedBufferOptions>() {
-        @Override
-        public TXDisconnectedBufferOptions createFromParcel(Parcel in) {
-            return new TXDisconnectedBufferOptions(in);
-        }
-
-        @Override
-        public TXDisconnectedBufferOptions[] newArray(int size) {
-            return new TXDisconnectedBufferOptions[size];
-        }
-    };
-
-    /**
-     * 转换为DisconnectedBufferOptions
-     *
-     * @return
-     */
-    public DisconnectedBufferOptions transToDisconnectedBufferOptions() {
-        DisconnectedBufferOptions disconnectedBufferOptions = new DisconnectedBufferOptions();
-        disconnectedBufferOptions.setBufferSize(bufferSize);
-        disconnectedBufferOptions.setBufferEnabled(bufferEnabled);
-        disconnectedBufferOptions.setPersistBuffer(persistBuffer);
-        disconnectedBufferOptions.setDeleteOldestMessages(deleteOldestMessages);
-        return disconnectedBufferOptions;
-    }
-
-    public int getBufferSize() {
-        return bufferSize;
-    }
-
-    public void setBufferSize(int bufferSize) {
-        if (bufferSize < 1) {
-            throw new IllegalArgumentException();
-        }
-        this.bufferSize = bufferSize;
-    }
-
-    public boolean isBufferEnabled() {
-        return bufferEnabled;
-    }
-
-    public void setBufferEnabled(boolean bufferEnabled) {
-        this.bufferEnabled = bufferEnabled;
-    }
-
-    public boolean isPersistBuffer() {
-        return persistBuffer;
-    }
-
-    public void setPersistBuffer(boolean persistBuffer) {
-        this.persistBuffer = persistBuffer;
-    }
-
-    public boolean isDeleteOldestMessages() {
-        return deleteOldestMessages;
-    }
-
-    public void setDeleteOldestMessages(boolean deleteOldestMessages) {
-        this.deleteOldestMessages = deleteOldestMessages;
-    }
-
-    @Override
-    public String toString() {
-        return "TXDisconnectedBufferOptions{" +
-                "bufferSize=" + bufferSize +
-                ", bufferEnabled=" + bufferEnabled +
-                ", persistBuffer=" + persistBuffer +
-                ", deleteOldestMessages=" + deleteOldestMessages +
-                '}';
-    }
-}
Index: iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttClientOptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttClientOptions.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttClientOptions.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,116 +0,0 @@
-package com.tencent.iot.hub.device.android.service;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-/**
- * mqtt远程客户端选项
- */
-
-public class TXMqttClientOptions implements Parcelable {
-
-    /**
-     * 服务器URI
-     */
-    private String mServerURI;
-
-    /**
-     * Iot Hub控制台获取产品ID
-     */
-    private String mProductId;
-
-    /**
-     * 设备名，唯一
-     */
-    private String mDeviceName;
-
-    private String mSecretKey;
-
-    public static final Creator<TXMqttClientOptions> CREATOR = new Creator<TXMqttClientOptions>() {
-        @Override
-        public TXMqttClientOptions createFromParcel(Parcel in) {
-            return new TXMqttClientOptions(in);
-        }
-
-        @Override
-        public TXMqttClientOptions[] newArray(int size) {
-            return new TXMqttClientOptions[size];
-        }
-    };
-
-    public TXMqttClientOptions() {
-    }
-
-    public TXMqttClientOptions(String serverURI, String productId, String deviceName, String secretKey) {
-        this.mServerURI = serverURI;
-        this.mProductId = productId;
-        this.mDeviceName = deviceName;
-        this.mSecretKey = secretKey;
-    }
-
-    protected TXMqttClientOptions(Parcel in) {
-        mServerURI = in.readString();
-        mProductId = in.readString();
-        mDeviceName = in.readString();
-        mSecretKey = in.readString();
-    }
-
-
-    public String getServerURI() {
-        return mServerURI;
-    }
-
-    public TXMqttClientOptions serverURI(String serverURI) {
-        this.mServerURI = serverURI;
-        return this;
-    }
-
-    public String getProductId() {
-        return mProductId;
-    }
-
-    public TXMqttClientOptions productId(String productId) {
-        this.mProductId = productId;
-        return this;
-    }
-
-    public String getDeviceName() {
-        return mDeviceName;
-    }
-
-    public TXMqttClientOptions deviceName(String deviceName) {
-        this.mDeviceName = deviceName;
-        return this;
-    }
-
-    public String getSecretKey() {
-        return mSecretKey;
-    }
-
-    public TXMqttClientOptions secretKey(String secretKey) {
-        this.mSecretKey = secretKey;
-        return this;
-    }
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel parcel, int i) {
-        parcel.writeString(mServerURI);
-        parcel.writeString(mProductId);
-        parcel.writeString(mDeviceName);
-        parcel.writeString(mSecretKey);
-    }
-
-    @Override
-    public String toString() {
-        return "TXMqttClientOptions{" +
-                "mServerURI='" + mServerURI + '\'' +
-                ", mProductId='" + mProductId + '\'' +
-                ", mDeviceName='" + mDeviceName + '\'' +
-                '}';
-    }
-}
Index: iot_core/src/androidTest/java/com/qcloud/iot/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/androidTest/java/com/qcloud/iot/ExampleInstrumentedTest.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/androidTest/java/com/qcloud/iot/ExampleInstrumentedTest.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,26 +0,0 @@
-package com.qcloud.iot;
-
-import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.junit.Assert.*;
-
-/**
- * Instrumentation test, which will execute on an Android device.
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
- */
-@RunWith(AndroidJUnit4.class)
-public class ExampleInstrumentedTest {
-    @Test
-    public void useAppContext() throws Exception {
-        // Context of the app under test.
-        Context appContext = InstrumentationRegistry.getTargetContext();
-
-        assertEquals("com.qcloud.iot.test", appContext.getPackageName());
-    }
-}
Index: iot_core/src/test/java/com/qcloud/iot/ExampleUnitTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/test/java/com/qcloud/iot/ExampleUnitTest.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/test/java/com/qcloud/iot/ExampleUnitTest.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,17 +0,0 @@
-package com.qcloud.iot;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-/**
- * Example local unit test, which will execute on the development machine (host).
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
- */
-public class ExampleUnitTest {
-    @Test
-    public void addition_isCorrect() throws Exception {
-        assertEquals(4, 2 + 2);
-    }
-}
\ No newline at end of file
Index: iot_service/src/androidTest/java/com/example/iot_service/ExampleInstrumentedTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/androidTest/java/com/example/iot_service/ExampleInstrumentedTest.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/androidTest/java/com/example/iot_service/ExampleInstrumentedTest.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,26 +0,0 @@
-package com.example.iot_service;
-
-import android.content.Context;
-import android.support.test.InstrumentationRegistry;
-import android.support.test.runner.AndroidJUnit4;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.junit.Assert.*;
-
-/**
- * Instrumentation test, which will execute on an Android device.
- *
- * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
- */
-@RunWith(AndroidJUnit4.class)
-public class ExampleInstrumentedTest {
-    @Test
-    public void useAppContext() throws Exception {
-        // Context of the app under test.
-        Context appContext = InstrumentationRegistry.getTargetContext();
-
-        assertEquals("com.example.iot_service.test", appContext.getPackageName());
-    }
-}
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/dynreg/TXMqttDynregCallback.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/dynreg/TXMqttDynregCallback.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/dynreg/TXMqttDynregCallback.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,34 +0,0 @@
-package com.tencent.iot.hub.device.android.core.dynreg;
-
-/**
- * Created by willssong on 2019/7/15
- * willssong@tencent.com
- */
-public abstract class TXMqttDynregCallback {
-
-    /**
-     * Callback on getting device PSK
-     * @param devicePsk
-     */
-    public abstract void onGetDevicePSK(String devicePsk);
-
-    /**
-     * Callback on getting deivce cert and priv
-     * @param deivceCert
-     * @param devicePriv
-     */
-    public abstract void onGetDeviceCert(String deivceCert, String devicePriv);
-
-    /**
-     * Callback on dynamic register failed
-     * @param cause
-     * @param errMsg
-     */
-    public abstract void onFailedDynreg(Throwable cause, String errMsg);
-
-    /**
-     * Callback on dynamic register failed
-     * @param cause
-     */
-    public abstract void onFailedDynreg(Throwable cause);
-}
Index: iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXMqttActionListener.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXMqttActionListener.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXMqttActionListener.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,78 +0,0 @@
-// ITXMqttListener.aidl
-package com.tencent.iot.hub.device.android.service;
-
-import com.tencent.iot.hub.device.android.service.TXMqttMessage;
-import com.tencent.iot.hub.device.android.service.TXMqttToken;
-
-interface ITXMqttActionListener {
-
-    /**
-     * MQTT Connect完成回调
-     *
-     * @param status    OK: 连接成功        ERROR: 连接失败
-     * @param reconnect true: 重新连接      false: 首次连接
-     * @param msg       连接信息
-     */
-    void onConnectCompleted(String status, boolean reconnect, long userContextId, String msg);
-
-    /**
-     * MQTT连接断开回调
-     *
-     * @param cause 连接断开原因
-     */
-    void onConnectionLost(String cause);
-
-    /**
-     * MQTT Disconnect完成回调
-     *
-     * @param status OK: 断连成功，ERROR: 断连失败
-     * @param msg    相信信息
-     */
-    void onDisconnectCompleted(String status, long userContextId, String msg);
-
-    /**
-     * 发布消息完成回调
-     *
-     * @param status OK: 发布消息成功，ERROR: 发布消息失败
-     * @param token  消息token
-     * @param errMsg 详细信息
-     */
-    void onPublishCompleted(String status, inout TXMqttToken token, long userContextId, String errMsg);
-
-    /**
-     * 订阅主题完成回调
-     *
-     * @param status  OK: 订阅成功，ERROR: 订阅失败
-     * @param token   消息token
-     * @param errMsg  详细信息
-     */
-    void onSubscribeCompleted(String status, inout TXMqttToken token, long userContextId, String errMsg);
-
-    /**
-     * 取消订阅主题完成回调
-     *
-     * @param status    OK: 取消订阅成功，ERROR: 取消订阅失败
-     * @param token     消息token
-     * @param errMsg    详细信息
-     */
-    void onUnSubscribeCompleted(String status, inout TXMqttToken token, long userContextId, String errMsg);
-
-    /**
-     * 收到订阅主题的消息Push
-     *
-     * @param topic   主题名称
-     * @param message 消息内容
-     */
-    void onMessageReceived(String topic, inout TXMqttMessage message);
-
-    /**
-     * 远程服务已启动回调接口
-     */
-    void onServiceStartedCallback();
-
-    /**
-     * 远程服务销毁回调接口
-     */
-    void onServiceDestroyCallback();
-
-}
Index: iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXMqttService.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXMqttService.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/ITXMqttService.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,153 +0,0 @@
-// ITXMqttService.aidl
-package com.tencent.iot.hub.device.android.service;
-
-import com.tencent.iot.hub.device.android.service.TXDisconnectedBufferOptions;
-import com.tencent.iot.hub.device.android.service.ITXMqttActionListener;
-import com.tencent.iot.hub.device.android.service.ITXOTAListener;
-import com.tencent.iot.hub.device.android.service.ITXShadowActionListener;
-import com.tencent.iot.hub.device.android.service.TXMqttConnectOptions;
-import com.tencent.iot.hub.device.android.service.TXMqttClientOptions;
-import com.tencent.iot.hub.device.android.service.TXMqttMessage;
-import com.tencent.iot.hub.device.android.core.shadow.DeviceProperty;
-
-interface ITXMqttService {
-    /**
-     * 注册mqttAction监听器
-     */
-    void registerMqttActionListener(in ITXMqttActionListener mqttActionListener);
-
-    /**
-     * 注册shadowAction监听器
-     */
-    void registerShadowActionListener(in ITXShadowActionListener shadowActionListener);
-
-    /**
-     * 初始化设备信息
-     * @param clientOptions  客户端选项
-     */
-    void initDeviceInfo(in TXMqttClientOptions clientOptions);
-
-    /**
-     * 设置断连状态buffer缓冲区
-     */
-    void setBufferOpts(in TXDisconnectedBufferOptions bufferOptions);
-
-    /**
-     * 连接MQTT
-     * @param  options
-     * @param  userContextId
-     * @return status
-     */
-    String connect(in TXMqttConnectOptions options, in long userContextId);
-
-    /**
-     * 重新连接
-     */
-    String reconnect();
-
-    /**
-     * MQTT断连
-     * @param timeout       等待时间（必须>0）。单位：毫秒
-     * @param userContextId 用户上下文
-     */
-    String disConnect(in long timeout, in long userContextId);
-
-    /**
-     * 订阅广播主题
-     * @param qos
-     * @param userContextId
-     */
-    String subscribeBroadcastTopic(in int qos, in long userContextId);
-
-    /**
-     * 订阅主题
-     * @param topic
-     * @param qos
-     * @param userContextId
-     */
-    String subscribe(in String topic, in int qos, in long userContextId);
-
-    /**
-     * 取消订阅主题
-     */
-    String unSubscribe(in String topic, in long userContextId);
-
-    /**
-     * 发布主题
-     * @param topic
-     * @param message
-     * @param userContextId
-     */
-    String publish(in String topic, in TXMqttMessage message, in long userContextId);
-
-    /**
-     * 订阅RRPC主题
-     * @param qos
-     * @param userContextId
-     */
-    String subscribeRRPCTopic(in int qos, in long userContextId);
-
-    /**
-     * 获取连接状态
-     *
-     * @return 连接状态
-     */
-    String getConnectStatus();
-
-    /**
-     * 获取设备影子文档
-     */
-    String getShadow(in long userContextId);
-
-    /**
-     * 更新设备影子文档
-     * @param devicePropertyList
-     * @param userContextId
-     */
-    String updateShadow(in List<DeviceProperty> devicePropertyList, in long userContextId);
-
-    /**
-     * 注册设备属性
-     * @param deviceProperty
-     */
-    void registerDeviceProperty(in DeviceProperty deviceProperty);
-
-    /**
-     * 取消注册设备属性
-     * @param deviceProperty
-     */
-    void unRegisterDeviceProperty(in DeviceProperty deviceProperty);
-
-    /**
-     * 更新delta信息后，上报空的desired信息，通知服务器不再发送delta消息
-     * @param reportJsonDoc 用户上报的JSON内容
-     */
-    String reportNullDesiredInfo(String reportJsonDoc);
-
-    /**
-     * 初始化OTA功能。
-     *
-     * @param storagePath OTA升级包存储路径(调用者必须确保路径已存在，并且具有写权限)
-     * @param listener    OTA事件回调
-     */
-    void initOTA(String storagePath, in ITXOTAListener listener);
-
-    /**
-     * 上报设备当前版本信息到后台服务器。
-     *
-     * @param currentFirmwareVersion 设备当前版本信息
-     * @return 发送成功时返回字符串"OK"; 其它返回值表示发送失败；
-     */
-    String reportCurrentFirmwareVersion(String currentFirmwareVersion);
-
-     /**
-     * 上报设备升级状态到后台服务器。
-     *
-     * @param state 状态
-     * @param resultCode 结果代码。0：表示成功；其它：表示失败；常见错误码：-1: 下载超时; -2:文件不存在；-3:签名过期；-4:校验错误；-5：更新固件失败
-     * @param resultMsg 结果描述
-     * @param version 版本号
-     * @return 发送成功时返回字符串"OK"; 其它返回值表示发送失败；
-     */
-    String reportOTAState(String state, int resultCode, String resultMsg, String version);
-}
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/TXLogImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/TXLogImpl.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/TXLogImpl.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,404 +0,0 @@
-package com.tencent.iot.hub.device.android.core.util;
-
-import java.util.concurrent.LinkedBlockingDeque;
-
-import android.content.Context;
-import android.os.Environment;
-import android.os.Handler;
-import android.os.Looper;
-import android.util.Log;
-
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.locks.ReentrantLock;
-
-public class TXLogImpl implements TXLog.LogImp {
-
-    private static volatile Context sContext;
-
-    private static String packageName = "";
-
-    static LinkedBlockingDeque<String> logDeque = new LinkedBlockingDeque<String>(15000);
-
-    private static final int[] INTERVAL_RETRY_INIT = new int[]{1, 2, 4, 8, 16, 29}; //重试时间
-
-    private static AtomicInteger retryInitTimes = new AtomicInteger(0);
-
-    public static final SimpleDateFormat timeFormatter = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
-
-    private static String logTime = "";
-
-    private static String logPath = "";
-
-    static String nowUsedFile = "";
-
-    static final ReentrantLock lock = new ReentrantLock();
-
-    protected static Object formatterLock = new Object();
-
-    private static long nextDayTime;
-
-    private static long nextSecondMinuteTime;
-
-    static long lastWriterErrorTime = 0;
-
-    private static FileWriter writer;
-
-    private static Handler retryInitHandler = new Handler(Looper.getMainLooper());
-
-    private int logLevel = TXLog.LEVEL_INFO;
-
-    /**
-     * 初始化日志
-     */
-    public static void init(Context context) {
-        sContext = context;
-        initRunnable.run();
-    }
-
-    /**
-     * 将日志写到文件
-     */
-    private synchronized static void writeLogToFile(String log) {
-        try {
-            // 如果SD卡不可用，则不写日志，以免每次都抛出异常，影响性能
-            if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
-                System.out.println("writeLogToFile not ready");
-                return;
-            }
-
-            if (null == writer) {
-                System.out.println("can not write log.");
-                long now = System.currentTimeMillis();
-                if (lastWriterErrorTime == 0) {
-                    lastWriterErrorTime = now;
-                } else if (now - lastWriterErrorTime > 60 * 1000) {
-                    try {
-                        initLogFile(System.currentTimeMillis());
-                    } catch (IOException e1) {
-                        e1.printStackTrace();
-                    }
-                    lastWriterErrorTime = now;
-                }
-            } else {
-                long now = System.currentTimeMillis();
-                if (now > nextDayTime) {
-                    initLogFile(now);
-                }
-                //加入消息的时候记录时间
-                if (lock.tryLock()) {
-                    try {
-                        writer.write(log);
-                        writer.flush();
-                    } finally {
-                        lock.unlock();
-                    }
-                } else {
-                    if (!insertLogToCacheHead(log)) {
-                        System.out.println("insertLogToCacheHead failed!");
-                    }
-                }
-            }
-
-        } catch (Throwable e) {
-            if (e instanceof IOException && e.getMessage().contains("ENOSPC")) {
-                e.printStackTrace();
-            } else {
-                try {
-                    initLogFile(System.currentTimeMillis());
-                } catch (Throwable e1) {
-                    e1.printStackTrace();
-                }
-            }
-        }
-    }
-
-    /**
-     * 写日志线程
-     */
-    static Thread takeThread = new Thread() {
-        public void run() {
-            while (true) {
-                synchronized (this) {
-                    try {
-                        String log;
-                        log = logDeque.take();
-                        if (null != log) {
-                            writeLogToFile(log);
-                        }
-                    } catch (Exception e) {
-                        System.out.println("write log file error: " + e.toString());
-                    } catch (AssertionError ignore) {
-                        System.out.println("--------------");
-                    }
-                }
-            }
-        }
-    };
-
-    private static String getDateStr(long nowCurrentMillis) {
-        Calendar calendar = Calendar.getInstance();
-        calendar.setTimeInMillis(nowCurrentMillis);
-        SimpleDateFormat logFileFormatter = new SimpleDateFormat("yyyyMMdd");
-        SimpleDateFormat timeFormatter = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
-        logTime = timeFormatter.format(nowCurrentMillis);
-        String thisLogName = logFileFormatter.format(calendar.getTime());
-        setNextSecond(calendar);
-        setNextHour(calendar);
-        return thisLogName;
-    }
-
-    private static void setNextHour(Calendar setSecondedCalendar) {
-        setSecondedCalendar.add(Calendar.DAY_OF_MONTH, 1);
-        nextDayTime = setSecondedCalendar.getTimeInMillis();
-    }
-
-    private static void setNextSecond(Calendar calendar) {
-        calendar.set(Calendar.MILLISECOND, 0);
-        nextSecondMinuteTime = calendar.getTimeInMillis() + 1000;
-    }
-
-    public static String getLogFileName(String dataStr) {
-        return "iot_" + dataStr + ".log";
-    }
-
-    private static synchronized void checkNextMinuteTime(long currentTimeMillis) {
-        if (currentTimeMillis > nextSecondMinuteTime) {
-            synchronized (formatterLock) {
-                logTime = timeFormatter.format(currentTimeMillis);
-                nextSecondMinuteTime = nextSecondMinuteTime + 1000;
-            }
-        }
-    }
-
-    public static String getLogPath() {
-        return logPath;
-    }
-
-
-    /**
-     * 初始化日志文件
-     */
-    static synchronized void initLogFile(long nowCurrentTimeMillis) throws IOException {
-        logPath = Environment.getExternalStorageDirectory().getPath() + "/tencent/" + packageName.replace(".", "/")
-                + "/";
-        File tmpeFile = new File(logPath);
-        if (!tmpeFile.exists()) {
-            tmpeFile.mkdirs();
-        }
-        nowUsedFile = logPath + getLogFileName(getDateStr(nowCurrentTimeMillis));
-        try {
-            tmpeFile = new File(nowUsedFile);
-            if (!tmpeFile.exists()) {
-                boolean b = tmpeFile.createNewFile();
-                if (null != writer) {
-                    writer.write(logTime + "|" + "|D|" + android.os.Build.MODEL + " " + android.os.Build.VERSION.RELEASE + " create newLogFile " + tmpeFile.getName() + " " + b + "\n");
-                    writer.flush();
-                }
-            } else {
-                if (null != writer) {
-                    writer.write(logTime + "|" + "|E|" + android.os.Build.MODEL + " " + android.os.Build.VERSION.RELEASE + "|newLogFile " + tmpeFile.getName() + " is existed.\n");
-                    writer.flush();
-                }
-            }
-        } catch (Throwable e) {
-            e.printStackTrace();
-        }
-        writer = new FileWriter(tmpeFile, true);
-    }
-
-    static void delete7DaysBeforeFiles(long today) {
-        logPath = Environment.getExternalStorageDirectory().getPath() + "/tencent/" + packageName.replace(".", "/");
-        long day = (long) 1 * 24 * 60 * 60 * 1000;
-        File tmpeFile;
-        //删除前一个月的
-        for (long i = (today - 7 * day); i > today - 37 * day; i = i - day) {
-            String date = getDateStr(i);
-            nowUsedFile = logPath + getLogFileName(date);
-            try {
-                tmpeFile = new File(nowUsedFile);
-                if (tmpeFile.exists()) {
-                    tmpeFile.delete();
-                }
-            } catch (Throwable e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    /**
-     * 日志初始化Runnable
-     */
-    public static Runnable initRunnable = new Runnable() {
-        @Override
-        public void run() {
-            if (null == sContext) {
-                return;
-            }
-
-            new Thread("QLogInitThread") {
-                @Override
-                public void run() {
-                    try {
-                        try {
-                            packageName = sContext.getPackageName();
-                        } catch (Exception e) {
-                            packageName = "unknown";
-                        }
-                        delete7DaysBeforeFiles(System.currentTimeMillis());
-                        initLogFile(System.currentTimeMillis());
-
-                        takeThread.setName("logWriteThread");
-                        takeThread.start();
-                        retryInitHandler.removeCallbacks(initRunnable);
-                    } catch (Exception e) {
-                        int times = retryInitTimes.get();
-                        System.out.println("QLogImpl init post retry " + times + " times, interval " + INTERVAL_RETRY_INIT[times]);
-                        retryInitHandler.removeCallbacks(initRunnable);
-                        retryInitHandler.postDelayed(initRunnable, INTERVAL_RETRY_INIT[times] * 60000);
-                        times++;
-                        if (times >= INTERVAL_RETRY_INIT.length) {
-                            times = 0;
-                        }
-                        retryInitTimes.set(times);
-                    }
-                }
-            }.start();
-        }
-    };
-
-    public static void writeLog(String level, String tag, String msg, Throwable tr) {
-        long now = System.currentTimeMillis();
-        if (now >= nextSecondMinuteTime) {
-            checkNextMinuteTime(now);
-        }
-
-        long threadId = Thread.currentThread().getId();
-        String message = logTime + "|" + level + "|" + String.valueOf(threadId) + "|" + tag + "|" + msg + "\n";
-        if (null != tr) {
-            message = msg + "\n" + Log.getStackTraceString(tr) + "\n";
-        }
-        addLogToCache(message);
-    }
-
-    /**
-     * 添加日志到缓存
-     */
-    private static boolean addLogToCache(String log) {
-        try {
-            logDeque.add(log);
-            return true;
-        } catch (Exception e) {
-            return false;
-        }
-    }
-
-    /**
-     * 添加缓冲头部
-     */
-    private static boolean insertLogToCacheHead(String log) {
-        try {
-            logDeque.addFirst(log);
-            return true;
-        } catch (Exception e) {
-            return false;
-        }
-    }
-
-    enum LogLevel {
-
-        OFF("OFF"),
-        ERROR("ERROR"),
-        WARN("WARN"),
-        INFO("INFO"),
-        DEBUG("DEBUG"),
-        VERBOSE("VERBOSE");
-
-        private String descr = "INFO";
-
-        private LogLevel(String descr){
-            this.descr = descr;
-        }
-    }
-
-    @Override
-    public void logV(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log) {
-        long now = System.currentTimeMillis();
-        if (now >= nextSecondMinuteTime) {
-            checkNextMinuteTime(now);
-        }
-
-        String message = logTime + "|" + LogLevel.VERBOSE + "|" + pid + "|" + tid + "|" + tag + "|" + log + "\n";
-        addLogToCache(message);
-    }
-
-    @Override
-    public void logI(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log) {
-        long now = System.currentTimeMillis();
-        if (now >= nextSecondMinuteTime) {
-            checkNextMinuteTime(now);
-        }
-
-        String message = logTime + "|" + LogLevel.INFO + "|" + pid + "|" + tid + "|" + tag + "|" + log + "\n";
-        addLogToCache(message);
-    }
-
-    @Override
-    public void logD(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log) {
-        long now = System.currentTimeMillis();
-        if (now >= nextSecondMinuteTime) {
-            checkNextMinuteTime(now);
-        }
-
-        String message = logTime + "|" + LogLevel.DEBUG + "|" + pid + "|" + tid + "|" + tag + "|" + log + "\n";
-        addLogToCache(message);
-    }
-
-    @Override
-    public void logW(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log) {
-        long now = System.currentTimeMillis();
-        if (now >= nextSecondMinuteTime) {
-            checkNextMinuteTime(now);
-        }
-
-        String message = logTime + "|" + LogLevel.WARN + "|" + pid + "|" + tid + "|" + tag + "|" + log + "\n";
-        addLogToCache(message);
-    }
-
-    @Override
-    public void logE(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log) {
-        long now = System.currentTimeMillis();
-        if (now >= nextSecondMinuteTime) {
-            checkNextMinuteTime(now);
-        }
-
-        String message = logTime + "|" + LogLevel.ERROR + "|" + pid + "|" + tid + "|" + tag + "|" + log + "\n";
-        addLogToCache(message);
-    }
-
-    @Override
-    public void logF(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log) {
-        long now = System.currentTimeMillis();
-        if (now >= nextSecondMinuteTime) {
-            checkNextMinuteTime(now);
-        }
-
-        String message = logTime + "|" + LogLevel.OFF + "|" + pid + "|" + tid + "|" + tag + "|" + log + "\n";
-        addLogToCache(message);
-    }
-
-    @Override
-    public int getLogLevel() {
-        return logLevel;
-    }
-
-    @Override
-    public void setLogLevel(int level) {
-        logLevel = level;
-    }
-}
-
Index: iot_core/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/.gitignore	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/.gitignore	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,1 +0,0 @@
-/build
Index: iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttMessage.aidl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttMessage.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/aidl/com/tencent/iot/hub/device/android/service/TXMqttMessage.aidl	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,4 +0,0 @@
-// parcelable TXMqttMessage.aidl
-package com.tencent.iot.hub.device.android.service;
-
-parcelable TXMqttMessage;
Index: iot_service/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/build.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/build.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,158 +0,0 @@
-apply plugin: 'com.android.library'
-apply plugin: 'maven-publish'
-apply plugin: 'signing'
-
-
-android {
-    compileSdkVersion 29
-    buildToolsVersion "26.0.3"
-
-    defaultConfig {
-        minSdkVersion 16
-        targetSdkVersion 29
-        versionCode 2
-        versionName "1.1"
-
-        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
-
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-
-    sourceSets {
-        main {
-            java {
-                srcDirs = ["src/main/java", "src/main/aidl"]
-            }
-            jni {
-                srcDir "src/main/jni"
-            }
-        }
-    }
-    lintOptions {
-        abortOnError false
-    }
-}
-
-task androidJavadocs(type: Javadoc) {
-    failOnError false
-    source = android.sourceSets.main.java.srcDirs
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    android.libraryVariants.all { variant ->
-        if (variant.name == 'release') {
-            owner.classpath += variant.javaCompile.classpath
-        }
-    }
-    exclude '**/R.html', '**/R.*.html', '**/index.html'
-}
-
-task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
-    classifier = 'javadoc'
-    from androidJavadocs.destinationDir
-}
-
-task androidSourcesJar(type: Jar) {
-    classifier = 'sources'
-    from android.sourceSets.main.java.srcDirs
-}
-
-def libVersion = '3.2.1-SNAPSHOT'
-ext.isReleaseVersion = !libVersion.endsWith("SNAPSHOT")
-publishing {
-    publications {
-        aar(MavenPublication) {
-            groupId 'com.tencent.iot.hub'
-            artifactId 'hub-device-android-service'
-            version libVersion
-            artifact(androidSourcesJar)
-            artifact(androidJavadocsJar)
-            artifact file('build/outputs/aar/iot_service-release.aar')
-
-            pom {
-                name = 'hub device android service'
-                description = 'Hub Device Android Service library'
-                url = 'https://github.com/tencentyun/iot-device-java/tree/master/hub-device-android'
-                licenses {
-                    license {
-                        name = 'Tencent Binary License'
-                        url = 'https://github.com/tencentyun/iot-device-java/blob/master/hub-device-android/LICENSE'
-                    }
-                }
-                developers {
-                    developer {
-                        id = 'tencent_archurtan'
-                        name = 'Tencent archurtan'
-                        email = 'archurtan@tencent.com'
-                    }
-                }
-                scm {
-                    url = 'scm:git@github.com:tencentyun/iot-device-java.git'
-                    connection = 'scm:git@github.com:tencentyun/iot-device-java.git'
-                    developerConnection = 'scm:git@github.com:tencentyun/iot-device-java.git'
-                }
-            }
-
-            pom.withXml {
-                def dependenciesNode = asNode().appendNode('dependencies')
-                configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
-                    if (dp.version != "unspecified") {
-                        def dependencyNode = dependenciesNode.appendNode('dependency')
-                        dependencyNode.appendNode('groupId', dp.group)
-                        dependencyNode.appendNode('artifactId', dp.name)
-                        dependencyNode.appendNode('version', dp.version)
-
-                        // for exclusions
-                        if (dp.excludeRules.size() > 0) {
-                            def exclusions = dependencyNode.appendNode('exclusions')
-                            dp.excludeRules.each { ExcludeRule ex ->
-                                def exclusion = exclusions.appendNode('exclusion')
-                                exclusion.appendNode('groupId', ex.group)
-                                exclusion.appendNode('artifactId', ex.module)
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    }
-    repositories {
-        maven {
-            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
-            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
-            url = libVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
-            credentials {
-                username = System.getenv("IOT_SONATYPE_USERNAME")
-                password = System.getenv("IOT_SONATYPE_PASSWORD")
-            }
-        }
-    }
-}
-
-dependencies {
-    implementation fileTree(include: ['*.jar'], dir: 'libs')
-    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
-        exclude group: 'com.android.support', module: 'support-annotations'
-    })
-    //noinspection GradleCompatible
-    implementation 'com.android.support:appcompat-v7:26.1.0'
-    implementation "org.eclipse.paho:org.eclipse.paho.client.mqttv3"
-    testImplementation 'junit:junit:4.13'
-
-    if (findProject(':hub-device-android') != null) {
-        implementation project(path: ':hub-device-android:iot_core')
-        implementation project(path: ':hub-device-java')
-    } else {
-        implementation 'com.tencent.iot.hub:hub-device-android-core:3.2.0'
-        implementation 'com.tencent.iot.hub:hub-device-java:1.0.0'
-    }
-}
-
-signing {
-    if (isReleaseVersion) {
-        sign publishing.publications.aar
-    }
-}
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/dynreg/TXMqttDynreg.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/dynreg/TXMqttDynreg.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/dynreg/TXMqttDynreg.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,269 +0,0 @@
-package com.tencent.iot.hub.device.android.core.dynreg;
-
-import android.os.NetworkOnMainThreadException;
-import android.util.Base64;
-import android.util.Log;
-
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-import java.io.BufferedReader;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.UnsupportedEncodingException;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.security.InvalidAlgorithmParameterException;
-import java.security.InvalidKeyException;
-import java.security.NoSuchAlgorithmException;
-
-import javax.crypto.BadPaddingException;
-import javax.crypto.Cipher;
-import javax.crypto.IllegalBlockSizeException;
-import javax.crypto.Mac;
-import javax.crypto.NoSuchPaddingException;
-import javax.crypto.spec.IvParameterSpec;
-import javax.crypto.spec.SecretKeySpec;
-
-
-/**
- * The type Tx iothub dynreg.
- */
-public class TXMqttDynreg {
-    private static final String TAG = "TXMQTT";
-    private static final String HMAC_ALGO = "HmacSHA1";
-    private static final String DECRYPT_MODE = "AES/CBC/NoPadding";
-
-    private String mProductKey;
-    private String mProductId;
-    private String mDynRegUrl;
-    private String mDeviceName;
-
-    private TXMqttDynregCallback mCallback;
-
-    // 默认的动态注册URL，文档链接：https://cloud.tencent.com/document/product/634/47225
-    private final String mDefaultDynRegUrl ="http://ap-guangzhou.gateway.tencentdevices.com/register/dev";
-
-
-    /**
-     * Instantiates a new Tx iothub dynreg.
-     *
-     * @param dynregUrl  the dynreg url
-     * @param productId  the product id
-     * @param productKey the product key
-     * @param deviceName the device name
-     * @param callback    the callback for operation result
-     */
-    public TXMqttDynreg(String dynregUrl, String productId, String productKey, String deviceName, TXMqttDynregCallback callback) {
-        this.mDynRegUrl = dynregUrl;
-        this.mProductId = productId;
-        this.mProductKey = productKey;
-        this.mDeviceName = deviceName;
-        this.mCallback = callback;
-    }
-
-    /**
-     * Instantiates a new Tx iothub dynreg.
-     *
-     * @param productId  the product id
-     * @param productKey the product key
-     * @param deviceName the device name
-     * @param callback callback for operation result
-     */
-    public TXMqttDynreg(String productId, String productKey, String deviceName, TXMqttDynregCallback callback) {
-        this.mDynRegUrl = mDefaultDynRegUrl;
-        this.mProductId = productId;
-        this.mProductKey = productKey;
-        this.mDeviceName = deviceName;
-        this.mCallback = callback;
-    }
-
-    private String inputStream2String(InputStream in) {
-        InputStreamReader reader = null;
-        try {
-            reader = new InputStreamReader(in, "UTF-8");
-        } catch (UnsupportedEncodingException e1) {
-            e1.printStackTrace();
-        }
-        BufferedReader br = new BufferedReader(reader);
-        StringBuilder sb = new StringBuilder();
-        String line = "";
-        try {
-            while ((line = br.readLine()) != null) {
-                sb.append(line);
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-        return sb.toString();
-    }
-
-    private class HttpPostThread extends Thread {
-        private String postData;
-        private String url;
-
-        /**
-         * Instantiates a new Http post thread.
-         *
-         * @param upStr the up str
-         * @param upUrl the up url
-         */
-        HttpPostThread(String upStr, String upUrl) {
-            this.postData = upStr;
-            this.url = upUrl;
-        }
-
-        public void run() {
-            StringBuffer serverRsp = new StringBuffer();
-            try {
-                URL url = new URL(mDynRegUrl);
-                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
-                conn.setRequestMethod("POST");
-                conn.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
-                conn.setRequestProperty("Accept","application/json");
-                conn.setDoOutput(true);
-                conn.setDoInput(true);
-                conn.setConnectTimeout(2000);
-
-                DataOutputStream os = new DataOutputStream(conn.getOutputStream());
-
-                os.writeBytes(postData);
-                os.flush();
-                os.close();
-
-                int rc = conn.getResponseCode();
-
-                String line;
-                if(rc == 200){
-                    BufferedReader br=new BufferedReader(new InputStreamReader(conn.getInputStream()));
-                    while ((line = br.readLine()) != null) {
-                        serverRsp.append(line);
-                    }
-                    conn.disconnect();
-                }else {
-                    Log.e(TAG, "Get error rc "+ rc);
-                    conn.disconnect();
-
-                    mCallback.onFailedDynreg(new Throwable("Failed to get response from server, rc is " + rc));
-                    return;
-                }
-
-            } catch (IOException|NetworkOnMainThreadException e) {
-                Log.e(TAG, e.toString());
-                e.printStackTrace();
-
-                mCallback.onFailedDynreg(e);
-                return;
-            }
-
-            String plStr;
-            int actLen;
-            Log.i(TAG, "Get response string " + serverRsp);
-            try {
-                JSONObject rspObj = new JSONObject(serverRsp.toString());
-                plStr = rspObj.getString("payload");
-                actLen = rspObj.getInt("len");
-            } catch (JSONException e) {
-                Log.e(TAG, e.toString());
-                e.printStackTrace();
-                mCallback.onFailedDynreg(e, "receive Msg " + serverRsp);
-                return ;
-            }
-
-            byte[] plBytes;
-            try {
-                SecretKeySpec skeySpec = new SecretKeySpec(mProductKey.substring(0, 16).getBytes(), "AES");
-                Cipher cipher = Cipher.getInstance(DECRYPT_MODE);
-                byte [] ivArr = new byte[cipher.getBlockSize()];
-                for (int i = 0; i < 16; i++) {
-                    ivArr[i] = (byte)'0';
-                }
-                cipher.init(Cipher.DECRYPT_MODE, skeySpec, new IvParameterSpec(ivArr));
-                plBytes = cipher.doFinal(Base64.decode(plStr, Base64.DEFAULT));
-            } catch (NoSuchAlgorithmException|NoSuchPaddingException|InvalidKeyException|IllegalBlockSizeException|BadPaddingException|InvalidAlgorithmParameterException e) {
-                e.printStackTrace();
-                mCallback.onFailedDynreg(e);
-                return;
-            }
-            String rspSb = new String(plBytes);
-            rspSb = rspSb.substring(0, actLen);
-
-            try {
-                JSONObject rspObj = new JSONObject(rspSb.toString());
-                int encryptionType = rspObj.getInt("encryptionType");
-
-                // Cert
-                if (encryptionType == 1) {
-                    mCallback.onGetDeviceCert(rspObj.getString("clientCert"), rspObj.getString("clientKey"));
-                } else if (encryptionType == 2) {
-                    // PSK
-                    mCallback.onGetDevicePSK(rspObj.getString("psk"));
-                } else {
-                    mCallback.onFailedDynreg(new Throwable("Get wrong encryption type:" + encryptionType));
-                }
-            } catch (JSONException e) {
-                e.printStackTrace();
-
-                mCallback.onFailedDynreg(e);
-                return;
-            }
-        }
-    }
-
-    /**
-     * Do dynamic register
-     *
-     * @return true for register OK, false for register ERROR
-     */
-    public boolean doDynamicRegister() {
-        Mac mac = null;
-
-        try {
-            mac = Mac.getInstance(HMAC_ALGO);
-        } catch (NoSuchAlgorithmException e) {
-            e.printStackTrace();
-            return false;
-        }
-        int randNum = (int)(Math.random() * ((1 << 31) - 1));
-        String hmacSign;
-        int timestamp = (int)(System.currentTimeMillis() / 1000);
-        SecretKeySpec signKey = new SecretKeySpec(mProductKey.getBytes(), HMAC_ALGO);
-
-        String signSourceStr = String.format("deviceName=%s&nonce=%d&productId=%s&timestamp=%d", mDeviceName, randNum, mProductId, timestamp);
-
-        try {
-            mac.init(signKey);
-            byte[] rawHmac = mac.doFinal(signSourceStr.getBytes());
-            StringBuffer sBuffer = new StringBuffer();
-            for (int i = 0; i < rawHmac.length; i++) {
-                sBuffer.append(String.format("%02x", rawHmac[i] & 0xff));
-            }
-
-            hmacSign = Base64.encodeToString(sBuffer.toString().getBytes(), Base64.NO_WRAP);
-        } catch (InvalidKeyException e) {
-            e.printStackTrace();
-            return false;
-        }
-
-        final JSONObject obj = new JSONObject();
-        try {
-            obj.put("deviceName", mDeviceName);
-            obj.put("nonce", randNum);
-            obj.put("productId", mProductId);
-            obj.put("timestamp", timestamp);
-            obj.put("signature", hmacSign);
-        } catch (JSONException e) {
-            e.printStackTrace();
-            return false;
-        }
-
-        TXLog.i(TAG, "Register request " + obj);
-        HttpPostThread httpThread = new HttpPostThread(obj.toString(), mDefaultDynRegUrl);
-        httpThread.start();
-
-        return true;
-    }
-}
Index: iot_service/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/proguard-rules.pro	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/proguard-rules.pro	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,25 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in /Users/vinsonhuang/Library/Android/sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
-
-# Uncomment this to preserve the line number information for
-# debugging stack traces.
-#-keepattributes SourceFile,LineNumberTable
-
-# If you keep the line number information, uncomment this to
-# hide the original source file name.
-#-renamesourcefileattribute SourceFile
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLogConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLogConstants.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/log/TXMqttLogConstants.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,21 +0,0 @@
-package com.tencent.iot.hub.device.android.core.log;
-
-public interface TXMqttLogConstants {
-    /**
-     * 请求日志等级相关
-     */
-    String TYPE = "type";
-    String LOG = "log";
-    String LOG_LEVEL= "log_level";
-    String GET_LOG_LEVEL = "get_log_level";
-    String CLIENT_TOKEN = "clientToken";
-
-    /**
-     * 日志等级
-     */
-    int LEVEL_FATAL = 0;
-    int LEVEL_ERROR = 1;
-    int LEVEL_WARN  = 2;
-    int LEVEL_INFO  = 3;
-    int LEVEL_DEBUG = 4;
-}
Index: iot_service/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/res/values/strings.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/res/values/strings.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,3 +0,0 @@
-<resources>
-    <string name="app_name">iot_service</string>
-</resources>
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/AsymcSslUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/AsymcSslUtils.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/AsymcSslUtils.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,224 +0,0 @@
-package com.tencent.iot.hub.device.android.core.util;
-
-import android.content.Context;
-import android.content.res.AssetManager;
-import android.util.Base64;
-
-import com.tencent.iot.hub.device.java.core.util.Asn1Object;
-import com.tencent.iot.hub.device.java.core.util.DerParser;
-
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.math.BigInteger;
-import java.security.GeneralSecurityException;
-import java.security.KeyFactory;
-import java.security.PrivateKey;
-import java.security.SecureRandom;
-import java.security.cert.CertificateException;
-import java.security.cert.X509Certificate;
-import java.security.spec.KeySpec;
-import java.security.spec.PKCS8EncodedKeySpec;
-import java.security.spec.RSAPrivateCrtKeySpec;
-import java.util.Random;
-
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSocketFactory;
-import javax.net.ssl.TrustManager;
-import javax.net.ssl.X509TrustManager;
-
-
-public class AsymcSslUtils {
-
-    public static final String TAG = "iot.AsymcSslUtils";
-
-    private static String PASSWORD = String.valueOf(new Random(System.currentTimeMillis()).nextInt());
-
-    /**
-     * 证书文件及Key文件存放在Android asset目录下，通过AssetManager读取文件内容获取输入流，
-     * 通过输入流构造双向认证SSLSocketFactory
-     *
-     * @param context              Android上下文，可使用进程上下文/Activity
-     * @param clientCrtFileName    客户端证书文件名
-     * @param clientPriKeyFileName 客户端私钥文件名
-     * @return
-     */
-    public static SSLSocketFactory getSocketFactoryByAssetsFile(Context context, final String clientCrtFileName, final String clientPriKeyFileName) {
-        SSLSocketFactory factory = null;
-
-        AssetManager assetManager = context.getAssets();
-        if (assetManager == null) {
-            return null;
-        }
-
-        InputStream clientInputStream = null;
-        InputStream keyInputStream = null;
-        try {
-            clientInputStream = assetManager.open(clientCrtFileName);
-            keyInputStream = assetManager.open(clientPriKeyFileName);
-
-            factory = getSocketFactoryByStream(clientInputStream, keyInputStream);;
-        } catch (IOException e) {
-            TXLog.e(TAG, "getSocketFactory failed, cannot open CRT Files.", e);
-        }finally {
-            if (clientInputStream != null) {
-                try {
-                    clientInputStream.close();
-                }catch (Exception e) {
-
-                }
-            }
-
-            if (keyInputStream != null) {
-                try {
-                    keyInputStream.close();
-                }catch (Exception e) {
-
-                }
-            }
-        }
-
-        return factory;
-    }
-
-    /**
-     * 证书文件及Key文件存放在Android 本地存储中，通过FileInputStream读取文件内容输入流
-     * 通过输入流解析构造双向认证SSLSocketFactory
-     *
-     * @param clientCrtFileName    客户端证书文件名，要求全路径
-     * @param clientPriKeyFileName 客户端私钥文件名，要求全路径
-     * @return
-     */
-    public static SSLSocketFactory getSocketFactoryByFile(final String clientCrtFileName, final String clientPriKeyFileName) {
-        return com.tencent.iot.hub.device.java.core.util.AsymcSslUtils.getSocketFactoryByFile(clientCrtFileName, clientPriKeyFileName);
-    }
-
-    /**
-     * 获取双向认证SSLSocketFactory
-     *
-     * @param clientInput 设备证书文件输入流
-     * @param keyInput    设备私钥文件输入流
-     * @return
-     */
-    public static SSLSocketFactory getSocketFactoryByStream(final InputStream clientInput, final InputStream keyInput) {
-        return com.tencent.iot.hub.device.java.core.util.AsymcSslUtils.getSocketFactoryByStream(clientInput, keyInput);
-    }
-
-    public static SSLContext getDefaultSLLContext() {
-        SSLContext sslContext = null;
-        try {
-            sslContext = SSLContext.getInstance("TLS");
-            sslContext.init(null, new TrustManager[] {trustManagers}, new SecureRandom());
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-        return sslContext;
-    }
-
-    /**
-     * 信任管理器
-     */
-    private static TrustManager trustManagers = new X509TrustManager() {
-
-        @Override
-        public void checkClientTrusted(X509Certificate[] chain, String authType)
-                throws CertificateException {}
-
-        @Override
-        public void checkServerTrusted(X509Certificate[] chain, String authType)
-                throws CertificateException {
-
-        }
-
-        @Override
-        public X509Certificate[] getAcceptedIssuers() {
-            return new X509Certificate[0];
-        }
-    };
-
-    /**
-     * 获取SSLSocketFactory
-     *
-     * @return
-     */
-    public static SSLSocketFactory getSocketFactory() {
-        return com.tencent.iot.hub.device.java.core.util.AsymcSslUtils.getSocketFactory();
-    }
-
-    /**
-     * 获取自定义CA证书的SSLSocketFactory
-     *
-     * @param customCA 自定义CA证书
-     * @return SSLSocketFactory
-     */
-    public static SSLSocketFactory getSocketFactory(String customCA) {
-        return com.tencent.iot.hub.device.java.core.util.AsymcSslUtils.getSocketFactory(customCA);
-    }
-
-    private static PrivateKey getPrivateKey(InputStream stream, String algorithm) throws IOException,
-            GeneralSecurityException {
-        PrivateKey key = null;
-        boolean isRSAKey = false;
-
-        BufferedReader br = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
-        StringBuilder builder = new StringBuilder();
-        boolean inKey = false;
-        for (String line = br.readLine(); line != null; line = br.readLine()) {
-            if (!inKey) {
-                if (line.startsWith("-----BEGIN ") && line.endsWith(" PRIVATE KEY-----")) {
-                    inKey = true;
-                    isRSAKey = line.contains("RSA");
-                }
-                continue;
-            } else {
-                if (line.startsWith("-----END ") && line.endsWith(" PRIVATE KEY-----")) {
-                    inKey = false;
-                    isRSAKey = line.contains("RSA");
-                    break;
-                }
-                builder.append(line);
-            }
-        }
-        KeySpec keySpec = null;
-        byte[] encoded = Base64.decode(builder.toString(), Base64.DEFAULT);
-        if (isRSAKey) {
-            keySpec = getRSAKeySpec(encoded);
-        } else {
-            keySpec = new PKCS8EncodedKeySpec(encoded);
-        }
-        KeyFactory kf = KeyFactory.getInstance((algorithm == null) ? "RSA" : algorithm);
-        key = kf.generatePrivate(keySpec);
-
-        return key;
-    }
-
-    private static RSAPrivateCrtKeySpec getRSAKeySpec(byte[] keyBytes) throws IOException {
-
-        DerParser parser = new DerParser(keyBytes);
-
-        Asn1Object sequence = parser.read();
-        if (sequence.getType() != DerParser.SEQUENCE)
-            throw new IOException("Invalid DER: not a sequence"); //$NON-NLS-1$
-
-        // Parse inside the sequence
-        parser = sequence.getParser();
-
-        parser.read(); // Skip version
-        BigInteger modulus = parser.read().getInteger();
-        BigInteger publicExp = parser.read().getInteger();
-        BigInteger privateExp = parser.read().getInteger();
-        BigInteger prime1 = parser.read().getInteger();
-        BigInteger prime2 = parser.read().getInteger();
-        BigInteger exp1 = parser.read().getInteger();
-        BigInteger exp2 = parser.read().getInteger();
-        BigInteger crtCoef = parser.read().getInteger();
-
-        RSAPrivateCrtKeySpec keySpec = new RSAPrivateCrtKeySpec(modulus, publicExp, privateExp, prime1, prime2, exp1,
-                exp2, crtCoef);
-
-        return keySpec;
-    }
-}
-
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/TXLog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/TXLog.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/util/TXLog.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,242 +0,0 @@
-package com.tencent.iot.hub.device.android.core.util;
-
-import android.content.Context;
-import android.os.Looper;
-import android.os.Process;
-import android.util.Log;
-
-public class TXLog {
-    private static final String TAG = "mars.xlog.log";
-
-    public static final int LEVEL_VERBOSE = 0;
-    public static final int LEVEL_DEBUG = 1;
-    public static final int LEVEL_INFO = 2;
-    public static final int LEVEL_WARNING = 3;
-    public static final int LEVEL_ERROR = 4;
-    public static final int LEVEL_FATAL = 5;
-    public static final int LEVEL_NONE = 6;
-
-    public static Context toastSupportContext = null;
-
-    public interface LogImp {
-
-        void logV(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log);
-
-        void logI(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log);
-
-        void logD(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log);
-
-        void logW(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log);
-
-        void logE(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log);
-
-        void logF(String tag, String filename, String funcname, int line, int pid, long tid, long maintid, String log);
-
-        int getLogLevel();
-
-        void setLogLevel(final int level);
-
-    }
-
-    private static LogImp logImp = new TXLogImpl();
-
-    public static void setLogImp(LogImp imp) {
-        logImp = imp;
-    }
-
-    public static LogImp getImpl() {
-        return logImp;
-    }
-
-    public static int getLogLevel() {
-        if (logImp != null) {
-            return logImp.getLogLevel();
-        }
-        return LEVEL_NONE;
-    }
-
-    public static void setLevel(final int level) {
-        logImp.setLogLevel(level);
-    }
-
-    /**
-     * use f(tag, format, obj) instead
-     *
-     * @param tag
-     * @param msg
-     */
-    public static void f(final String tag, final String msg) {
-        f(tag, msg, (Object[]) null);
-    }
-
-    /**
-     * use e(tag, format, obj) instead
-     *
-     * @param tag
-     * @param msg
-     */
-    public static void e(final String tag, final String msg) {
-        e(tag, msg, (Object[]) null);
-    }
-
-    public static void e(final String tag, final String msg, Throwable tr) {
-        e(tag, tr, msg, (Object[]) null);
-    }
-
-    /**
-     * use w(tag, format, obj) instead
-     *
-     * @param tag
-     * @param msg
-     */
-    public static void w(final String tag, final String msg) {
-        w(tag, msg, (Object[]) null);
-    }
-
-    /**
-     * use i(tag, format, obj) instead
-     *
-     * @param tag
-     * @param msg
-     */
-    public static void i(final String tag, final String msg) {
-        i(tag, msg, (Object[]) null);
-    }
-
-    /**
-     * use d(tag, format, obj) instead
-     *
-     * @param tag
-     * @param msg
-     */
-    public static void d(final String tag, final String msg) {
-        d(tag, msg, (Object[]) null);
-    }
-
-    /**
-     * use v(tag, format, obj) instead
-     *
-     * @param tag
-     * @param msg
-     */
-    public static void v(final String tag, final String msg) {
-        v(tag, msg, (Object[]) null);
-    }
-
-    public static void f(String tag, final String format, final Object... obj) {
-        if (logImp != null) {
-            final String log = obj == null ? format : String.format(format, obj);
-            logImp.logF(tag, "", "", 0, Process.myPid(), Thread.currentThread().getId(), Looper.getMainLooper().getThread().getId(), log);
-        }
-    }
-
-    public static void e(String tag, final String format, final Object... obj) {
-        if (logImp != null) {
-            String log = obj == null ? format : String.format(format, obj);
-            if (log == null) {
-                log = "";
-            }
-
-            Log.e(tag, log);
-
-            logImp.logE(tag, "", "", 0, Process.myPid(), Thread.currentThread().getId(), Looper.getMainLooper().getThread().getId(), log);
-        }
-    }
-
-    public static void w(String tag, final String format, final Object... obj) {
-        if (logImp != null) {
-            String log = obj == null ? format : String.format(format, obj);
-            if (log == null) {
-                log = "";
-            }
-
-            Log.w(tag, log);
-
-            logImp.logW(tag, "", "", 0, Process.myPid(), Thread.currentThread().getId(), Looper.getMainLooper().getThread().getId(), log);
-        }
-    }
-
-    public static void i(String tag, final String format, final Object... obj) {
-        if (logImp != null) {
-            String log = obj == null ? format : String.format(format, obj);
-            if (log == null) {
-                log = "";
-            }
-
-            Log.i(tag, log);
-
-            logImp.logI(tag, "", "", 0, Process.myPid(), Thread.currentThread().getId(), Looper.getMainLooper().getThread().getId(), log);
-        }
-    }
-
-    public static void d(String tag, final String format, final Object... obj) {
-        if (logImp != null) {
-            String log = obj == null ? format : String.format(format, obj);
-            if (log == null) {
-                log = "";
-            }
-
-            Log.d(tag, log);
-
-            logImp.logD(tag, "", "", 0, Process.myPid(), Thread.currentThread().getId(), Looper.getMainLooper().getThread().getId(), log);
-        }
-    }
-
-    public static void v(String tag, final String format, final Object... obj) {
-        if (logImp != null) {
-            String log = obj == null ? format : String.format(format, obj);
-            if (log == null) {
-                log = "";
-            }
-
-            Log.v(tag, log);
-
-            logImp.logV(tag, "", "", 0, Process.myPid(), Thread.currentThread().getId(), Looper.getMainLooper().getThread().getId(), log);
-        }
-    }
-
-    public static void e(String tag, Throwable tr, final String format, final Object... obj) {
-        if (logImp != null) {
-            String log = obj == null ? format : String.format(format, obj);
-            if (log == null) {
-                log = "";
-            }
-
-            Log.e(tag, log, tr);
-
-            log += "\n" + Log.getStackTraceString(tr);
-            logImp.logE(tag, "", "", 0, Process.myPid(), Thread.currentThread().getId(), Looper.getMainLooper().getThread().getId(), log);
-        }
-    }
-
-    private static final String SYS_INFO;
-
-    static {
-        final StringBuilder sb = new StringBuilder();
-        try {
-            sb.append("VERSION.RELEASE:[" + android.os.Build.VERSION.RELEASE);
-            sb.append("] VERSION.CODENAME:[" + android.os.Build.VERSION.CODENAME);
-            sb.append("] VERSION.INCREMENTAL:[" + android.os.Build.VERSION.INCREMENTAL);
-            sb.append("] BOARD:[" + android.os.Build.BOARD);
-            sb.append("] DEVICE:[" + android.os.Build.DEVICE);
-            sb.append("] DISPLAY:[" + android.os.Build.DISPLAY);
-            sb.append("] FINGERPRINT:[" + android.os.Build.FINGERPRINT);
-            sb.append("] HOST:[" + android.os.Build.HOST);
-            sb.append("] MANUFACTURER:[" + android.os.Build.MANUFACTURER);
-            sb.append("] MODEL:[" + android.os.Build.MODEL);
-            sb.append("] PRODUCT:[" + android.os.Build.PRODUCT);
-            sb.append("] TAGS:[" + android.os.Build.TAGS);
-            sb.append("] TYPE:[" + android.os.Build.TYPE);
-            sb.append("] USER:[" + android.os.Build.USER + "]");
-        } catch (Throwable e) {
-            e.printStackTrace();
-        }
-
-        SYS_INFO = sb.toString();
-    }
-
-    public static String getSysInfo() {
-        return SYS_INFO;
-    }
-}
-
Index: iot_core/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/gradle.properties	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/gradle.properties	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,23 +0,0 @@
-# ��İ���
-PROJ_GROUP=com.qcloud.iot
-# ���ID
-PROJ_ARTIFACTID=iot-core
-# ��İ汾
-PROJ_VERSION=2.1.0
-### ��� gradle���õ���ʽ���� $PROJ_GROUP:$PROJ_ARTIFACTID:$PROJ_VERSION
-
-# ����
-PROJ_NAME=IoT-Core
-# �����Ŀ��ҳ
-PROJ_WEBSITEURL=https://github.com/tencentyun/qcloud-iot-sdk-android
-# ������ٵ�ַ
-PROJ_ISSUETRACKERURL=https://github.com/tencentyun/qcloud-iot-sdk-android/issues
-# VCS ��ַ
-PROJ_VCSURL=https://github.com/tencentyun/qcloud-iot-sdk-android.git
-# ��ļ�����
-PROJ_DESCRIPTION=
-
-# �����ߵ���Ϣ, ��������
-DEVELOPER_ID=shockcao
-DEVELOPER_NAME=Cao ShaoKun
-DEVELOPER_EMAIL=shockcao@tencent.com
\ No newline at end of file
Index: iot_core/src/main/java/com/tencent/iot/hub/device/android/core/mqtt/TXAlarmPingSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_core/src/main/java/com/tencent/iot/hub/device/android/core/mqtt/TXAlarmPingSender.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_core/src/main/java/com/tencent/iot/hub/device/android/core/mqtt/TXAlarmPingSender.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,147 +0,0 @@
-package com.tencent.iot.hub.device.android.core.mqtt;
-
-import android.annotation.SuppressLint;
-import android.app.AlarmManager;
-import android.app.PendingIntent;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.os.Build;
-import android.os.PowerManager;
-
-import com.tencent.iot.hub.device.android.core.util.TXLog;
-import com.tencent.iot.hub.device.java.core.mqtt.TXMqttConstants;
-
-import org.eclipse.paho.client.mqttv3.IMqttActionListener;
-import org.eclipse.paho.client.mqttv3.IMqttToken;
-import org.eclipse.paho.client.mqttv3.MqttPingSender;
-import org.eclipse.paho.client.mqttv3.internal.ClientComms;
-
-
-public class TXAlarmPingSender implements MqttPingSender {
-
-    public static final String TAG = "iot.TXAlarmPingSender";
-
-    private ClientComms mComms;
-    private Context mContext;
-    private BroadcastReceiver mAlarmReceiver;
-    private TXAlarmPingSender that;
-    private PendingIntent pendingIntent;
-    private volatile boolean hasStarted = false;
-
-    public TXAlarmPingSender(Context context) {
-        this.mContext = context;
-        that = this;
-    }
-
-    @Override
-    public void init(ClientComms comms) {
-        this.mComms = comms;
-        this.mAlarmReceiver = new AlarmReceiver();
-    }
-
-    @Override
-    public void start() {
-        String action = TXMqttConstants.PING_SENDER + mComms.getClient().getClientId();
-        TXLog.d(TAG, "Register alarmreceiver to Context " + action);
-        if (mContext != null && mAlarmReceiver != null) {
-            mContext.registerReceiver(mAlarmReceiver, new IntentFilter(action));
-        }
-
-        pendingIntent = PendingIntent.getBroadcast(mContext, 0, new Intent(action), PendingIntent.FLAG_UPDATE_CURRENT);
-
-        schedule(mComms.getKeepAlive());
-        hasStarted = true;
-    }
-
-    @Override
-    public void stop() {
-
-        TXLog.d(TAG, "Unregister alarmreceiver to Context " + mComms.getClient().getClientId());
-        if(hasStarted){
-            if(pendingIntent != null){
-                // Cancel Alarm.
-                AlarmManager alarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
-                alarmManager.cancel(pendingIntent);
-            }
-
-            hasStarted = false;
-            try{
-                mContext.unregisterReceiver(mAlarmReceiver);
-            }catch(IllegalArgumentException e){
-                //Ignore unregister errors.			
-            }
-        }
-    }
-
-    @Override
-    public void schedule(long delayInMilliseconds) {
-        long nextAlarmInMilliseconds = System.currentTimeMillis() + delayInMilliseconds;
-        TXLog.d(TAG, "Schedule next alarm at " + nextAlarmInMilliseconds);
-        AlarmManager alarmManager = (AlarmManager) mContext.getSystemService(Context.ALARM_SERVICE);
-
-        if(Build.VERSION.SDK_INT >= 23){
-            // In SDK 23 and above, dosing will prevent setExact, setExactAndAllowWhileIdle will force
-            // the device to run this task whilst dosing.
-            TXLog.d(TAG, "Alarm scheule using setExactAndAllowWhileIdle, next: " + delayInMilliseconds);
-            alarmManager.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, nextAlarmInMilliseconds, pendingIntent);
-        } else if (Build.VERSION.SDK_INT >= 19) {
-            TXLog.d(TAG, "Alarm scheule using setExact, delay: " + delayInMilliseconds);
-            alarmManager.setExact(AlarmManager.RTC_WAKEUP, nextAlarmInMilliseconds, pendingIntent);
-        } else {
-            alarmManager.set(AlarmManager.RTC_WAKEUP, nextAlarmInMilliseconds, pendingIntent);
-        }
-    }
-
-    /**
-     * PingReq发送类
-     */
-    class AlarmReceiver extends BroadcastReceiver {
-
-        private PowerManager.WakeLock wakelock;
-
-        private final String wakeLockTag = TXMqttConstants.PING_WAKELOCK + that.mComms.getClient().getClientId();
-
-        @Override
-        @SuppressLint("Wakelock")
-        public void onReceive(Context context, Intent intent) {
-            // According to the docs, "Alarm Manager holds a CPU wake lock as
-            // long as the alarm receiver's onReceive() method is executing.
-            // This guarantees that the phone will not sleep until you have
-            // finished handling the broadcast.", but this class still get
-            // a wake lock to wait for ping finished.
-
-            TXLog.d(TAG, "Sending Ping at: " + System.currentTimeMillis());
-
-            PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
-            wakelock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, wakeLockTag);
-            wakelock.acquire();
-
-            // Assign new callback to token to execute code after PingResq
-            // arrives. Get another wakelock even receiver already has one,
-            // release it until ping response returns.
-            IMqttToken token = mComms.checkForActivity(new IMqttActionListener() {
-
-                @Override
-                public void onSuccess(IMqttToken asyncActionToken) {
-                    TXLog.d(TAG, "Success. Release lock(" + wakeLockTag + "):" + System.currentTimeMillis());
-                    //Release wakelock when it is done.
-                    wakelock.release();
-                }
-
-                @Override
-                public void onFailure(IMqttToken asyncActionToken, Throwable exception) {
-                    TXLog.d(TAG, "Failure. Release lock(" + wakeLockTag + "):" + System.currentTimeMillis());
-                    //Release wakelock when it is done.
-                    wakelock.release();
-                }
-            });
-
-
-            if (token == null && wakelock.isHeld()) {
-                wakelock.release();
-            }
-        }
-    }
-}
Index: iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttMessage.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ iot_service/src/main/java/com/tencent/iot/hub/device/android/service/TXMqttMessage.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
@@ -1,124 +0,0 @@
-package com.tencent.iot.hub.device.android.service;
-
-import android.os.Parcel;
-import android.os.Parcelable;
-
-import org.eclipse.paho.client.mqttv3.MqttMessage;
-
-import java.util.Arrays;
-
-/**
- * 该类负责序列化MqttMessage相关信息
- */
-
-public class TXMqttMessage implements Parcelable {
-    private byte[] mPayload;
-    private int mQos = 1;
-    private boolean mRetained = false;
-    private int mMessageId;
-
-    protected TXMqttMessage(Parcel in) {
-        mPayload = in.createByteArray();
-        mQos = in.readInt();
-        mRetained = in.readByte() != 0;
-        mMessageId = in.readInt();
-    }
-
-    public TXMqttMessage() {
-        setPayload(new byte[]{});
-    }
-
-    public TXMqttMessage(MqttMessage mqttMessage) {
-        mPayload = mqttMessage.getPayload();
-        mQos = mqttMessage.getQos();
-        mRetained = mqttMessage.isRetained();
-        mMessageId = mqttMessage.getId();
-    }
-
-    public static final Creator<TXMqttMessage> CREATOR = new Creator<TXMqttMessage>() {
-        @Override
-        public TXMqttMessage createFromParcel(Parcel in) {
-            return new TXMqttMessage(in);
-        }
-
-        @Override
-        public TXMqttMessage[] newArray(int size) {
-            return new TXMqttMessage[size];
-        }
-    };
-
-    @Override
-    public int describeContents() {
-        return 0;
-    }
-
-    @Override
-    public void writeToParcel(Parcel parcel, int i) {
-        parcel.writeByteArray(mPayload);
-        parcel.writeInt(mQos);
-        parcel.writeByte((byte) (mRetained ? 1 : 0));
-        parcel.writeInt(mMessageId);
-    }
-
-    public void readFromParcel(Parcel in) {
-        mPayload = in.createByteArray();
-        mQos = in.readInt();
-        mRetained = in.readByte() != 0;
-        mMessageId = in.readInt();
-    }
-
-    public MqttMessage transToMqttMessage() {
-        MqttMessage mqttMessage = new MqttMessage();
-        mqttMessage.setQos(mQos);
-        mqttMessage.setPayload(mPayload);
-        mqttMessage.setId(mMessageId);
-        mqttMessage.setRetained(mRetained);
-        return mqttMessage;
-    }
-
-    public byte[] getPayload() {
-        return mPayload;
-    }
-
-    public TXMqttMessage setPayload(byte[] payload) {
-        this.mPayload = payload;
-        return this;
-    }
-
-    public int getQos() {
-        return mQos;
-    }
-
-    public TXMqttMessage setQos(int qos) {
-        this.mQos = qos;
-        return this;
-    }
-
-    public boolean isRetained() {
-        return mRetained;
-    }
-
-    public TXMqttMessage setRetained(boolean retained) {
-        this.mRetained = retained;
-        return this;
-    }
-
-    public int getMessageId() {
-        return mMessageId;
-    }
-
-    public TXMqttMessage setMessageId(int messageId) {
-        this.mMessageId = messageId;
-        return this;
-    }
-
-    @Override
-    public String toString() {
-        return "TXMqttMessage{" +
-                ", mPayload=" + Arrays.toString(mPayload) +
-                ", mQos=" + mQos +
-                ", mRetained=" + mRetained +
-                ", mMessageId=" + mMessageId +
-                '}';
-    }
-}
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n            <option value=\"$PROJECT_DIR$/jjdxm-ijkplayer\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n        <option name=\"useQualifiedModuleNames\" value=\"true\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ .idea/gradle.xml	(date 1606791714902)
@@ -11,6 +11,10 @@
           <set>
             <option value="$PROJECT_DIR$" />
             <option value="$PROJECT_DIR$/app" />
+            <option value="$PROJECT_DIR$/explorer-device-java" />
+            <option value="$PROJECT_DIR$/hub-device-java" />
+            <option value="$PROJECT_DIR$/iot_core" />
+            <option value="$PROJECT_DIR$/iot_service" />
             <option value="$PROJECT_DIR$/jjdxm-ijkplayer" />
           </set>
         </option>
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\n\r\nProperties props = new Properties()\r\nprops.load(new FileInputStream(file(rootProject.file(\"signing.properties\"))))\r\n\r\nandroid {\r\n\r\n    signingConfigs {\r\n        release {\r\n            keyAlias props['signing.alias']\r\n            keyPassword props['signing.password']\r\n            storeFile file(rootProject.file(\"debug.keystore\"))\r\n            storePassword props['signing.password']\r\n        }\r\n\r\n        debug {\r\n            keyAlias props['signing.jjdxm_alias']\r\n            keyPassword props['signing.jjdxm_password']\r\n            storeFile file(rootProject.file(\"debug.keystore\"))\r\n            storePassword props['signing.jjdxm_password']\r\n        }\r\n    }\r\n\r\n    compileSdkVersion 30\r\n    buildToolsVersion rootProject.ext.buildToolsVersion\r\n\r\n    defaultConfig {\r\n        applicationId \"com.dou361.jjdxm_ijkplayer\"\r\n        minSdkVersion rootProject.ext.minSdkVersion\r\n        targetSdkVersion rootProject.ext.targetSdkVersion\r\n        versionCode rootProject.ext.versionCode\r\n        versionName rootProject.ext.versionName\r\n//        ndk {\r\n//            abiFilters \"armeabi-v7a\"  // 指定要ndk需要兼容的架构(这样其他依赖包里mips,x86,armeabi,arm-v8之类的so会被过滤掉)\r\n//        }\r\n    }\r\n    buildTypes {\r\n\r\n        debug {\r\n            signingConfig signingConfigs.debug\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n\r\n        release {\r\n            signingConfig signingConfigs.release\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(include: ['*.jar'], dir: 'libs')\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'com.android.support.constraint:constraint-layout:1.1.3'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n\r\n    testImplementation 'junit:junit:4.12'\r\n    implementation rootProject.ext.jjdxm_v7\r\n    implementation 'com.jakewharton:butterknife:7.0.1'\r\n    implementation 'com.github.bumptech.glide:glide:3.7.0'\r\n    implementation project(':jjdxm-ijkplayer')\r\n\r\n//    根据需要支持去拓展，在jjdxm-ijkplayer中默认加入了armv7a的了\r\n    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'\r\n    implementation 'tv.danmaku.ijk.media:ijkplayer-armv7a:0.8.8'\r\n    implementation 'tv.danmaku.ijk.media:ijkplayer-arm64:0.8.8'\r\n    implementation 'tv.danmaku.ijk.media:ijkplayer-x86:0.8.8'\r\n    implementation 'tv.danmaku.ijk.media:ijkplayer-x86_64:0.8.8'\r\n\r\n\r\n    //网络获取直播视频\r\n    implementation 'com.squareup.retrofit2:retrofit:2.0.0-beta4'\r\n    implementation 'com.squareup.retrofit2:converter-scalars:2.0.0'\r\n    implementation 'com.squareup.retrofit2:converter-gson:2.0.0-beta4'\r\n    implementation 'com.squareup.okhttp3:okhttp:3.0.1'\r\n    implementation 'com.alibaba:fastjson:1.2.14'\r\n\r\n    implementation 'com.tencent.iot.hub:hub-device-java:1.0.0'\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ app/build.gradle	(date 1606790269522)
@@ -77,7 +77,9 @@
     implementation 'com.squareup.okhttp3:okhttp:3.0.1'
     implementation 'com.alibaba:fastjson:1.2.14'
 
-    implementation 'com.tencent.iot.hub:hub-device-java:1.0.0'
+
+    implementation project(':iot_core')
+    implementation project(':iot_service')
 
 
 }
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/modules/zz_ijkplayer-master.iml\" filepath=\"$PROJECT_DIR$/.idea/modules/zz_ijkplayer-master.iml\" />\r\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/modules/app/zz_ijkplayer-master.app.iml\" filepath=\"$PROJECT_DIR$/.idea/modules/app/zz_ijkplayer-master.app.iml\" />\r\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/modules/jjdxm-ijkplayer/zz_ijkplayer-master.jjdxm-ijkplayer.iml\" filepath=\"$PROJECT_DIR$/.idea/modules/jjdxm-ijkplayer/zz_ijkplayer-master.jjdxm-ijkplayer.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ .idea/modules.xml	(date 1606791749548)
@@ -4,6 +4,10 @@
     <modules>
       <module fileurl="file://$PROJECT_DIR$/.idea/modules/zz_ijkplayer-master.iml" filepath="$PROJECT_DIR$/.idea/modules/zz_ijkplayer-master.iml" />
       <module fileurl="file://$PROJECT_DIR$/.idea/modules/app/zz_ijkplayer-master.app.iml" filepath="$PROJECT_DIR$/.idea/modules/app/zz_ijkplayer-master.app.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/modules/explorer-device-java/zz_ijkplayer-master.explorer-device-java.iml" filepath="$PROJECT_DIR$/.idea/modules/explorer-device-java/zz_ijkplayer-master.explorer-device-java.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/modules/hub-device-java/zz_ijkplayer-master.hub-device-java.iml" filepath="$PROJECT_DIR$/.idea/modules/hub-device-java/zz_ijkplayer-master.hub-device-java.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/modules/iot_core/zz_ijkplayer-master.iot_core.iml" filepath="$PROJECT_DIR$/.idea/modules/iot_core/zz_ijkplayer-master.iot_core.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/modules/iot_service/zz_ijkplayer-master.iot_service.iml" filepath="$PROJECT_DIR$/.idea/modules/iot_service/zz_ijkplayer-master.iot_service.iml" />
       <module fileurl="file://$PROJECT_DIR$/.idea/modules/jjdxm-ijkplayer/zz_ijkplayer-master.jjdxm-ijkplayer.iml" filepath="$PROJECT_DIR$/.idea/modules/jjdxm-ijkplayer/zz_ijkplayer-master.jjdxm-ijkplayer.iml" />
     </modules>
   </component>
Index: app/src/main/java/com/dou361/jjdxm_ijkplayer/RemoteControl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.dou361.jjdxm_ijkplayer;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Activity;\r\nimport android.app.AlertDialog;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.PowerManager;\r\nimport android.util.Log;\r\nimport android.view.MotionEvent;\r\nimport android.view.View;\r\nimport android.view.ViewTreeObserver;\r\nimport android.widget.AdapterView;\r\nimport android.widget.Button;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.Spinner;\r\nimport android.widget.Toast;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.dou361.ijkplayer.bean.VideoijkBean;\r\nimport com.dou361.ijkplayer.listener.OnPlayerBackListener;\r\nimport com.dou361.ijkplayer.listener.OnPlayerStartOrPauseListener;\r\nimport com.dou361.ijkplayer.listener.OnShowThumbnailListener;\r\nimport com.dou361.ijkplayer.widget.PlayStateParams;\r\nimport com.dou361.ijkplayer.widget.PlayerView;\r\nimport com.tencent.iot.hub.device.java.App;\r\nimport com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;\r\nimport com.tencent.iot.hub.device.java.core.mqtt.TXMqttConnection;\r\nimport com.tencent.iot.hub.device.java.core.util.AsymcSslUtils;\r\nimport com.tencent.iot.hub.device.java.main.mqtt.MQTTSample;\r\nimport com.tencent.iot.hub.device.java.main.shadow.SelfMqttActionCallBack;\r\n\r\nimport org.eclipse.paho.client.mqttv3.MqttConnectOptions;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static android.os.SystemClock.uptimeMillis;\r\n\r\n\r\n//I added a line here by Github\r\n//I added this line by Android Studio\r\n\r\n/**\r\n * An example full-screen activity that shows and hides the system UI (i.e.\r\n * status bar and navigation/system bar) by style.xml.\r\n */\r\npublic class RemoteControl extends Activity {\r\n\r\n    private PlayerView player;\r\n    private Context mContext;\r\n    private List<VideoijkBean> list;\r\n    private PowerManager.WakeLock wakeLock;\r\n    private View rootView;\r\n    private Activity mActivity;\r\n\r\n    private static final String TAG = \"FullscreenActivity\";\r\n    private boolean Flag = false;\r\n    private int flagmove = 1;\r\n    private int flagget = 1;\r\n    private Button LlightingButton;\r\n    private ImageButton imageButton_forward,imageButton_backward;\r\n    private ImageView app_video_play;\r\n    private Spinner Video_Modul_Spinner;\r\n\r\n    private String mBrokerURL = \"ssl://fawtsp-mqtt-public-dev.faw.cn:8883\";  //传入null，即使用腾讯云物联网通信默认地址 \"${ProductId}.iotcloud.tencentdevices.com:8883\"  https://cloud.tencent.com/document/product/634/32546\r\n    private String mProductID = \"2N8PWJAI0V\";\r\n    private String mDevName = \"android_test_phone\";\r\n    private String mDevPSK  = \"KdV+RSnHAlmEpM75aWZQZg==\"; //若使用证书验证，设为null\r\n    private String mSubProductID = null; // If you wont test gateway, let this to be null\r\n    private String mSubDevName = null;\r\n    private String mSubDevPsk = \"BuildConfig.SUB_DEVICE_PSK\";\r\n    private String mTestTopic = \"2N8PWJAI0V/android_test_phone/data\";    // productID/DeviceName/TopicName\r\n    private String mDevCertName = \"YOUR_DEVICE_NAME_cert.crt\";\r\n    private String mDevKeyName  = \"YOUR_DEVICE_NAME_private.key\";\r\n    private String mProductKey = \"BuildConfig.PRODUCT_KEY\";        // Used for dynamic register\r\n    private String mDevCert = \"\";           // Cert String\r\n    private String mDevPriv = \"\";           // Priv String\r\n\r\n    private volatile boolean mIsConnected;\r\n\r\n    private final static String BROKER_URL = \"broker_url\";\r\n    private final static String PRODUCT_ID = \"product_id\";\r\n    private final static String DEVICE_NAME = \"dev_name\";\r\n    private final static String DEVICE_PSK = \"dev_psk\";\r\n    private final static String SUB_PRODUCID = \"sub_prodid\";\r\n    private final static String SUB_DEVNAME = \"sub_devname\";\r\n    private final static String TEST_TOPIC  = \"test_topic\";\r\n\r\n    private final static String DEVICE_CERT = \"dev_cert\";\r\n    private final static String DEVICE_PRIV  = \"dev_priv\";\r\n    private final static String PRODUCT_KEY  = \"product_key\";\r\n    private final static String SUB_DEVICE_PSK = \"sub_dev_psk\";\r\n\r\n    @SuppressLint(\"InvalidWakeLockTag\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        Log.d(TAG, \"onCreate: \");\r\n        super.onCreate(savedInstanceState);\r\n        this.mContext = this;\r\n        this.mActivity = this;\r\n        rootView = getLayoutInflater().from(this).inflate(R.layout.activity_remote_control, null);\r\n        setContentView(rootView);\r\n\r\n\r\n        while (!mIsConnected) {\r\n            Log.d(TAG, \"onCreate: Connecting Mqtt\");\r\n            MQTTSample mMQTTSample = new MQTTSample(new SelfMqttActionCallBack(), mBrokerURL, mProductID, mDevName, mDevPSK,mSubProductID,mSubDevName,mTestTopic);\r\n            mMQTTSample.connect();\r\n            sleep(2000);\r\n        }/* else {\r\n            Log.d(TAG, \"Mqtt has been connected, do not connect it again.\");\r\n        }*/\r\n\r\n\r\n\r\n        /**常亮*/\r\n        PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\r\n        wakeLock = pm.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK, \"liveTAG\");\r\n        wakeLock.acquire();\r\n\r\n\r\n        imageButton_forward=findViewById(R.id.forward);\r\n        imageButton_forward.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Log.d(TAG, \"onClick: Forward\");\r\n            }\r\n        });\r\n\r\n        imageButton_backward=findViewById(R.id.backward);\r\n        imageButton_backward.setOnTouchListener(new View.OnTouchListener() {\r\n            @Override\r\n            public boolean onTouch(View view, MotionEvent motionEvent) {\r\n                switch (motionEvent.getAction()){\r\n                    case MotionEvent.ACTION_DOWN:\r\n                        Log.d(TAG, \"onTouch: backwarDown\");\r\n                    case MotionEvent.ACTION_POINTER_DOWN:\r\n                        Log.d(TAG, \"onTouch: backward\");\r\n                    case MotionEvent.ACTION_MOVE:\r\n                        Log.d(TAG, \"onTouch: backwarding\");\r\n                    case MotionEvent.ACTION_UP:\r\n                        Log.d(TAG, \"onTouch: Up\");\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n\r\n\r\n\r\n        //下拉单选按钮\r\n        Video_Modul_Spinner = (Spinner)findViewById(R.id.Spinner_VIdeo_Model);\r\n        Video_Modul_Spinner.setSelection(0);//进入不会自动播放\r\n        Video_Modul_Spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n//                    String result = parent.getItemAtPosition(position).toString();\r\n//                    Toast.makeText(RemoteControl.this, result, Toast.LENGTH_SHORT).show();\r\n                    switch (position) {\r\n                        case 0: {\r\n                            /**前摄像*/\r\n                            list = new ArrayList<VideoijkBean>();\r\n                            //有部分视频加载有问题，这个视频是有声音显示不出图像的，没有解决http://fzkt-biz.oss-cn-hangzhou.aliyuncs.com/vedio/2f58be65f43946c588ce43ea08491515.mp4\r\n                            //这里模拟一个本地视频的播放，视频需要将testvideo文件夹的视频放到安卓设备的内置sd卡根目录中\r\n                            String url1 = \"rtmp://202.69.69.180:443/webcast/bshdlive-pc\";\r\n                            String url2 = \"http://ivi.bupt.edu.cn/hls/cctv1.m3u8\";\r\n                            VideoijkBean m1 = new VideoijkBean();\r\n                            m1.setStream(\"原始视频\");\r\n                            m1.setUrl(url1);\r\n                            VideoijkBean m2 = new VideoijkBean();\r\n                            m2.setStream(\"融合视频\");\r\n                            m2.setUrl(url2);\r\n                            list.add(m1);\r\n                            list.add(m2);\r\n                            player = new PlayerView(mActivity, rootView)\r\n                                    .setProcessDurationOrientation(PlayStateParams.PROCESS_PORTRAIT)\r\n                                    .setScaleType(PlayStateParams.fillparent) //视频界面剪裁设置\r\n                                    .forbidTouch(false)\r\n                                    .hideSteam(false)\r\n                                    .hideMenu(false)\r\n                                    .hideCenterPlayer(true)\r\n                                    .hideBack(false)\r\n                                    .setOnlyFullScreen(true)\r\n                                    .setNetWorkTypeTie(false)\r\n                                    .hideRotation(true)\r\n                                    .hideFullscreen(true)\r\n                                    .setChargeTie(true, 480)//设置最长播放时间\r\n                                    .showThumbnail(new OnShowThumbnailListener() {\r\n                                        @Override\r\n                                        public void onShowThumbnail(ImageView ivThumbnail) {\r\n//                                 加载前显示的缩略图\r\n                                            Glide.with(mContext)\r\n                                                    .load(\"http://pic2.nipic.com/20090413/406638_125424003_2.jpg\")\r\n                                                    .placeholder(R.color.cl_default) //加载成功之前占位图\r\n                                                    .error(R.color.cl_error)//加载错误之后的错误图\r\n                                                    .into(ivThumbnail);\r\n                                        }\r\n                                    })\r\n                                    .setPlayerBackListener(new OnPlayerBackListener() {\r\n                            @Override\r\n                            public void onPlayerBack() {\r\n                                //对话框\r\n                                AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                builder.setIcon(R.drawable.shangbackground);\r\n                                builder.setTitle(\"结束挪车\");//设置对话框的标题\r\n                                builder.setMessage(\"您已确定车辆已经抵达目标位置并结束挪车操作吗？\");//设置对话框的内容\r\n                                builder.setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        finish();\r\n                                        Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                        startActivity(intent);\r\n                                    }\r\n                                });\r\n                                builder.setNegativeButton(\"取消\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        Toast.makeText(RemoteControl.this, \"取消成功\",Toast.LENGTH_SHORT).show();\r\n                                        player.startPlay();\r\n                                    }\r\n                                });\r\n                                AlertDialog b=builder.create();\r\n                                b.show();\r\n                                player.onPause();\r\n\r\n                            }\r\n                        })\r\n                                    .setPlayerStartOrPauseListener(new OnPlayerStartOrPauseListener() {\r\n                                        @Override\r\n                                        public void onStartOrPause() {\r\n                                            //对话框\r\n                                            AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                            builder.setIcon(R.drawable.shangbackground);\r\n                                            builder.setTitle(\"暂停挪车\");//设置对话框的标题\r\n                                            builder.setMessage(\"挪车已暂停，是否继续挪车？\");//设置对话框的内容\r\n                                            builder.setPositiveButton(\"继续\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    player.startPlay();\r\n                                                }\r\n                                            });\r\n                                            builder.setNegativeButton(\"结束\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    finish();\r\n                                                    Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                                    startActivity(intent);\r\n                                                }\r\n                                            });\r\n                                            AlertDialog b=builder.create();\r\n                                            b.show();\r\n                                        }\r\n                                    })\r\n                                    .setPlaySource(list)\r\n                                    .startPlay();\r\n                        }\r\n                        break;\r\n\r\n                        case 1: {\r\n                            /**后摄像*/\r\n                            String url3 = \"http://ivi.bupt.edu.cn/hls/cctv2.m3u8\";\r\n                            player = new PlayerView(mActivity, rootView)\r\n                                    .setProcessDurationOrientation(PlayStateParams.PROCESS_PORTRAIT)\r\n                                    .setScaleType(PlayStateParams.fillparent) //视频界面剪裁设置\r\n                                    .forbidTouch(false)\r\n                                    .hideSteam(true)\r\n                                    .hideMenu(false)\r\n                                    .hideCenterPlayer(true)\r\n                                    .hideBack(false)\r\n                                    .setOnlyFullScreen(true)\r\n                                    .setNetWorkTypeTie(false)\r\n                                    .hideRotation(true)\r\n                                    .hideFullscreen(true)\r\n                                    .setChargeTie(true, 480)//设置最长播放时间\r\n                                    .showThumbnail(new OnShowThumbnailListener() {\r\n                                        @Override\r\n                                        public void onShowThumbnail(ImageView ivThumbnail) {\r\n//                                 加载前显示的缩略图\r\n                                            Glide.with(mContext)\r\n                                                    .load(\"http://pic2.nipic.com/20090413/406638_125424003_2.jpg\")\r\n                                                    .placeholder(R.color.cl_default) //加载成功之前占位图\r\n                                                    .error(R.color.cl_error)//加载错误之后的错误图\r\n                                                    .into(ivThumbnail);\r\n                                        }\r\n                                    })\r\n                                    .setPlayerBackListener(new OnPlayerBackListener() {\r\n                            @Override\r\n                            public void onPlayerBack() {\r\n                                //对话框\r\n                                AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                builder.setIcon(R.drawable.shangbackground);\r\n                                builder.setTitle(\"结束挪车\");//设置对话框的标题\r\n                                builder.setMessage(\"您已确定车辆已经抵达目标位置并结束挪车操作吗？\");//设置对话框的内容\r\n                                builder.setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        finish();\r\n                                        Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                        startActivity(intent);\r\n                                    }\r\n                                });\r\n                                builder.setNegativeButton(\"取消\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        Toast.makeText(RemoteControl.this, \"取消成功\",Toast.LENGTH_SHORT).show();\r\n                                        player.startPlay();\r\n                                    }\r\n                                });\r\n                                AlertDialog b=builder.create();\r\n                                b.show();\r\n                                player.onPause();\r\n                            }\r\n                        })\r\n                                    .setPlayerStartOrPauseListener(new OnPlayerStartOrPauseListener() {\r\n                                        @Override\r\n                                        public void onStartOrPause() {\r\n                                            //对话框\r\n                                            AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                            builder.setIcon(R.drawable.shangbackground);\r\n                                            builder.setTitle(\"暂停挪车\");//设置对话框的标题\r\n                                            builder.setMessage(\"挪车已暂停，是否继续挪车？\");//设置对话框的内容\r\n                                            builder.setPositiveButton(\"继续\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    player.startPlay();\r\n                                                }\r\n                                            });\r\n                                            builder.setNegativeButton(\"结束\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    finish();\r\n                                                    Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                                    startActivity(intent);\r\n                                                }\r\n                                            });\r\n                                            AlertDialog b=builder.create();\r\n                                            b.show();\r\n                                        }\r\n                                    })\r\n                                    .setPlaySource(url3)\r\n                                    .startPlay();\r\n\r\n                        }\r\n                        break;\r\n\r\n                        case 2: {\r\n                            /**左摄像*/\r\n                            //有部分视频加载有问题，这个视频是有声音显示不出图像的，没有解决http://fzkt-biz.oss-cn-hangzhou.aliyuncs.com/vedio/2f58be65f43946c588ce43ea08491515.mp4\r\n                            //这里模拟一个本地视频的播放，视频需要将testvideo文件夹的视频放到安卓设备的内置sd卡根目录中\r\n                            String url4 = \"http://ivi.bupt.edu.cn/hls/cctv3.m3u8\";\r\n                            player = new PlayerView(mActivity, rootView)\r\n                                    .setProcessDurationOrientation(PlayStateParams.PROCESS_PORTRAIT)\r\n                                    .setScaleType(PlayStateParams.fillparent) //视频界面剪裁设置\r\n                                    .forbidTouch(false)\r\n                                    .hideSteam(true)\r\n                                    .hideMenu(false)\r\n                                    .hideCenterPlayer(true)\r\n                                    .hideBack(false)\r\n                                    .setOnlyFullScreen(true)\r\n                                    .setNetWorkTypeTie(false)\r\n                                    .hideRotation(true)\r\n                                    .hideFullscreen(true)\r\n                                    .setChargeTie(true, 480)//设置最长播放时间\r\n                                    .showThumbnail(new OnShowThumbnailListener() {\r\n                                        @Override\r\n                                        public void onShowThumbnail(ImageView ivThumbnail) {\r\n//                                 加载前显示的缩略图\r\n                                            Glide.with(mContext)\r\n                                                    .load(\"http://pic2.nipic.com/20090413/406638_125424003_2.jpg\")\r\n                                                    .placeholder(R.color.cl_default) //加载成功之前占位图\r\n                                                    .error(R.color.cl_error)//加载错误之后的错误图\r\n                                                    .into(ivThumbnail);\r\n                                        }\r\n                                    })\r\n                                    .setPlayerBackListener(new OnPlayerBackListener() {\r\n                            @Override\r\n                            public void onPlayerBack() {\r\n                                //对话框\r\n                                AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                builder.setIcon(R.drawable.shangbackground);\r\n                                builder.setTitle(\"结束挪车\");//设置对话框的标题\r\n                                builder.setMessage(\"您已确定车辆已经抵达目标位置并结束挪车操作吗？\");//设置对话框的内容\r\n                                builder.setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        finish();\r\n                                        Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                        startActivity(intent);\r\n                                    }\r\n                                });\r\n                                builder.setNegativeButton(\"取消\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        Toast.makeText(RemoteControl.this, \"取消成功\",Toast.LENGTH_SHORT).show();\r\n                                        player.startPlay();\r\n                                    }\r\n                                });\r\n                                AlertDialog b=builder.create();\r\n                                b.show();\r\n                                player.onPause();\r\n                            }\r\n                        })\r\n                                    .setPlayerStartOrPauseListener(new OnPlayerStartOrPauseListener() {\r\n                                        @Override\r\n                                        public void onStartOrPause() {\r\n                                            //对话框\r\n                                            AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                            builder.setIcon(R.drawable.shangbackground);\r\n                                            builder.setTitle(\"暂停挪车\");//设置对话框的标题\r\n                                            builder.setMessage(\"挪车已暂停，是否继续挪车？\");//设置对话框的内容\r\n                                            builder.setPositiveButton(\"继续\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    player.startPlay();\r\n                                                }\r\n                                            });\r\n                                            builder.setNegativeButton(\"结束\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    finish();\r\n                                                    Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                                    startActivity(intent);\r\n                                                }\r\n                                            });\r\n                                            AlertDialog b=builder.create();\r\n                                            b.show();\r\n                                        }\r\n                                    })\r\n                                    .setPlaySource(url4)\r\n                                    .startPlay();\r\n                        }\r\n                        break;\r\n\r\n                        case 3: {\r\n                            /**右摄像*/\r\n                            String url5 = \"http://ivi.bupt.edu.cn/hls/cctv4.m3u8\";\r\n                            player = new PlayerView(mActivity, rootView)\r\n                                    .setProcessDurationOrientation(PlayStateParams.PROCESS_PORTRAIT)\r\n                                    .setScaleType(PlayStateParams.fillparent) //视频界面剪裁设置\r\n                                    .forbidTouch(false)\r\n                                    .hideSteam(true)\r\n                                    .hideMenu(false)\r\n                                    .hideCenterPlayer(true)\r\n                                    .hideBack(false)\r\n                                    .setOnlyFullScreen(true)\r\n                                    .setNetWorkTypeTie(false)\r\n                                    .hideRotation(true)\r\n                                    .hideFullscreen(true)\r\n                                    .setChargeTie(true, 480)//设置最长播放时间\r\n                                    .showThumbnail(new OnShowThumbnailListener() {\r\n                                        @Override\r\n                                        public void onShowThumbnail(ImageView ivThumbnail) {\r\n//                                 加载前显示的缩略图\r\n                                            Glide.with(mContext)\r\n                                                    .load(\"http://pic2.nipic.com/20090413/406638_125424003_2.jpg\")\r\n                                                    .placeholder(R.color.cl_default) //加载成功之前占位图\r\n                                                    .error(R.color.cl_error)//加载错误之后的错误图\r\n                                                    .into(ivThumbnail);\r\n                                        }\r\n                                    })\r\n                                    .setPlayerBackListener(new OnPlayerBackListener() {\r\n                            @Override\r\n                            public void onPlayerBack() {\r\n                                //对话框\r\n                                AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                builder.setIcon(R.drawable.shangbackground);\r\n                                builder.setTitle(\"结束挪车\");//设置对话框的标题\r\n                                builder.setMessage(\"您已确定车辆已经抵达目标位置并结束挪车操作吗？\");//设置对话框的内容\r\n                                builder.setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        finish();\r\n                                        Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                        startActivity(intent);\r\n                                    }\r\n                                });\r\n                                builder.setNegativeButton(\"取消\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        Toast.makeText(RemoteControl.this, \"取消成功\",Toast.LENGTH_SHORT).show();\r\n                                        player.startPlay();\r\n                                    }\r\n                                });\r\n                                AlertDialog b=builder.create();\r\n                                b.show();\r\n                                player.onPause();\r\n                            }\r\n                        })\r\n                                    .setPlayerStartOrPauseListener(new OnPlayerStartOrPauseListener() {\r\n                                        @Override\r\n                                        public void onStartOrPause() {\r\n                                            //对话框\r\n                                            AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                            builder.setIcon(R.drawable.shangbackground);\r\n                                            builder.setTitle(\"暂停挪车\");//设置对话框的标题\r\n                                            builder.setMessage(\"挪车已暂停，是否继续挪车？\");//设置对话框的内容\r\n                                            builder.setPositiveButton(\"继续\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    player.startPlay();\r\n                                                }\r\n                                            });\r\n                                            builder.setNegativeButton(\"结束\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    finish();\r\n                                                    Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                                    startActivity(intent);\r\n                                                }\r\n                                            });\r\n                                            AlertDialog b=builder.create();\r\n                                            b.show();\r\n                                        }\r\n                                    })\r\n\r\n                                    .setPlaySource(url5)\r\n                                    .startPlay();\r\n\r\n                        }\r\n                        break;\r\n\r\n                        case 4: {\r\n                            /**上帝*/\r\n\r\n                            String url6 = \"http://ivi.bupt.edu.cn/hls/cctv13.m3u8\";\r\n                            player = new PlayerView(mActivity, rootView)\r\n                                    .setProcessDurationOrientation(PlayStateParams.PROCESS_PORTRAIT)\r\n                                    .setScaleType(PlayStateParams.fillparent) //视频界面剪裁设置\r\n                                    .forbidTouch(false)\r\n                                    .hideSteam(true)\r\n                                    .hideMenu(false)\r\n                                    .hideCenterPlayer(true)\r\n                                    .hideBack(false)\r\n                                    .setOnlyFullScreen(true)\r\n                                    .setNetWorkTypeTie(false)\r\n                                    .hideRotation(true)\r\n                                    .hideFullscreen(true)\r\n                                    .setChargeTie(true, 480)//设置最长播放时间\r\n                                    .showThumbnail(new OnShowThumbnailListener() {\r\n                                        @Override\r\n                                        public void onShowThumbnail(ImageView ivThumbnail) {\r\n//                                 加载前显示的缩略图\r\n                                            Glide.with(mContext)\r\n                                                    .load(\"http://pic2.nipic.com/20090413/406638_125424003_2.jpg\")\r\n                                                    .placeholder(R.color.cl_default) //加载成功之前占位图\r\n                                                    .error(R.color.cl_error)//加载错误之后的错误图\r\n                                                    .into(ivThumbnail);\r\n                                        }\r\n                                    })\r\n                                    .setPlayerBackListener(new OnPlayerBackListener() {\r\n                            @Override\r\n                            public void onPlayerBack() {\r\n                                //对话框\r\n                                AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                builder.setIcon(R.drawable.shangbackground);\r\n                                builder.setTitle(\"结束挪车\");//设置对话框的标题\r\n                                builder.setMessage(\"您已确定车辆已经抵达目标位置并结束挪车操作吗？\");//设置对话框的内容\r\n                                builder.setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        finish();\r\n                                        Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                        startActivity(intent);\r\n                                    }\r\n                                });\r\n                                builder.setNegativeButton(\"取消\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                    @Override\r\n                                    public void onClick(DialogInterface arg0, int arg1) {\r\n                                        Toast.makeText(RemoteControl.this, \"取消成功\",Toast.LENGTH_SHORT).show();\r\n                                        player.startPlay();\r\n                                    }\r\n                                });\r\n                                AlertDialog b=builder.create();\r\n                                b.show();\r\n                                player.onPause();\r\n                            }\r\n                        })\r\n                                    .setPlayerStartOrPauseListener(new OnPlayerStartOrPauseListener() {\r\n                                        @Override\r\n                                        public void onStartOrPause() {\r\n                                            //对话框\r\n                                            AlertDialog.Builder builder=new AlertDialog.Builder(mContext);\r\n                                            builder.setIcon(R.drawable.shangbackground);\r\n                                            builder.setTitle(\"暂停挪车\");//设置对话框的标题\r\n                                            builder.setMessage(\"挪车已暂停，是否继续挪车？\");//设置对话框的内容\r\n                                            builder.setPositiveButton(\"继续\", new DialogInterface.OnClickListener() {  //这个是设置确定按钮\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    player.startPlay();\r\n                                                }\r\n                                            });\r\n                                            builder.setNegativeButton(\"结束\", new DialogInterface.OnClickListener() {  //取消按钮\r\n\r\n                                                @Override\r\n                                                public void onClick(DialogInterface arg0, int arg1) {\r\n                                                    finish();\r\n                                                    Intent intent=new Intent(RemoteControl.this,VideoMonitoring.class);\r\n                                                    startActivity(intent);\r\n                                                }\r\n                                            });\r\n                                            AlertDialog b=builder.create();\r\n                                            b.show();\r\n                                        }\r\n                                    })\r\n                                    .setPlaySource(url6)\r\n                                    .startPlay();\r\n\r\n                        }\r\n                        break;\r\n\r\n                        default:\r\n                            break;\r\n                    }\r\n\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) { }\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onPostCreate(Bundle savedInstanceState) {\r\n        super.onPostCreate(savedInstanceState);\r\n    }\r\n\r\n    //ms为需要休眠的时长\r\n    public static void sleep(long ms)\r\n    {\r\n        //uptimeMillis() Returns milliseconds since boot, not counting time spent in deep sleep.\r\n        long start = uptimeMillis();\r\n        long duration = ms;\r\n        boolean interrupted = false;\r\n        do {\r\n            try {\r\n                Thread.sleep(duration);\r\n            }\r\n            catch (InterruptedException e) {\r\n                interrupted = true;\r\n            }\r\n            duration = start + ms - uptimeMillis();\r\n        } while (duration > 0);\r\n\r\n        if (interrupted) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/dou361/jjdxm_ijkplayer/RemoteControl.java	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ app/src/main/java/com/dou361/jjdxm_ijkplayer/RemoteControl.java	(date 1606787825764)
@@ -27,16 +27,23 @@
 import com.dou361.ijkplayer.listener.OnShowThumbnailListener;
 import com.dou361.ijkplayer.widget.PlayStateParams;
 import com.dou361.ijkplayer.widget.PlayerView;
+import com.tencent.iot.hub.device.android.core.util.TXLog;
 import com.tencent.iot.hub.device.java.App;
+import com.tencent.iot.hub.device.java.core.common.Status;
 import com.tencent.iot.hub.device.java.core.mqtt.TXMqttActionCallBack;
 import com.tencent.iot.hub.device.java.core.mqtt.TXMqttConnection;
 import com.tencent.iot.hub.device.java.core.util.AsymcSslUtils;
+import com.tencent.iot.hub.device.java.main.mqtt.MQTTRequest;
 import com.tencent.iot.hub.device.java.main.mqtt.MQTTSample;
 import com.tencent.iot.hub.device.java.main.shadow.SelfMqttActionCallBack;
 
+import org.eclipse.paho.client.mqttv3.IMqttToken;
+import org.eclipse.paho.client.mqttv3.MqttCallback;
 import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
+import org.eclipse.paho.client.mqttv3.MqttMessage;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 import static android.os.SystemClock.uptimeMillis;
@@ -51,6 +58,8 @@
  */
 public class RemoteControl extends Activity {
 
+    private MQTTSample mMQTTSample;
+
     private PlayerView player;
     private Context mContext;
     private List<VideoijkBean> list;
@@ -109,7 +118,7 @@
 
         while (!mIsConnected) {
             Log.d(TAG, "onCreate: Connecting Mqtt");
-            MQTTSample mMQTTSample = new MQTTSample(new SelfMqttActionCallBack(), mBrokerURL, mProductID, mDevName, mDevPSK,mSubProductID,mSubDevName,mTestTopic);
+            mMQTTSample = new MQTTSample(new SelfMqttActionCallBack(),mBrokerURL,mProductID,mDevName,mDevPSK,mSubProductID,mSubDevName,mTestTopic);
             mMQTTSample.connect();
             sleep(2000);
         }/* else {
@@ -637,6 +646,85 @@
         super.onPostCreate(savedInstanceState);
     }
 
+    /**
+     * 实现TXMqttActionCallBack回调接口
+     */
+    private class SelfMqttActionCallBack extends TXMqttActionCallBack {
+
+        @Override
+        public void onConnectCompleted(Status status, boolean reconnect, Object userContext, String msg) {
+            String userContextInfo = "";
+            if (userContext instanceof MQTTRequest) {
+                userContextInfo = userContext.toString();
+            }
+            String logInfo = String.format("onConnectCompleted, status[%s], reconnect[%b], userContext[%s], msg[%s]",
+                    status.name(), reconnect, userContextInfo, msg);
+            Log.d(TAG, "onConnectCompleted: "+logInfo);
+            if(status==Status.OK){
+            mIsConnected = true;}
+        }
+
+        @Override
+        public void onConnectionLost(Throwable cause) {
+            String logInfo = String.format("onConnectionLost, cause[%s]", cause.toString());
+
+        }
+
+        @Override
+        public void onDisconnectCompleted(Status status, Object userContext, String msg) {
+            String userContextInfo = "";
+            if (userContext instanceof MQTTRequest) {
+                userContextInfo = userContext.toString();
+            }
+            String logInfo = String.format("onDisconnectCompleted, status[%s], userContext[%s], msg[%s]", status.name(), userContextInfo, msg);
+
+            mIsConnected = false;
+        }
+
+        @Override
+        public void onPublishCompleted(Status status, IMqttToken token, Object userContext, String errMsg) {
+            String userContextInfo = "";
+            if (userContext instanceof MQTTRequest) {
+                userContextInfo = userContext.toString();
+            }
+            String logInfo = String.format("onPublishCompleted, status[%s], topics[%s],  userContext[%s], errMsg[%s]",
+                    status.name(), Arrays.toString(token.getTopics()), userContextInfo, errMsg);
+
+        }
+
+        @Override
+        public void onSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {
+            String userContextInfo = "";
+            if (userContext instanceof MQTTRequest) {
+                userContextInfo = userContext.toString();
+            }
+            String logInfo = String.format("onSubscribeCompleted, status[%s], topics[%s], userContext[%s], errMsg[%s]",
+                    status.name(), Arrays.toString(asyncActionToken.getTopics()), userContextInfo, errMsg);
+            if (Status.ERROR == status) {
+
+            } else {
+
+            }
+        }
+
+        @Override
+        public void onUnSubscribeCompleted(Status status, IMqttToken asyncActionToken, Object userContext, String errMsg) {
+            String userContextInfo = "";
+            if (userContext instanceof MQTTRequest) {
+                userContextInfo = userContext.toString();
+            }
+            String logInfo = String.format("onUnSubscribeCompleted, status[%s], topics[%s], userContext[%s], errMsg[%s]",
+                    status.name(), Arrays.toString(asyncActionToken.getTopics()), userContextInfo, errMsg);
+
+        }
+
+        @Override
+        public void onMessageReceived(final String topic, final MqttMessage message) {
+            String logInfo = String.format("receive command, topic[%s], message[%s]", topic, message.toString());
+
+        }
+    }
+
     //ms为需要休眠的时长
     public static void sleep(long ms)
     {
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"NullableNotNullManager\">\r\n    <option name=\"myDefaultNullable\" value=\"android.support.annotation.Nullable\" />\r\n    <option name=\"myDefaultNotNull\" value=\"android.support.annotation.NonNull\" />\r\n    <option name=\"myNullables\">\r\n      <value>\r\n        <list size=\"15\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"javax.annotation.CheckForNull\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.Nullable\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"android.annotation.Nullable\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNullable\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.Nullable\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableDecl\" />\r\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NullableType\" />\r\n          <item index=\"11\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.Nullable\" />\r\n          <item index=\"12\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.Nullable\" />\r\n          <item index=\"13\" class=\"java.lang.String\" itemvalue=\"io.reactivex.annotations.Nullable\" />\r\n          <item index=\"14\" class=\"java.lang.String\" itemvalue=\"io.reactivex.rxjava3.annotations.Nullable\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n    <option name=\"myNotNulls\">\r\n      <value>\r\n        <list size=\"14\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.NonNull\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"android.annotation.NonNull\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNonNull\" />\r\n          <item index=\"7\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.qual.NonNull\" />\r\n          <item index=\"8\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullDecl\" />\r\n          <item index=\"9\" class=\"java.lang.String\" itemvalue=\"org.checkerframework.checker.nullness.compatqual.NonNullType\" />\r\n          <item index=\"10\" class=\"java.lang.String\" itemvalue=\"com.android.annotations.NonNull\" />\r\n          <item index=\"11\" class=\"java.lang.String\" itemvalue=\"org.eclipse.jdt.annotation.NonNull\" />\r\n          <item index=\"12\" class=\"java.lang.String\" itemvalue=\"io.reactivex.annotations.NonNull\" />\r\n          <item index=\"13\" class=\"java.lang.String\" itemvalue=\"io.reactivex.rxjava3.annotations.NonNull\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n  <component name=\"masterDetails\">\r\n    <states>\r\n      <state key=\"ScopeChooserConfigurable.UI\">\r\n        <settings>\r\n          <splitter-proportions>\r\n            <option name=\"proportions\">\r\n              <list>\r\n                <option value=\"0.2\" />\r\n              </list>\r\n            </option>\r\n          </splitter-proportions>\r\n        </settings>\r\n      </state>\r\n    </states>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ .idea/misc.xml	(date 1606791714885)
@@ -45,7 +45,7 @@
       </value>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" default="false" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"1.8\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ .idea/compiler.xml	(date 1606791714894)
@@ -1,6 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="1.8" />
+    <bytecodeTargetLevel target="1.7">
+      <module name="zz_ijkplayer-master.app" target="1.8" />
+      <module name="zz_ijkplayer-master.iot_core" target="1.8" />
+      <module name="zz_ijkplayer-master.iot_service" target="1.8" />
+      <module name="zz_ijkplayer-master.jjdxm-ijkplayer" target="1.8" />
+    </bytecodeTargetLevel>
   </component>
 </project>
\ No newline at end of file
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>include ':app','jjdxm-ijkplayer'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- settings.gradle	(revision d639d42af3b4d1d64331afeb5f0ff8da0bb040d2)
+++ settings.gradle	(date 1606791709571)
@@ -1,1 +1,3 @@
-include ':app','jjdxm-ijkplayer'
+include ':app','jjdxm-ijkplayer','iot_service','iot_core'
+include ':explorer-device-java'
+include ':hub-device-java'
